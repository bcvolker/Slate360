exports.id=991,exports.ids=[991],exports.modules={26626:(e,t,a)=>{Promise.resolve().then(a.t.bind(a,2583,23)),Promise.resolve().then(a.t.bind(a,26840,23)),Promise.resolve().then(a.t.bind(a,38771,23)),Promise.resolve().then(a.t.bind(a,13225,23)),Promise.resolve().then(a.t.bind(a,9295,23)),Promise.resolve().then(a.t.bind(a,43982,23))},39496:(e,t,a)=>{Promise.resolve().then(a.bind(a,55759))},55759:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});var s=a(95344);a(3729);var r=a(44669);function n({children:e}){return(0,s.jsxs)(s.Fragment,{children:[e,s.jsx(r.x7,{position:"top-right",toastOptions:{duration:4e3,style:{background:"#363636",color:"#fff"},success:{duration:3e3,iconTheme:{primary:"#10B981",secondary:"#fff"}},error:{duration:5e3,iconTheme:{primary:"#EF4444",secondary:"#fff"}}}})]})}},66133:(e,t,a)=>{"use strict";a.d(t,{jp:()=>u});var s=a(3729),r=a(47674),n=a(93161);class i extends n.ZP{constructor(){super("ProjectDatabase"),this.version(1).stores({projects:"_id, _offlineId, _syncStatus, status, type, createdBy, _lastSync",syncQueue:"++id, type, entityType, entityId, timestamp, retryCount",syncMetadata:"key"}),this.version(2).stores({projects:"_id, _offlineId, _syncStatus, status, type, createdBy, _lastSync, name, client.name, tags"})}async getProject(e){return await this.projects.get(e)}async getAllProjects(){return await this.projects.toArray()}async getProjectsByFilter(e){let t=this.projects.toCollection();if(e.status&&(t=t.filter(t=>t.status===e.status)),e.type&&(t=t.filter(t=>t.type===e.type)),e.client&&(t=t.filter(t=>t.client.name.toLowerCase().includes(e.client.toLowerCase())||t.client.company?.toLowerCase().includes(e.client.toLowerCase()))),e.search){let a=e.search.toLowerCase();t=t.filter(e=>e.name.toLowerCase().includes(a)||e.description.toLowerCase().includes(a)||e.client.name.toLowerCase().includes(a)||e.client.company?.toLowerCase().includes(a)||e.tags.some(e=>e.toLowerCase().includes(a)))}return e.createdBy&&(t=t.filter(t=>t.createdBy===e.createdBy)),await t.toArray()}async getSyncStatus(){let e=await this.projects.toArray(),t=await this.syncMetadata.get("lastSync");return{totalProjects:e.length,syncedProjects:e.filter(e=>"synced"===e._syncStatus).length,pendingProjects:e.filter(e=>"pending"===e._syncStatus).length,failedProjects:e.filter(e=>"failed"===e._syncStatus).length,lastSync:t?.value}}async getPendingSyncItems(){return await this.syncQueue.where("retryCount").below(3).toArray()}async clearOldSyncData(){let e=new Date;e.setDate(e.getDate()-30),await this.projects.where("_lastSync").below(e).and(e=>"synced"===e._syncStatus).delete()}}let c=new i;var o=a(44669);class l{constructor(){this.isOnline=navigator.onLine,this.listeners=[],window.addEventListener("online",()=>this.updateStatus(!0)),window.addEventListener("offline",()=>this.updateStatus(!1))}updateStatus(e){this.isOnline=e,this.listeners.forEach(t=>t(e)),e?(o.Am.success("Back online! Syncing data..."),this.triggerSync()):o.Am.error("You're offline. Changes will be saved locally.")}getStatus(){return this.isOnline}addListener(e){return this.listeners.push(e),()=>{let t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}}async triggerSync(){try{await d.syncPendingChanges()}catch(e){console.error("Auto-sync failed:",e)}}}class d{static{this.networkManager=new l}static{this.syncInProgress=!1}static{this.syncInterval=null}static initialize(){this.networkManager.addListener(e=>{e?this.startPeriodicSync():this.stopPeriodicSync()}),this.networkManager.getStatus()&&this.startPeriodicSync(),this.syncFromServer()}static startPeriodicSync(){this.syncInterval||(this.syncInterval=setInterval(async()=>{if(this.networkManager.getStatus()&&!this.syncInProgress)try{await this.syncPendingChanges()}catch(e){console.error("Periodic sync failed:",e)}},3e4))}static stopPeriodicSync(){this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null)}static isOnline(){return this.networkManager.getStatus()}static onNetworkChange(e){return this.networkManager.addListener(e)}static async syncFromServer(){if(!this.networkManager.getStatus()){console.log("Offline - skipping server sync");return}try{let e=await fetch("/api/projects?limit=1000");if(e.ok){let t=(await e.json()).projects,a=await c.getAllProjects(),s=new Map(a.map(e=>[e._id,e]));for(let e of t){let t=s.get(e._id);if(!t||this.isServerVersionNewer(e,t)){let a={...e,_syncStatus:"synced",_lastSync:new Date,_offlineChanges:t?._offlineChanges||[]};await c.projects.put(a)}}await c.syncMetadata.put({key:"lastSync",value:new Date}),console.log(`Synced ${t.length} projects from server`)}}catch(e){throw console.error("Failed to sync from server:",e),e}}static isServerVersionNewer(e,t){return new Date(e.updatedAt)>new Date(t.updatedAt)}static async syncPendingChanges(){if(!this.networkManager.getStatus()){console.log("Offline - skipping sync to server");return}if(this.syncInProgress){console.log("Sync already in progress");return}this.syncInProgress=!0;try{let e=await c.getPendingSyncItems();if(0===e.length){console.log("No pending sync items");return}for(let t of(console.log(`Syncing ${e.length} pending changes`),e))try{await this.processSyncItem(t),await c.syncQueue.delete(t.id)}catch(e){console.error(`Failed to sync item ${t.id}:`,e),await c.syncQueue.update(t.id,{retryCount:t.retryCount+1,lastAttempt:new Date})}await this.updateProjectSyncStatuses()}finally{this.syncInProgress=!1}}static async processSyncItem(e){switch(e.type){case"create":await this.createProjectOnServer(e);break;case"update":await this.updateProjectOnServer(e);break;case"delete":await this.deleteProjectOnServer(e)}}static async createProjectOnServer(e){let t=await fetch("/api/projects",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.data)});if(!t.ok)throw Error(`Failed to create project: ${t.statusText}`);let a=await t.json();await c.projects.update(e.entityId,{_id:a.project._id,_syncStatus:"synced",_lastSync:new Date})}static async updateProjectOnServer(e){let t=await fetch(`/api/projects/${e.entityId}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.data)});if(!t.ok)throw Error(`Failed to update project: ${t.statusText}`);await c.projects.update(e.entityId,{_syncStatus:"synced",_lastSync:new Date})}static async deleteProjectOnServer(e){let t=await fetch(`/api/projects/${e.entityId}`,{method:"DELETE"});if(!t.ok)throw Error(`Failed to delete project: ${t.statusText}`);await c.projects.delete(e.entityId)}static async updateProjectSyncStatuses(){for(let e of(await c.getAllProjects()))"pending"===e._syncStatus&&0===(await c.syncQueue.where("entityId").equals(e._id).toArray()).length&&await c.projects.update(e._id,{_syncStatus:"synced",_lastSync:new Date})}static async createProject(e){let t=`offline_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,a={...e,_id:t,_offlineId:t,_syncStatus:"pending",_lastSync:new Date,_offlineChanges:[{type:"create",timestamp:new Date,data:e}]};return await c.projects.add(a),await c.syncQueue.add({type:"create",entityType:"project",entityId:t,data:e,timestamp:new Date,retryCount:0}),this.networkManager.getStatus()&&this.syncPendingChanges().catch(console.error),a}static async updateProject(e,t){let a=await c.projects.get(e);if(!a)throw Error("Project not found");let s={...a,...t,_syncStatus:"pending",_lastSync:new Date,_offlineChanges:[...a._offlineChanges||[],{type:"update",timestamp:new Date,data:t}]};return await c.projects.put(s),await c.syncQueue.add({type:"update",entityType:"project",entityId:e,data:t,timestamp:new Date,retryCount:0}),this.networkManager.getStatus()&&this.syncPendingChanges().catch(console.error),s}static async deleteProject(e){let t=await c.projects.get(e);if(!t)throw Error("Project not found");await c.projects.update(e,{_syncStatus:"pending",_lastSync:new Date,_offlineChanges:[...t._offlineChanges||[],{type:"delete",timestamp:new Date}]}),await c.syncQueue.add({type:"delete",entityType:"project",entityId:e,timestamp:new Date,retryCount:0}),this.networkManager.getStatus()&&this.syncPendingChanges().catch(console.error)}static async getSyncStatus(){return await c.getSyncStatus()}static async forceSync(){if(!this.networkManager.getStatus())throw Error("Cannot sync while offline");await this.syncFromServer(),await this.syncPendingChanges()}static async clearOldData(){await c.clearOldSyncData()}}let y=d.networkManager;function u(){let{data:e}=(0,r.useSession)(),[t,a]=(0,s.useState)([]),[n,i]=(0,s.useState)(!0),[l,u]=(0,s.useState)(null),[h,w]=(0,s.useState)(y.getStatus()),[p,f]=(0,s.useState)(null);(0,s.useEffect)(()=>{e?.user&&g()},[e?.user]),(0,s.useEffect)(()=>d.onNetworkChange(e=>{w(e),e&&m()}),[]);let g=async()=>{try{i(!0),u(null),d.initialize(),await S(),await m()}catch(e){u(e instanceof Error?e.message:"Failed to initialize offline projects"),console.error("Failed to initialize offline projects:",e)}finally{i(!1)}},S=async()=>{try{let e=await c.getAllProjects();a(e)}catch(e){throw console.error("Failed to load local projects:",e),e}},m=async()=>{try{let e=await d.getSyncStatus();f(e)}catch(e){console.error("Failed to refresh sync status:",e)}},j=(0,s.useCallback)(async e=>{try{u(null);let t=await d.createProject(e);return a(e=>[t,...e]),h?o.Am.success("Project created and synced to server"):o.Am.success("Project created offline. Will sync when online."),await m(),t}catch(t){let e=t instanceof Error?t.message:"Failed to create project";throw u(e),o.Am.error(e),t}},[h]),P=(0,s.useCallback)(async(e,t)=>{try{u(null);let s=await d.updateProject(e,t);return a(t=>t.map(t=>t._id===e?s:t)),h?o.Am.success("Project updated and synced to server"):o.Am.success("Project updated offline. Will sync when online."),await m(),s}catch(t){let e=t instanceof Error?t.message:"Failed to update project";throw u(e),o.Am.error(e),t}},[h]),v=(0,s.useCallback)(async e=>{try{u(null),await d.deleteProject(e),a(t=>t.filter(t=>t._id!==e)),h?o.Am.success("Project deleted and synced to server"):o.Am.success("Project deleted offline. Will sync when online."),await m()}catch(t){let e=t instanceof Error?t.message:"Failed to delete project";throw u(e),o.Am.error(e),t}},[h]),C=(0,s.useCallback)(async()=>{try{i(!0),u(null),await S(),await m()}catch(t){let e=t instanceof Error?t.message:"Failed to refresh projects";u(e),o.Am.error(e)}finally{i(!1)}},[]),_=(0,s.useCallback)(async()=>{try{if(u(null),i(!0),!h)throw Error("Cannot sync while offline");o.Am.loading("Syncing with server..."),await d.forceSync(),await S(),await m(),o.Am.dismiss(),o.Am.success("Sync completed successfully")}catch(t){let e=t instanceof Error?t.message:"Failed to sync with server";throw u(e),o.Am.dismiss(),o.Am.error(e),t}finally{i(!1)}},[h]),k=(0,s.useCallback)(e=>t.find(t=>t._id===e),[t]);return{projects:t,loading:n,error:l,isOnline:h,syncStatus:p,createProject:j,updateProject:P,deleteProject:v,refreshProjects:C,forceSync:_,getProject:k,getProjectsByFilter:(0,s.useCallback)(async e=>{try{return await c.getProjectsByFilter(e)}catch(e){throw console.error("Failed to filter projects:",e),e}},[]),clearOldData:(0,s.useCallback)(async()=>{try{await d.clearOldData(),await S(),await m(),o.Am.success("Old data cleared successfully")}catch(t){let e=t instanceof Error?t.message:"Failed to clear old data";throw o.Am.error(e),t}},[])}}},38357:(e,t,a)=>{"use strict";a.d(t,{qs:()=>n}),a(95344);var s=a(47674),r=a(22254);function n(){let{data:e,status:t}=(0,s.useSession)();(0,r.useRouter)();let a="authenticated"===t,n=e?.user?.role||null,i=e?.user?.tier||null,c="ceo"===n,o="admin"===n||"ceo"===n,l="premium"===i||"enterprise"===i,d="enterprise"===i;return{isAuthenticated:a,userRole:n,userTier:i,isCEO:c,isAdmin:o,isPremium:l,isEnterprise:d,canAccessFeature:e=>{if(!a)return!1;switch(e){case"project-hub":return!0;case"bim-viewer":case"360-tours":return l;case"vr-ar":case"geospatial":return d;case"ceo-dashboard":return c;case"admin-panel":return o;default:return!1}}}}},94250:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>y,metadata:()=>d});var s=a(25036),r=a(53640),n=a.n(r);a(5023);let i=(0,a(86843).createProxy)(String.raw`C:\Slate360\frontend\src\components\ToastProvider.tsx`),{__esModule:c,$$typeof:o}=i,l=i.default,d={title:"Slate360 - Project Management Platform",description:"Advanced project management with AI-powered insights and real-time collaboration"};function y({children:e}){return s.jsx("html",{lang:"en",children:s.jsx("body",{className:n().className,children:s.jsx(l,{children:e})})})}},5023:()=>{}};