{"version":3,"file":"static/chunks/581-171fad2187f9abd1.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lucide-react/dist/esm/defaultAttributes.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/createLucideIcon.js","webpack://_N_E/./node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.production.min.js","webpack://_N_E/./node_modules/next/dist/compiled/react/jsx-runtime.js","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-color.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/debug/record.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * lucide-react v0.292.0 - ISC\n */\n\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n\nexport { defaultAttributes as default };\n//# sourceMappingURL=defaultAttributes.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\n\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef(\n    ({ color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, children, ...rest }, ref) => createElement(\n      \"svg\",\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: `lucide lucide-${toKebabCase(iconName)}`,\n        ...rest\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...(Array.isArray(children) ? children : [children]) || []\n      ]\n    )\n  );\n  Component.displayName = `${iconName}`;\n  return Component;\n};\n\nexport { createLucideIcon as default, toKebabCase };\n//# sourceMappingURL=createLucideIcon.js.map\n","/*\n React\n react-jsx-runtime.production.min.js\n\n Copyright (c) Meta Platforms, Inc. and affiliates.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n*/\n'use strict';var f=require(\"next/dist/compiled/react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n\n//# sourceMappingURL=react-jsx-runtime.production.min.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false,\n    };\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(() => (runNextFrame = true));\n        return acc;\n    }, {});\n    const processStep = (stepId) => steps[stepId].process(state);\n    const processBatch = () => {\n        const timestamp = performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from '../utils/noop.mjs';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, steps };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\nconst cssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g;\n\nexport { cssVariableRegex, isCSSVariableName, isCSSVariableToken };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !globalTapTarget &&\n                        !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from './errors.mjs';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { cssVariableRegex } from '../../../render/dom/utils/is-css-variable.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { colorRegex, floatRegex, isString, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst cssVarTokeniser = {\n    regex: cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: noop,\n};\nconst colorTokeniser = {\n    regex: colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: color.parse,\n};\nconst numberTokeniser = {\n    regex: floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: number.parse,\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches)\n        return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0,\n    };\n    if (info.value.includes(\"var(--\"))\n        tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            }\n            else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, color.transform(v[i]));\n            }\n            else {\n                output = output.replace(numberTokeniser.token, sanitize(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nconst mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return origin.startsWith(\"var(\")\n            ? mixImmediate(origin, target)\n            : mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numVars === targetStats.numVars &&\n        originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { invariant } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        return color.test(v) ? mixColor : mixComplex;\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { mix } from '../mix.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        if (process.env.NODE_ENV !== \"production\") {\n            invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n        }\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Cancelling an animation will write to the DOM. For safety we want to defer\n     * this until the next `update` frame lifecycle. This flag tracks whether we\n     * have a pending cancel, if so we shouldn't allow animations to finish.\n     */\n    let pendingCancel = false;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => {\n        pendingCancel = false;\n        animation.cancel();\n    };\n    const safeCancel = () => {\n        pendingCancel = true;\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        if (pendingCancel)\n            return;\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => {\n            if (pendingCancel)\n                return;\n            animation.finish();\n        },\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\n\nexport { isNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isNone } from './is-none.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [...target];\n    }\n    else {\n        keyframes = [null, target];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < keyframes.length; i++) {\n        /**\n         * Fill null/wildcard keyframes\n         */\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" &&\n            keyframes[i] !== \"none\" &&\n            keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable &&\n        noneKeyframeIndexes.length &&\n        animatableTemplateValue) {\n        for (let i = 0; i < noneKeyframeIndexes.length; i++) {\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\nexport { getKeyframes };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, isTransitionDefined };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n};\n\nexport { MotionGlobalConfig };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false ||\n            MotionGlobalConfig.skipAnimations) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(instantAnimationState.current\n                ? { ...options, delay: 0 }\n                : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (\n        /**\n         * If this is a handoff animation, the optimised animation will be running via\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n         * optimised animation.\n         */\n        !transition.isHandoff &&\n            value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.18.0\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff &&\n            !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.18.0\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.18.0 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","const noop = (any) => any;\n\nexport { noop };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n"],"names":["defaultAttributes","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","toKebabCase","string","replace","toLowerCase","createLucideIcon","iconName","iconNode","Component","react","forwardRef","color","size","absoluteStrokeWidth","children","rest","ref","createElement","Number","className","map","tag","attrs","Array","isArray","displayName","f","__webpack_require__","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","exports","Fragment","jsx","jsxs","module","LayoutGroupContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","PresenceContext","Queue","constructor","order","scheduled","Set","add","process","has","push","remove","index","indexOf","splice","delete","clear","length","stepsOrder","schedule","frame_frame","cancel","cancelFrame","state","frameData","steps","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","delta","timestamp","isProcessing","reduce","acc","createRenderStep","thisFrame","nextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","callback","keepAlive","immediate","addToCurrentFrame","queue","i","processStep","stepId","processBatch","performance","now","Math","max","min","forEach","wake","requestAnimationFrame","noop","Z","result","isValidProp","MotionConfigContext","transformPagePoint","isStatic","reducedMotion","MotionContext","LazyContext","strict","camelToDash","str","optimizedAppearDataAttribute","isRefObject","isVariantLabel","v","isAnimationControls","start","variantPriorityOrder","variantProps","isControllingVariants","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","SwitchLayoutGroupContext","motionComponentSymbol","lowercaseSVGElements","isSVGComponent","includes","test","scaleCorrectors","transformPropOrder","transformProps","isForcedMotionValue","layoutId","startsWith","undefined","isMotionValue","value","getVelocity","translateAlias","x","y","z","transformPerspective","numTransforms","checkStringStartsWith","token","isCSSVariableName","isCSSVariableToken","getValueAsType","transform","clamp","number","parse","parseFloat","alpha","scale","default","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","split","degrees","percent","px","vh","vw","progressPercentage","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","maxWidth","maxHeight","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","originX","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","latestValues","options","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","target","source","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","renderHTML","element","styleProp","projection","assign","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","charAt","toUpperCase","substring","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","get","makeUseVisualState","context","useContext","presenceContext","context_PresenceContext","O","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","mount","instance","config","use_constant","svgMotionConfig","useVisualState","frameloop_frame","Wi","read","getBBox","getBoundingClientRect","render","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","combineFunctions","pipe","transformers","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","node","isMounted","update","addHoverEvent","isActive","callbackName","info","getProps","animationState","whileHover","setActive","HoverGesture","unmount","FocusGesture","arguments","onFocus","isFocusVisible","matches","onBlur","isNodeOrChild","parent","child","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startEvent","startInfo","isPressing","removePointerUpListener","window","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","onTapStart","whileTap","removePointerListener","removeFocusListener","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","InViewFeature","hasEnteredView","isInView","startObserver","viewport","root","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","document","set","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasViewportOptionChanged","prevViewport","shallowCompare","next","prev","prevLength","resolveVariant","visualElement","getCurrent","velocity","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","instantAnimationState","isBezierDefinition","easing","cubicBezierAsString","supportedWaapiEasing","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","calcBezier","t","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","isEasingArray","mirrorEasing","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","errors","x1","y1","x2","y2","isColorString","testProp","splitColor","aName","bName","cName","match","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","parseInt","hsla","hue","saturation","lightness","from","to","progress","hueToRgb","mixLinearColor","fromExpo","sqrt","colorTypes","getColorType","find","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","cssVarTokeniser","regex","countKey","colorTokeniser","numberTokeniser","tokenise","tokenised","analyseComplexValue","originalValue","toString","numVars","numColors","numNumbers","parseComplexValue","createTransformer","numValues","output","convertNumbersToZero","complex","_b","isNaN","getAnimatableNone","parsed","transformer","mixImmediate","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","K","toFromDifference","mixNumber","interpolate","input","isClamp","mixer","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","detectMixerFactory","numMixers","interpolator","progressInRange","keyframes","duration","keyframeValues","times","easingFunctions","done","mapTimeToKeyframe","defaultOffset","arr","fillOffset","remaining","offsetProgress","o","calculatedDuration","calcGeneratorVelocity","resolveValue","frameDuration","prevT","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","resolveSpring","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","exponentialDecay","safeMin","exp","approximateRoot","initialGuess","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","stop","Pn","calcGeneratorDuration","generator","Infinity","types","decay","tween","animateValue","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","resolveFinishedPromise","currentFinishedPromise","animationDriver","mapNumbersToKeyframes","mirroredGenerator","speed","hasStopped","updateFinishedPromise","Promise","resolve","generatorFactory","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isAnimationFinished","finish","stopAnimationDriver","play","controls","then","reject","time","newTime","newSpeed","pause","complete","sample","supportsWaapi","Element","acceleratedValues","requiresPregeneratedKeyframes","valueName","isWaapiSupportedEasing","every","underDampedSpring","criticallyDampedSpring","keyframesTransition","getDefaultTransition","valueKey","isAnimatable","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","filter","functions","defaultValueTypes","backgroundColor","outlineColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","isZeroValueString","getValueTransition","MotionGlobalConfig","skipAnimations","animateMotionValue","valueTransition","getKeyframes","animatableTemplateValue","isTargetAnimatable","defaultOrigin","noneKeyframeIndexes","originKeyframe","targetKeyframe","isOriginAnimatable","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","createInstantAnimation","setValue","isHandoff","owner","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","pendingCancel","sampleAnimation","pregeneratedKeyframes","animateStyle","keyframeOptions","mapEasingToNativeEasing","iterations","direction","cancelAnimation","safeCancel","onfinish","getFinalKeyframe","attachTimeline","timeline","playbackRate","setWithVelocity","isWillChangeMotionValue","isNumericalString","addUniqueItem","item","removeItem","SubscriptionManager","subscriptions","notify","numSubscriptions","getSize","isFloat","collectMotionValues","MotionValue","init","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","postRender","scheduleVelocityCheck","change","velocityChange","renderRequest","velocityCheck","hasAnimated","onChange","subscription","on","unsubscribe","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","jump","getPrevious","startAnimation","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue","testValueType","dimensionValueTypes","findDimensionValueType","valueTypes","findValueType","animateTarget","transitionOverride","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","canSkip","hasKeyframesChanged","shouldReduceMotion","setTarget","hasValue","addValue","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","first","last","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","AnimationFeature","createAnimationState","animateVisualElement","resolvedDefinition","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","shouldAnimateType","variantDidChange","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","id","ExitAnimationFeature","isPresent","onExitComplete","prevIsPresent","prevPresenceContext","exitAnimation","register","PanSession","handlers","contextWindow","dragSnapToOrigin","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","getContextWindow","ownerDocument","defaultView","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","DragGesture","removeGroupControls","dragControls","asyncHandler","PanGesture","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","didUpdate","safeToRemove","setOptions","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","useId","useEffect","applyTo","boxShadow","treeScale","projectionDelta","shadow","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","isDirty","transformAxes","hiddenVisibility","visibility","create_projection_node_id","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","S6","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","snapshotSource","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","setStaticValue","styles","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","roundPoint","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","splitCSSVariableRegex","getVariableValue","fallback","parseCSSVariable","exec","getPropertyValue","trimmed","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","is_browser","j","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","reducedMotionConfig","visualState","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","startAtParent","closestVariantNode","removeValueFromRenderState","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","transformValues","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","getAttribute","create_visual_element_createDomVisualElement","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useMemo","useVisualElement","lazyContext","visualElementRef","useRef","renderer","useInsertionEffect","wantsHandoff","HandoffComplete","use_isomorphic_effect","L","Provider","useCallback","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","createUseRender","visualProps","useVisualProps","_isStatic","rawStyles","htmlProps","useStyle","useInitialMotionValues","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","elementProps","filterProps","isDom","filteredProps","renderedChildren","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","isBrowser","any","useConstant","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect"],"sourceRoot":""}