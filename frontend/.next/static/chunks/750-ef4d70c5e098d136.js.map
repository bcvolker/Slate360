{"version":3,"file":"static/chunks/750-ef4d70c5e098d136.js","mappings":"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","sources":["webpack://_N_E/./src/lib/db/indexedDB.ts","webpack://_N_E/./src/lib/sync/projectSync.ts","webpack://_N_E/./src/hooks/useOfflineProjects.ts","webpack://_N_E/./src/hooks/useRole.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { IProject } from '@/models/Project';\r\n\r\n// Extended project interface for offline storage\r\nexport interface OfflineProject extends IProject {\r\n  _id: string;\r\n  _offlineId?: string; // Local ID for offline-created projects\r\n  _syncStatus: 'synced' | 'pending' | 'failed';\r\n  _lastSync?: Date;\r\n  _offlineChanges?: {\r\n    type: 'create' | 'update' | 'delete';\r\n    timestamp: Date;\r\n    data?: any;\r\n  }[];\r\n}\r\n\r\n// Sync queue interface\r\nexport interface SyncQueueItem {\r\n  id?: number;\r\n  type: 'create' | 'update' | 'delete';\r\n  entityType: 'project';\r\n  entityId: string;\r\n  data?: any;\r\n  timestamp: Date;\r\n  retryCount: number;\r\n  lastAttempt?: Date;\r\n}\r\n\r\n// Database class extending Dexie\r\nexport class ProjectDatabase extends Dexie {\r\n  projects!: Table<OfflineProject>;\r\n  syncQueue!: Table<SyncQueueItem>;\r\n  syncMetadata!: Table<{ key: string; value: any }>;\r\n\r\n  constructor() {\r\n    super('ProjectDatabase');\r\n    \r\n    this.version(1).stores({\r\n      projects: '_id, _offlineId, _syncStatus, status, type, createdBy, _lastSync',\r\n      syncQueue: '++id, type, entityType, entityId, timestamp, retryCount',\r\n      syncMetadata: 'key'\r\n    });\r\n\r\n    // Add indexes for better query performance\r\n    this.version(2).stores({\r\n      projects: '_id, _offlineId, _syncStatus, status, type, createdBy, _lastSync, name, client.name, tags'\r\n    });\r\n  }\r\n\r\n  // Helper method to get project by ID (online or offline)\r\n  async getProject(id: string): Promise<OfflineProject | undefined> {\r\n    return await this.projects.get(id);\r\n  }\r\n\r\n  // Helper method to get all projects\r\n  async getAllProjects(): Promise<OfflineProject[]> {\r\n    return await this.projects.toArray();\r\n  }\r\n\r\n  // Helper method to get projects by filter\r\n  async getProjectsByFilter(filter: {\r\n    status?: string;\r\n    type?: string;\r\n    client?: string;\r\n    search?: string;\r\n    createdBy?: string;\r\n  }): Promise<OfflineProject[]> {\r\n    let collection = this.projects.toCollection();\r\n\r\n    if (filter.status) {\r\n      collection = collection.filter(project => project.status === filter.status);\r\n    }\r\n\r\n    if (filter.type) {\r\n      collection = collection.filter(project => project.type === filter.type);\r\n    }\r\n\r\n    if (filter.client) {\r\n      collection = collection.filter(project => \r\n        project.client.name.toLowerCase().includes(filter.client!.toLowerCase()) ||\r\n        project.client.company?.toLowerCase().includes(filter.client!.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (filter.search) {\r\n      const searchLower = filter.search.toLowerCase();\r\n      collection = collection.filter(project =>\r\n        project.name.toLowerCase().includes(searchLower) ||\r\n        project.description.toLowerCase().includes(searchLower) ||\r\n        project.client.name.toLowerCase().includes(searchLower) ||\r\n        project.client.company?.toLowerCase().includes(searchLower) ||\r\n        project.tags.some(tag => tag.toLowerCase().includes(searchLower))\r\n      );\r\n    }\r\n\r\n    if (filter.createdBy) {\r\n      collection = collection.filter(project => project.createdBy === filter.createdBy);\r\n    }\r\n\r\n    return await collection.toArray();\r\n  }\r\n\r\n  // Helper method to get sync status\r\n  async getSyncStatus(): Promise<{\r\n    totalProjects: number;\r\n    syncedProjects: number;\r\n    pendingProjects: number;\r\n    failedProjects: number;\r\n    lastSync?: Date;\r\n  }> {\r\n    const projects = await this.projects.toArray();\r\n    const lastSync = await this.syncMetadata.get('lastSync');\r\n\r\n    return {\r\n      totalProjects: projects.length,\r\n      syncedProjects: projects.filter(p => p._syncStatus === 'synced').length,\r\n      pendingProjects: projects.filter(p => p._syncStatus === 'pending').length,\r\n      failedProjects: projects.filter(p => p._syncStatus === 'failed').length,\r\n      lastSync: lastSync?.value\r\n    };\r\n  }\r\n\r\n  // Helper method to get pending sync items\r\n  async getPendingSyncItems(): Promise<SyncQueueItem[]> {\r\n    return await this.syncQueue\r\n      .where('retryCount')\r\n      .below(3) // Max 3 retries\r\n      .toArray();\r\n  }\r\n\r\n  // Helper method to clear old sync metadata\r\n  async clearOldSyncData(): Promise<void> {\r\n    const thirtyDaysAgo = new Date();\r\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n    await this.projects\r\n      .where('_lastSync')\r\n      .below(thirtyDaysAgo)\r\n      .and(project => project._syncStatus === 'synced')\r\n      .delete();\r\n  }\r\n}\r\n\r\n// Create and export database instance\r\nexport const db = new ProjectDatabase();\r\n\r\n// Export types for use in other files\r\nexport type { OfflineProject, SyncQueueItem };\r\n","import { db, OfflineProject, SyncQueueItem } from '../db/indexedDB';\r\nimport { toast } from 'react-hot-toast';\r\n\r\n// Network status detection\r\nclass NetworkManager {\r\n  private isOnline = navigator.onLine;\r\n  private listeners: ((online: boolean) => void)[] = [];\r\n\r\n  constructor() {\r\n    window.addEventListener('online', () => this.updateStatus(true));\r\n    window.addEventListener('offline', () => this.updateStatus(false));\r\n  }\r\n\r\n  private updateStatus(online: boolean) {\r\n    this.isOnline = online;\r\n    this.listeners.forEach(listener => listener(online));\r\n    \r\n    if (online) {\r\n      toast.success('Back online! Syncing data...');\r\n      this.triggerSync();\r\n    } else {\r\n      toast.error('You\\'re offline. Changes will be saved locally.');\r\n    }\r\n  }\r\n\r\n  public getStatus(): boolean {\r\n    return this.isOnline;\r\n  }\r\n\r\n  public addListener(listener: (online: boolean) => void) {\r\n    this.listeners.push(listener);\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  private async triggerSync() {\r\n    try {\r\n      await ProjectSyncService.syncPendingChanges();\r\n    } catch (error) {\r\n      console.error('Auto-sync failed:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Project sync service\r\nexport class ProjectSyncService {\r\n  private static networkManager = new NetworkManager();\r\n  private static syncInProgress = false;\r\n  private static syncInterval: NodeJS.Timeout | null = null;\r\n\r\n  // Initialize sync service\r\n  static initialize() {\r\n    // Start periodic sync when online\r\n    this.networkManager.addListener((online) => {\r\n      if (online) {\r\n        this.startPeriodicSync();\r\n      } else {\r\n        this.stopPeriodicSync();\r\n      }\r\n    });\r\n\r\n    // Start periodic sync if already online\r\n    if (this.networkManager.getStatus()) {\r\n      this.startPeriodicSync();\r\n    }\r\n\r\n    // Initial sync\r\n    this.syncFromServer();\r\n  }\r\n\r\n  // Start periodic sync (every 30 seconds when online)\r\n  private static startPeriodicSync() {\r\n    if (this.syncInterval) return;\r\n    \r\n    this.syncInterval = setInterval(async () => {\r\n      if (this.networkManager.getStatus() && !this.syncInProgress) {\r\n        try {\r\n          await this.syncPendingChanges();\r\n        } catch (error) {\r\n          console.error('Periodic sync failed:', error);\r\n        }\r\n      }\r\n    }, 30000); // 30 seconds\r\n  }\r\n\r\n  // Stop periodic sync\r\n  private static stopPeriodicSync() {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval);\r\n      this.syncInterval = null;\r\n    }\r\n  }\r\n\r\n  // Get network status\r\n  static isOnline(): boolean {\r\n    return this.networkManager.getStatus();\r\n  }\r\n\r\n  // Add network status listener\r\n  static onNetworkChange(listener: (online: boolean) => void) {\r\n    return this.networkManager.addListener(listener);\r\n  }\r\n\r\n  // Sync projects from server to local database\r\n  static async syncFromServer(): Promise<void> {\r\n    if (!this.networkManager.getStatus()) {\r\n      console.log('Offline - skipping server sync');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/projects?limit=1000');\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const serverProjects = result.projects;\r\n\r\n        // Get local projects\r\n        const localProjects = await db.getAllProjects();\r\n        const localProjectMap = new Map(localProjects.map(p => [p._id, p]));\r\n\r\n        // Process server projects\r\n        for (const serverProject of serverProjects) {\r\n          const localProject = localProjectMap.get(serverProject._id);\r\n          \r\n          if (!localProject || this.isServerVersionNewer(serverProject, localProject)) {\r\n            // Update local project with server data\r\n            const offlineProject: OfflineProject = {\r\n              ...serverProject,\r\n              _syncStatus: 'synced',\r\n              _lastSync: new Date(),\r\n              _offlineChanges: localProject?._offlineChanges || []\r\n            };\r\n\r\n            await db.projects.put(offlineProject);\r\n          }\r\n        }\r\n\r\n        // Update sync metadata\r\n        await db.syncMetadata.put({\r\n          key: 'lastSync',\r\n          value: new Date()\r\n        });\r\n\r\n        console.log(`Synced ${serverProjects.length} projects from server`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to sync from server:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if server version is newer than local\r\n  private static isServerVersionNewer(serverProject: any, localProject: OfflineProject): boolean {\r\n    const serverUpdated = new Date(serverProject.updatedAt);\r\n    const localUpdated = new Date(localProject.updatedAt);\r\n    return serverUpdated > localUpdated;\r\n  }\r\n\r\n  // Sync pending changes to server\r\n  static async syncPendingChanges(): Promise<void> {\r\n    if (!this.networkManager.getStatus()) {\r\n      console.log('Offline - skipping sync to server');\r\n      return;\r\n    }\r\n\r\n    if (this.syncInProgress) {\r\n      console.log('Sync already in progress');\r\n      return;\r\n    }\r\n\r\n    this.syncInProgress = true;\r\n\r\n    try {\r\n      const pendingItems = await db.getPendingSyncItems();\r\n      \r\n      if (pendingItems.length === 0) {\r\n        console.log('No pending sync items');\r\n        return;\r\n      }\r\n\r\n      console.log(`Syncing ${pendingItems.length} pending changes`);\r\n\r\n      for (const item of pendingItems) {\r\n        try {\r\n          await this.processSyncItem(item);\r\n          \r\n          // Remove from sync queue on success\r\n          await db.syncQueue.delete(item.id!);\r\n          \r\n        } catch (error) {\r\n          console.error(`Failed to sync item ${item.id}:`, error);\r\n          \r\n          // Increment retry count\r\n          await db.syncQueue.update(item.id!, {\r\n            retryCount: item.retryCount + 1,\r\n            lastAttempt: new Date()\r\n          });\r\n        }\r\n      }\r\n\r\n      // Update project sync statuses\r\n      await this.updateProjectSyncStatuses();\r\n\r\n    } finally {\r\n      this.syncInProgress = false;\r\n    }\r\n  }\r\n\r\n  // Process individual sync item\r\n  private static async processSyncItem(item: SyncQueueItem): Promise<void> {\r\n    switch (item.type) {\r\n      case 'create':\r\n        await this.createProjectOnServer(item);\r\n        break;\r\n      case 'update':\r\n        await this.updateProjectOnServer(item);\r\n        break;\r\n      case 'delete':\r\n        await this.deleteProjectOnServer(item);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Create project on server\r\n  private static async createProjectOnServer(item: SyncQueueItem): Promise<void> {\r\n    const response = await fetch('/api/projects', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(item.data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to create project: ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    \r\n    // Update local project with server ID\r\n    await db.projects.update(item.entityId, {\r\n      _id: result.project._id,\r\n      _syncStatus: 'synced',\r\n      _lastSync: new Date()\r\n    });\r\n  }\r\n\r\n  // Update project on server\r\n  private static async updateProjectOnServer(item: SyncQueueItem): Promise<void> {\r\n    const response = await fetch(`/api/projects/${item.entityId}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(item.data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update project: ${response.statusText}`);\r\n    }\r\n\r\n    // Update local project sync status\r\n    await db.projects.update(item.entityId, {\r\n      _syncStatus: 'synced',\r\n      _lastSync: new Date()\r\n    });\r\n  }\r\n\r\n  // Delete project on server\r\n  private static async deleteProjectOnServer(item: SyncQueueItem): Promise<void> {\r\n    const response = await fetch(`/api/projects/${item.entityId}`, {\r\n      method: 'DELETE'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to delete project: ${response.statusText}`);\r\n    }\r\n\r\n    // Remove from local database\r\n    await db.projects.delete(item.entityId);\r\n  }\r\n\r\n  // Update project sync statuses\r\n  private static async updateProjectSyncStatuses(): Promise<void> {\r\n    const projects = await db.getAllProjects();\r\n    \r\n    for (const project of projects) {\r\n      if (project._syncStatus === 'pending') {\r\n        // Check if project has pending changes in sync queue\r\n        const pendingItems = await db.syncQueue\r\n          .where('entityId')\r\n          .equals(project._id)\r\n          .toArray();\r\n\r\n        if (pendingItems.length === 0) {\r\n          // No pending changes, mark as synced\r\n          await db.projects.update(project._id, {\r\n            _syncStatus: 'synced',\r\n            _lastSync: new Date()\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create project (offline-first)\r\n  static async createProject(projectData: Omit<IProject, '_id' | 'createdAt' | 'updatedAt'>): Promise<OfflineProject> {\r\n    const offlineId = `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const offlineProject: OfflineProject = {\r\n      ...projectData,\r\n      _id: offlineId,\r\n      _offlineId: offlineId,\r\n      _syncStatus: 'pending',\r\n      _lastSync: new Date(),\r\n      _offlineChanges: [{\r\n        type: 'create',\r\n        timestamp: new Date(),\r\n        data: projectData\r\n      }]\r\n    } as OfflineProject;\r\n\r\n    // Save to local database\r\n    await db.projects.add(offlineProject);\r\n\r\n    // Add to sync queue\r\n    await db.syncQueue.add({\r\n      type: 'create',\r\n      entityType: 'project',\r\n      entityId: offlineId,\r\n      data: projectData,\r\n      timestamp: new Date(),\r\n      retryCount: 0\r\n    });\r\n\r\n    // Try to sync immediately if online\r\n    if (this.networkManager.getStatus()) {\r\n      this.syncPendingChanges().catch(console.error);\r\n    }\r\n\r\n    return offlineProject;\r\n  }\r\n\r\n  // Update project (offline-first)\r\n  static async updateProject(id: string, updateData: Partial<IProject>): Promise<OfflineProject> {\r\n    const project = await db.projects.get(id);\r\n    if (!project) {\r\n      throw new Error('Project not found');\r\n    }\r\n\r\n    // Update local project\r\n    const updatedProject: OfflineProject = {\r\n      ...project,\r\n      ...updateData,\r\n      _syncStatus: 'pending',\r\n      _lastSync: new Date(),\r\n      _offlineChanges: [\r\n        ...(project._offlineChanges || []),\r\n        {\r\n          type: 'update',\r\n          timestamp: new Date(),\r\n          data: updateData\r\n        }\r\n      ]\r\n    };\r\n\r\n    await db.projects.put(updatedProject);\r\n\r\n    // Add to sync queue\r\n    await db.syncQueue.add({\r\n      type: 'update',\r\n      entityType: 'project',\r\n      entityId: id,\r\n      data: updateData,\r\n      timestamp: new Date(),\r\n      retryCount: 0\r\n    });\r\n\r\n    // Try to sync immediately if online\r\n    if (this.networkManager.getStatus()) {\r\n      this.syncPendingChanges().catch(console.error);\r\n    }\r\n\r\n    return updatedProject;\r\n  }\r\n\r\n  // Delete project (offline-first)\r\n  static async deleteProject(id: string): Promise<void> {\r\n    const project = await db.projects.get(id);\r\n    if (!project) {\r\n      throw new Error('Project not found');\r\n    }\r\n\r\n    // Mark as deleted locally\r\n    await db.projects.update(id, {\r\n      _syncStatus: 'pending',\r\n      _lastSync: new Date(),\r\n      _offlineChanges: [\r\n        ...(project._offlineChanges || []),\r\n        {\r\n          type: 'delete',\r\n          timestamp: new Date()\r\n        }\r\n      ]\r\n    });\r\n\r\n    // Add to sync queue\r\n    await db.syncQueue.add({\r\n      type: 'delete',\r\n      entityType: 'project',\r\n      entityId: id,\r\n      timestamp: new Date(),\r\n      retryCount: 0\r\n    });\r\n\r\n    // Try to sync immediately if online\r\n    if (this.networkManager.getStatus()) {\r\n      this.syncPendingChanges().catch(console.error);\r\n    }\r\n  }\r\n\r\n  // Get sync status\r\n  static async getSyncStatus() {\r\n    return await db.getSyncStatus();\r\n  }\r\n\r\n  // Force sync\r\n  static async forceSync(): Promise<void> {\r\n    if (!this.networkManager.getStatus()) {\r\n      throw new Error('Cannot sync while offline');\r\n    }\r\n\r\n    await this.syncFromServer();\r\n    await this.syncPendingChanges();\r\n  }\r\n\r\n  // Clear old data\r\n  static async clearOldData(): Promise<void> {\r\n    await db.clearOldSyncData();\r\n  }\r\n}\r\n\r\n// Export network manager for use in components\r\nexport const networkManager = ProjectSyncService.networkManager;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\nimport { ProjectSyncService, networkManager } from '../lib/sync/projectSync';\r\nimport { db, OfflineProject } from '../lib/db/indexedDB';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nexport interface UseOfflineProjectsReturn {\r\n  // State\r\n  projects: OfflineProject[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  isOnline: boolean;\r\n  syncStatus: {\r\n    totalProjects: number;\r\n    syncedProjects: number;\r\n    pendingProjects: number;\r\n    failedProjects: number;\r\n    lastSync?: Date;\r\n  } | null;\r\n  \r\n  // Actions\r\n  createProject: (projectData: any) => Promise<OfflineProject>;\r\n  updateProject: (id: string, updateData: any) => Promise<OfflineProject>;\r\n  deleteProject: (id: string) => Promise<void>;\r\n  refreshProjects: () => Promise<void>;\r\n  forceSync: () => Promise<void>;\r\n  \r\n  // Utilities\r\n  getProject: (id: string) => OfflineProject | undefined;\r\n  getProjectsByFilter: (filter: any) => Promise<OfflineProject[]>;\r\n  clearOldData: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * React hook for offline-first project management\r\n * @returns Object with project management utilities and state\r\n */\r\nexport function useOfflineProjects(): UseOfflineProjectsReturn {\r\n  const { data: session } = useSession();\r\n  const [projects, setProjects] = useState<OfflineProject[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isOnline, setIsOnline] = useState(networkManager.getStatus());\r\n  const [syncStatus, setSyncStatus] = useState<UseOfflineProjectsReturn['syncStatus']>(null);\r\n\r\n  // Initialize sync service and load projects\r\n  useEffect(() => {\r\n    if (session?.user) {\r\n      initializeOfflineProjects();\r\n    }\r\n  }, [session?.user]);\r\n\r\n  // Network status listener\r\n  useEffect(() => {\r\n    const unsubscribe = ProjectSyncService.onNetworkChange((online) => {\r\n      setIsOnline(online);\r\n      if (online) {\r\n        // Refresh sync status when coming back online\r\n        refreshSyncStatus();\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Initialize offline projects\r\n  const initializeOfflineProjects = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Initialize sync service\r\n      ProjectSyncService.initialize();\r\n\r\n      // Load projects from local database\r\n      await loadLocalProjects();\r\n\r\n      // Get initial sync status\r\n      await refreshSyncStatus();\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to initialize offline projects';\r\n      setError(errorMessage);\r\n      console.error('Failed to initialize offline projects:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load projects from local database\r\n  const loadLocalProjects = async () => {\r\n    try {\r\n      const localProjects = await db.getAllProjects();\r\n      setProjects(localProjects);\r\n    } catch (err) {\r\n      console.error('Failed to load local projects:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Refresh sync status\r\n  const refreshSyncStatus = async () => {\r\n    try {\r\n      const status = await ProjectSyncService.getSyncStatus();\r\n      setSyncStatus(status);\r\n    } catch (err) {\r\n      console.error('Failed to refresh sync status:', err);\r\n    }\r\n  };\r\n\r\n  // Create project (offline-first)\r\n  const createProject = useCallback(async (projectData: any): Promise<OfflineProject> => {\r\n    try {\r\n      setError(null);\r\n\r\n      // Create project locally first\r\n      const offlineProject = await ProjectSyncService.createProject(projectData);\r\n\r\n      // Update local state\r\n      setProjects(prev => [offlineProject, ...prev]);\r\n\r\n      // Show success message\r\n      if (isOnline) {\r\n        toast.success('Project created and synced to server');\r\n      } else {\r\n        toast.success('Project created offline. Will sync when online.');\r\n      }\r\n\r\n      // Refresh sync status\r\n      await refreshSyncStatus();\r\n\r\n      return offlineProject;\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create project';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    }\r\n  }, [isOnline]);\r\n\r\n  // Update project (offline-first)\r\n  const updateProject = useCallback(async (id: string, updateData: any): Promise<OfflineProject> => {\r\n    try {\r\n      setError(null);\r\n\r\n      // Update project locally first\r\n      const updatedProject = await ProjectSyncService.updateProject(id, updateData);\r\n\r\n      // Update local state\r\n      setProjects(prev => \r\n        prev.map(p => p._id === id ? updatedProject : p)\r\n      );\r\n\r\n      // Show success message\r\n      if (isOnline) {\r\n        toast.success('Project updated and synced to server');\r\n      } else {\r\n        toast.success('Project updated offline. Will sync when online.');\r\n      }\r\n\r\n      // Refresh sync status\r\n      await refreshSyncStatus();\r\n\r\n      return updatedProject;\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update project';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    }\r\n  }, [isOnline]);\r\n\r\n  // Delete project (offline-first)\r\n  const deleteProject = useCallback(async (id: string): Promise<void> => {\r\n    try {\r\n      setError(null);\r\n\r\n      // Delete project locally first\r\n      await ProjectSyncService.deleteProject(id);\r\n\r\n      // Update local state\r\n      setProjects(prev => prev.filter(p => p._id !== id));\r\n\r\n      // Show success message\r\n      if (isOnline) {\r\n        toast.success('Project deleted and synced to server');\r\n      } else {\r\n        toast.success('Project deleted offline. Will sync when online.');\r\n      }\r\n\r\n      // Refresh sync status\r\n      await refreshSyncStatus();\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete project';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    }\r\n  }, [isOnline]);\r\n\r\n  // Refresh projects from local database\r\n  const refreshProjects = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      await loadLocalProjects();\r\n      await refreshSyncStatus();\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to refresh projects';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Force sync with server\r\n  const forceSync = useCallback(async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      if (!isOnline) {\r\n        throw new Error('Cannot sync while offline');\r\n      }\r\n\r\n      toast.loading('Syncing with server...');\r\n\r\n      await ProjectSyncService.forceSync();\r\n      await loadLocalProjects();\r\n      await refreshSyncStatus();\r\n\r\n      toast.dismiss();\r\n      toast.success('Sync completed successfully');\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to sync with server';\r\n      setError(errorMessage);\r\n      toast.dismiss();\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isOnline]);\r\n\r\n  // Get project by ID\r\n  const getProject = useCallback((id: string): OfflineProject | undefined => {\r\n    return projects.find(p => p._id === id);\r\n  }, [projects]);\r\n\r\n  // Get projects by filter\r\n  const getProjectsByFilter = useCallback(async (filter: any): Promise<OfflineProject[]> => {\r\n    try {\r\n      return await db.getProjectsByFilter(filter);\r\n    } catch (err) {\r\n      console.error('Failed to filter projects:', err);\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  // Clear old data\r\n  const clearOldData = useCallback(async () => {\r\n    try {\r\n      await ProjectSyncService.clearOldData();\r\n      await loadLocalProjects();\r\n      await refreshSyncStatus();\r\n      toast.success('Old data cleared successfully');\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to clear old data';\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    projects,\r\n    loading,\r\n    error,\r\n    isOnline,\r\n    syncStatus,\r\n    \r\n    // Actions\r\n    createProject,\r\n    updateProject,\r\n    deleteProject,\r\n    refreshProjects,\r\n    forceSync,\r\n    \r\n    // Utilities\r\n    getProject,\r\n    getProjectsByFilter,\r\n    clearOldData,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for getting a single project by ID\r\n */\r\nexport function useOfflineProject(id: string) {\r\n  const { projects, loading, error, isOnline, updateProject, deleteProject } = useOfflineProjects();\r\n  const project = projects.find(p => p._id === id);\r\n\r\n  return {\r\n    project,\r\n    loading,\r\n    error,\r\n    isOnline,\r\n    updateProject: (data: any) => updateProject(id, data),\r\n    deleteProject: () => deleteProject(id),\r\n    isOffline: !isOnline,\r\n    syncStatus: project?._syncStatus,\r\n    lastSync: project?._lastSync,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for getting projects with specific filters\r\n */\r\nexport function useFilteredOfflineProjects(filter: any) {\r\n  const { projects, loading, error, isOnline, refreshProjects } = useOfflineProjects();\r\n  const [filteredProjects, setFilteredProjects] = useState<OfflineProject[]>([]);\r\n\r\n  useEffect(() => {\r\n    const applyFilter = async () => {\r\n      try {\r\n        const filtered = await db.getProjectsByFilter(filter);\r\n        setFilteredProjects(filtered);\r\n      } catch (err) {\r\n        console.error('Failed to apply filter:', err);\r\n      }\r\n    };\r\n\r\n    if (projects.length > 0) {\r\n      applyFilter();\r\n    }\r\n  }, [projects, filter]);\r\n\r\n  return {\r\n    projects: filteredProjects,\r\n    loading,\r\n    error,\r\n    isOnline,\r\n    refreshProjects,\r\n    totalCount: projects.length,\r\n    filteredCount: filteredProjects.length,\r\n  };\r\n}\r\n","'use client';\n\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\n\nexport interface RoleAccess {\n  isAuthenticated: boolean;\n  userRole: string | null;\n  userTier: string | null;\n  isCEO: boolean;\n  isAdmin: boolean;\n  isPremium: boolean;\n  isEnterprise: boolean;\n  canAccessFeature: (feature: string) => boolean;\n}\n\nexport function useRole(): RoleAccess {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n\n  const isAuthenticated = status === 'authenticated';\n  const userRole = session?.user?.role || null;\n  const userTier = session?.user?.tier || null;\n  \n  const isCEO = userRole === 'ceo';\n  const isAdmin = userRole === 'admin' || userRole === 'ceo';\n  const isPremium = userTier === 'premium' || userTier === 'enterprise';\n  const isEnterprise = userTier === 'enterprise';\n\n  const canAccessFeature = (feature: string): boolean => {\n    if (!isAuthenticated) return false;\n    \n    switch (feature) {\n      case 'project-hub':\n        return true; // All authenticated users\n      case 'bim-viewer':\n        return isPremium;\n      case '360-tours':\n        return isPremium;\n      case 'vr-ar':\n        return isEnterprise;\n      case 'geospatial':\n        return isEnterprise;\n      case 'ceo-dashboard':\n        return isCEO;\n      case 'admin-panel':\n        return isAdmin;\n      default:\n        return false;\n    }\n  };\n\n  return {\n    isAuthenticated,\n    userRole,\n    userTier,\n    isCEO,\n    isAdmin,\n    isPremium,\n    isEnterprise,\n    canAccessFeature,\n  };\n}\n\n// HOC for role-based component protection\nexport function withRole<T extends object>(\n  Component: React.ComponentType<T>,\n  requiredRole?: string,\n  requiredTier?: string\n) {\n  return function RoleProtectedComponent(props: T) {\n    const { isAuthenticated, userRole, userTier, canAccessFeature } = useRole();\n    \n    if (!isAuthenticated) {\n      return <div>Please log in to access this feature.</div>;\n    }\n    \n    if (requiredRole && userRole !== requiredRole) {\n      return <div>Access denied. Required role: {requiredRole}</div>;\n    }\n    \n    if (requiredTier && userTier !== requiredTier) {\n      return <div>Access denied. Required tier: {requiredTier}</div>;\n    }\n    \n    return <Component {...props} />;\n  };\n}\n\n// Hook for access control in components\nexport function useAccessControl() {\n  const { isAuthenticated, userRole, userTier, isAdmin, isCEO } = useRole();\n  \n  return {\n    isAuthenticated,\n    userRole,\n    userTier,\n    canAccessAdmin: isAdmin || isCEO,\n    canManageUsers: isAdmin || isCEO,\n    canViewAnalytics: isAdmin || isCEO || userTier === 'premium' || userTier === 'enterprise',\n    hasRole: (role: string) => userRole === role,\n    hasTier: (tier: string) => userTier === tier,\n    hasMinimumRole: (minRole: string) => {\n      const roleHierarchy = ['user', 'admin', 'ceo'];\n      const userRoleIndex = roleHierarchy.indexOf(userRole || 'user');\n      const minRoleIndex = roleHierarchy.indexOf(minRole);\n      return userRoleIndex >= minRoleIndex;\n    },\n  };\n}\n\n// Hook for feature flags\nexport function useFeatureFlags() {\n  const { userRole, userTier } = useRole();\n  \n  return {\n    features: {\n      demoMode: userRole === 'ceo' || userRole === 'admin',\n      advancedAnalytics: userTier === 'premium' || userTier === 'enterprise',\n      offlineSync: true,\n      realTimeCollaboration: userTier === 'enterprise',\n      aiInsights: userTier === 'enterprise',\n      customBranding: userTier === 'enterprise',\n    },\n    isFeatureEnabled: (feature: string) => {\n      const features = {\n        demoMode: userRole === 'ceo' || userRole === 'admin',\n        advancedAnalytics: userTier === 'premium' || userTier === 'enterprise',\n        offlineSync: true,\n        realTimeCollaboration: userTier === 'enterprise',\n        aiInsights: userTier === 'enterprise',\n        customBranding: userTier === 'enterprise',\n      };\n      return features[feature as keyof typeof features] || false;\n    },\n  };\n}\n"],"names":["ProjectDatabase","Dexie","getProject","id","projects","get","getAllProjects","toArray","getProjectsByFilter","filter","collection","toCollection","status","project","type","client","name","toLowerCase","includes","company","search","searchLower","description","tags","some","tag","createdBy","getSyncStatus","lastSync","syncMetadata","totalProjects","length","syncedProjects","p","_syncStatus","pendingProjects","failedProjects","value","getPendingSyncItems","syncQueue","where","below","clearOldSyncData","thirtyDaysAgo","Date","setDate","getDate","and","delete","constructor","version","stores","db","NetworkManager","updateStatus","online","isOnline","listeners","forEach","listener","toast","success","triggerSync","error","getStatus","addListener","push","index","indexOf","splice","ProjectSyncService","syncPendingChanges","console","navigator","onLine","window","addEventListener","initialize","networkManager","startPeriodicSync","stopPeriodicSync","syncFromServer","syncInterval","setInterval","syncInProgress","clearInterval","onNetworkChange","log","response","fetch","ok","serverProjects","result","json","localProjects","localProjectMap","Map","map","_id","serverProject","localProject","isServerVersionNewer","offlineProject","_lastSync","_offlineChanges","put","key","concat","serverUpdated","updatedAt","pendingItems","item","processSyncItem","update","retryCount","lastAttempt","updateProjectSyncStatuses","createProjectOnServer","updateProjectOnServer","deleteProjectOnServer","method","headers","body","JSON","stringify","data","statusText","entityId","equals","createProject","projectData","offlineId","Math","now","random","toString","substr","_offlineId","timestamp","add","entityType","catch","updateProject","updateData","updatedProject","deleteProject","forceSync","clearOldData","useOfflineProjects","session","useSession","setProjects","useState","loading","setLoading","setError","setIsOnline","syncStatus","setSyncStatus","useEffect","user","initializeOfflineProjects","refreshSyncStatus","loadLocalProjects","err","Error","message","useCallback","prev","errorMessage","refreshProjects","dismiss","find","useRole","useRouter","isAuthenticated","userRole","role","userTier","tier","isCEO","isAdmin","isPremium","isEnterprise","canAccessFeature","feature"],"sourceRoot":""}