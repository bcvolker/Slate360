{"version":3,"file":"static/chunks/342-cf917e5a6f22b3f3.js","mappings":"6FAEA,IAAAA,EAAAC,OAAAC,SAAA,CAAAC,cAAA,CACAC,EAAAH,OAAAC,SAAA,CAAAG,QAAA,CACAC,EAAAL,OAAAK,cAAA,CACAC,EAAAN,OAAAO,wBAAA,CAEAC,EAAA,SAAAC,CAAA,QACA,mBAAAC,MAAAF,OAAA,CACAE,MAAAF,OAAA,CAAAC,GAGAN,mBAAAA,EAAAQ,IAAA,CAAAF,EACA,EAEAG,EAAA,SAAAC,CAAA,EACA,IAAAA,GAAAV,oBAAAA,EAAAQ,IAAA,CAAAE,GACA,SAGA,IASAC,EATAC,EAAAhB,EAAAY,IAAA,CAAAE,EAAA,eACAG,EAAAH,EAAAI,WAAA,EAAAJ,EAAAI,WAAA,CAAAhB,SAAA,EAAAF,EAAAY,IAAA,CAAAE,EAAAI,WAAA,CAAAhB,SAAA,kBAEA,GAAAY,EAAAI,WAAA,GAAAF,GAAA,CAAAC,EACA,SAMA,IAAAF,KAAAD,GAEA,gBAAAC,GAAAf,EAAAY,IAAA,CAAAE,EAAAC,EACA,EAGAI,EAAA,SAAAC,CAAA,CAAAC,CAAA,EACAf,GAAAe,cAAAA,EAAAC,IAAA,CACAhB,EAAAc,EAAAC,EAAAC,IAAA,EACAC,WAAA,GACAC,aAAA,GACAC,MAAAJ,EAAAK,QAAA,CACAC,SAAA,EACA,GAEAP,CAAA,CAAAC,EAAAC,IAAA,EAAAD,EAAAK,QAAA,EAKAE,EAAA,SAAAd,CAAA,CAAAQ,CAAA,EACA,GAAAA,cAAAA,EAAA,CACA,IAAAtB,EAAAY,IAAA,CAAAE,EAAAQ,GACA,OACI,GAAAf,EAGJ,OAAAA,EAAAO,EAAAQ,GAAAG,KAAA,CAIA,OAAAX,CAAA,CAAAQ,EAAA,CAGAO,CAAAA,EAAAC,OAAA,UAAAC,IAEA,IADAV,EAAAC,EAAAU,EAAAC,EAAAC,EAAAC,EACAf,EAAAgB,SAAA,IACAC,EAAA,EACAC,EAAAF,UAAAE,MAAA,CACAC,EAAA,GAaA,IAVA,kBAAAnB,IACAmB,EAAAnB,EACAA,EAAAgB,SAAA,QAEAC,EAAA,GAEAjB,CAAAA,MAAAA,GAAA,iBAAAA,GAAA,mBAAAA,CAAA,GACAA,CAAAA,EAAA,IAGQiB,EAAAC,EAAY,EAAAD,EAGpB,GAFAhB,EAAAe,SAAA,CAAAC,EAAA,CAEAhB,MAAAA,EAEA,IAAAC,KAAAD,EACAW,EAAAJ,EAAAR,EAAAE,GAIAF,IAHAa,CAAAA,EAAAL,EAAAP,EAAAC,EAAA,IAKAiB,GAAAN,GAAApB,CAAAA,EAAAoB,IAAAC,CAAAA,EAAAzB,EAAAwB,EAAA,IACAC,GACAA,EAAA,GACAC,EAAAH,GAAAvB,EAAAuB,GAAAA,EAAA,IAEAG,EAAAH,GAAAnB,EAAAmB,GAAAA,EAAA,GAIAb,EAAAC,EAAA,CAA4BE,KAAAA,EAAAI,SAAAK,EAAAQ,EAAAJ,EAAAF,EAAA,IAGrB,SAAAA,GACPd,EAAAC,EAAA,CAA4BE,KAAAA,EAAAI,SAAAO,CAAA,IAQ5B,OAAAb,CACA,oBClHA,IAAAoB,EAAA,kCAEAC,EAAA,MACAC,EAAA,OAGAC,EAAA,yCACAC,EAAA,QACAC,EAAA,uDACAC,EAAA,UAGAC,EAAA,aAoPA,SAAAC,EAAAC,CAAA,EACA,OAAAA,EAAAA,EAAAC,OAAA,CAAAH,EA/OA,MAgPA,CAnOAlB,EAAAC,OAAA,UAAAqB,CAAA,CAAA9B,CAAA,EACA,oBAAA8B,EACA,mDAGA,IAAAA,EAAA,SAEA9B,EAAAA,GAAA,GAKA,IAAA+B,EAAA,EACAC,EAAA,EAOA,SAAAC,EAAAL,CAAA,EACA,IAAAM,EAAAN,EAAAO,KAAA,CAAAf,GACAc,GAAAH,CAAAA,GAAAG,EAAAjB,MAAA,EACA,IAAAD,EAAAY,EAAAQ,WAAA,CAvCA,MAwCAJ,EAAA,CAAAhB,EAAAY,EAAAX,MAAA,CAAAD,EAAAgB,EAAAJ,EAAAX,MAAA,CAQA,SAAAoB,IACA,IAAAC,EAAA,CAAkBC,KAAAR,EAAAC,OAAAA,CAAA,EAClB,gBAAAQ,CAAA,EAGA,OAFAA,EAAAH,QAAA,KAAAI,EAAAH,GAqEAH,EAAAd,GAnEAmB,CACA,CACA,CAUA,SAAAC,EAAAH,CAAA,EACA,KAAAA,KAAA,CAAAA,EACA,KAAAI,GAAA,EAAiBH,KAAAR,EAAAC,OAAAA,CAAA,EACjB,KAAAW,MAAA,CAAA3C,EAAA2C,MAAA,CAMAF,EAAA5D,SAAA,CAAA+D,OAAA,CAAAd,EAEA,IAAAe,EAAA,GAQA,SAAAC,EAAAC,CAAA,EACA,IAAAC,EAAA,MACAhD,EAAA2C,MAAA,KAAAZ,EAAA,IAAAC,EAAA,KAAAe,GAQA,GANAC,EAAAC,MAAA,CAAAF,EACAC,EAAAE,QAAA,CAAAlD,EAAA2C,MAAA,CACAK,EAAAT,IAAA,CAAAR,EACAiB,EAAAhB,MAAA,CAAAA,EACAgB,EAAAL,MAAA,CAAAb,EAEA9B,EAAAmD,MAAA,CACAN,EAAAO,IAAA,CAAAJ,QAEA,MAAAA,CAEA,CAQA,SAAAb,EAAAkB,CAAA,EACA,IAAAC,EAAAD,EAAAE,IAAA,CAAAzB,GACA,GAAAwB,GACA,IAAA1B,EAAA0B,CAAA,IAGA,OAFArB,EAAAL,GACAE,EAAAA,EAAA0B,KAAA,CAAA5B,EAAAX,MAAA,EACAqC,EACA,CAeA,SAAAG,EAAAC,CAAA,EACA,IAAAC,EAEA,IADAD,EAAAA,GAAA,GACAC,EAAAC,KACA,KAAAD,GACAD,EAAAN,IAAA,CAAAO,GAGA,OAAAD,CACA,CAQA,SAAAE,IACA,IAAAC,EAAAxB,IACA,GAAAyB,KAAAhC,EAAAiC,MAAA,KAAAC,KAAAlC,EAAAiC,MAAA,KAGA,IADA,IAAA/C,EAAA,EAEAiD,IAAAnC,EAAAiC,MAAA,CAAA/C,IACAgD,CAAAA,KAAAlC,EAAAiC,MAAA,CAAA/C,IAAA8C,KAAAhC,EAAAiC,MAAA,CAAA/C,EAAA,KAEA,EAAAA,EAIA,GAFAA,GAAA,EAEAiD,KAAAnC,EAAAiC,MAAA,CAAA/C,EAAA,GACA,OAAA8B,EAAA,0BAGA,IAAAlB,EAAAE,EAAA0B,KAAA,GAAAxC,EAAA,GAMA,OALAgB,GAAA,EACAC,EAAAL,GACAE,EAAAA,EAAA0B,KAAA,CAAAxC,GACAgB,GAAA,EAEA6B,EAAA,CACAK,KApKA,UAqKAN,QAAAhC,CACA,GACA,CA2DA,OAhHAO,EAAAd,GAgHA8C,WAjBA,IAKAC,EALAC,EAAA,GAMA,IAJAZ,EAAAY,GAIAD,EAAAE,WAvCA,IAAAT,EAAAxB,IAGAkC,EAAApC,EAAAb,GACA,GAAAiD,GAIA,GAHAX,IAGA,CAAAzB,EAAAZ,GAAA,OAAAuB,EAAA,wBAGA,IAAA0B,EAAArC,EAAAX,GAEAiD,EAAAZ,EAAA,CACAK,KA7LA,cA8LAQ,SAAA/C,EAAA4C,CAAA,IAAA1C,OAAA,CAAAV,EAlMA,KAmMAf,MAAAoE,EACA7C,EAAA6C,CAAA,IAAA3C,OAAA,CAAAV,EApMA,OAsMA,GAKA,OAFAgB,EAAAV,GAEAgD,EACA,KAeA,KAAAL,IACAC,EAAAjB,IAAA,CAAAgB,GACAX,EAAAY,IAIA,OAAAA,CACA,GAIA,oECpPA,IAAAM,EAAiB,GAAAC,QAAAC,CAAA,EAAgB,YACjC,SAAaC,EAAA,4BAAApF,IAAA,UAA+C,CAC5D,qECFA,IAAAqF,EAAoB,GAAAH,QAAAC,CAAA,EAAgB,eACpC,WAAeG,GAAA,KAAAC,GAAA,KAAAC,EAAA,KAAAxF,IAAA,UAA4C,CAC3D,SAAayF,GAAA,KAAAC,GAAA,KAAAC,GAAA,IAAAC,GAAA,KAAA5F,IAAA,UAAsD,CACnE,SAAayF,GAAA,KAAAC,GAAA,QAAAC,GAAA,KAAAC,GAAA,KAAA5F,IAAA,UAA0D,CACvE,qECJA,IAAA6F,EAAuB,GAAAX,QAAAC,CAAA,EAAgB,kBACvC,SAAaC,EAAA,aAAApF,IAAA,UAAgC,CAC7C,SAAaoF,EAAA,aAAApF,IAAA,UAAgC,CAC7C,qECHA,IAAA8F,EAAqB,GAAAZ,QAAAC,CAAA,EAAgB,gBACrC,SAAaC,EAAA,aAAApF,IAAA,UAAgC,CAC7C,SAAaoF,EAAA,aAAApF,IAAA,UAAgC,CAC7C,qECHA,IAAA+F,EAAkB,GAAAb,QAAAC,CAAA,EAAgB,aAClC,SAAaC,EAAA,aAAApF,IAAA,UAAgC,CAC7C,SAAaoF,EAAA,WAAApF,IAAA,UAA8B,CAC3C,SAAaoF,EAAA,WAAApF,IAAA,UAA8B,CAC3C,SAAaoF,EAAA,WAAApF,IAAA,UAA8B,CAC3C,qECLA,IAAAgG,EAAiB,GAAAd,QAAAC,CAAA,EAAgB,YACjC,SAAaC,EAAA,2CAAApF,IAAA,UAA8D,CAC3E,SAAaoF,EAAA,6CAAApF,IAAA,UAAgE,CAC7E,qECHA,IAAAiG,EAAoB,GAAAf,QAAAC,CAAA,EAAgB,eACpC,SAAaC,EAAA,qCAAApF,IAAA,UAAwD,CACrE,SAAaoF,EAAA,iBAAApF,IAAA,UAAoC,CACjD,qECHA,IAAAkG,EAAoB,GAAAhB,QAAAC,CAAA,EAAgB,eACpC,SAAaC,EAAA,eAAApF,IAAA,UAAkC,CAC/C,qECFA,IAAAmG,EAAqB,GAAAjB,QAAAC,CAAA,EAAgB,gBACrC,SAAaC,EAAA,gBAAApF,IAAA,UAAmC,CAChD,qECFA,IAAAoG,EAAkB,GAAAlB,QAAAC,CAAA,EAAgB,aAClC,SAAaC,EAAA,iBAAApF,IAAA,UAAoC,CACjD,qECFA,IAAAqG,EAAiB,GAAAnB,QAAAC,CAAA,EAAgB,YACjC,YAAgBG,GAAA,KAAAC,GAAA,IAAAe,GAAA,IAAAC,GAAA,IAAAvG,IAAA,UAAoD,CACpE,SAAaoF,EAAA,4BAAApF,IAAA,UAA+C,CAC5D,SAAaoF,EAAA,wBAAApF,IAAA,UAA2C,CACxD,qECJA,IAAAwG,EAAmB,GAAAtB,QAAAC,CAAA,EAAgB,cACnC,SAAaM,GAAA,KAAAC,GAAA,KAAAC,GAAA,IAAAC,GAAA,KAAA5F,IAAA,UAAsD,CACnE,CACA,OACA,CAAMoF,EAAA,oDAAApF,IAAA,UACN,CACA,qECNA,IAAAyG,EAAY,GAAAvB,QAAAC,CAAA,EAAgB,OAC5B,CACA,OACA,CAAMC,EAAA,+CAAApF,IAAA,UACN,CACA,WAAesF,GAAA,KAAAC,GAAA,KAAAC,EAAA,IAAAxF,IAAA,UAA2C,CAC1D,qECNA,IAAA0G,EAAmB,GAAAxB,QAAAC,CAAA,EAAgB,cACnC,WAAeG,GAAA,KAAAC,GAAA,KAAAC,EAAA,KAAAxF,IAAA,UAA4C,CAC3D,SAAaoF,EAAA,uCAAApF,IAAA,UAA0D,CACvE,SAAaoF,EAAA,aAAApF,IAAA,UAAgC,CAC7C,qECJA,IAAA2G,EAAkB,GAAAzB,QAAAC,CAAA,EAAgB,aAClC,CACA,OACA,CACAC,EAAA,6DACApF,IAAA,QACA,EACA,CACA,CACA,OACA,CAAMoF,EAAA,gDAAApF,IAAA,UACN,CACA,qECZA,IAAA4G,EAAa,GAAA1B,QAAAC,CAAA,EAAgB,QAC7B,YAAgB0B,OAAA,qBAAA7G,IAAA,UAA6C,CAC7D,qECFA,IAAA8G,EAAkB,GAAA5B,QAAAC,CAAA,EAAgB,aAClC,CACA,OACA,CAAMC,EAAA,qDAAApF,IAAA,UACN,CACA,SAAaoF,EAAA,aAAApF,IAAA,UAAgC,CAC7C,CACA,OACA,CAAMoF,EAAA,sDAAApF,IAAA,UACN,CACA,SAAaoF,EAAA,YAAApF,IAAA,UAA+B,CAC5C,qECXA,IAAA+G,EAAe,GAAA7B,QAAAC,CAAA,EAAgB,UAC/B,CACA,OACA,CAAM6B,MAAA,KAAAC,OAAA,KAAAC,EAAA,IAAAC,EAAA,IAAAb,GAAA,IAAAtG,IAAA,UACN,CACA,qECLA,IAAAoH,EAAe,GAAAlC,QAAAC,CAAA,EAAgB,UAC/B,SAAaC,EAAA,UAAApF,IAAA,UAA6B,CAC1C,SAAaoF,EAAA,wCAAApF,IAAA,UAA2D,CACxE,SAAaoF,EAAA,qCAAApF,IAAA,UAAwD,CACrE,SAAayF,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAA5F,IAAA,UAAuD,CACpE,SAAayF,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAA5F,IAAA,SAAsD,CACnE,qECNA,IAAAqH,EAAc,GAAAnC,QAAAC,CAAA,EAAgB,SAC9B,SAAaC,EAAA,4CAAApF,IAAA,UAA+D,CAC5E,WAAesF,GAAA,IAAAC,GAAA,IAAAC,EAAA,IAAAxF,IAAA,SAAwC,CACvD,SAAaoF,EAAA,6BAAApF,IAAA,UAAgD,CAC7D,SAAaoF,EAAA,4BAAApF,IAAA,UAA+C,CAC5D,oECLA,IAAAsH,EAAa,GAAApC,QAAAC,CAAA,EAAgB,QAC7B,SAAaC,EAAA,yBAAApF,IAAA,UAA4C,CACzD,SAAaoF,EAAA,0BAAApF,IAAA,UAA6C,CAC1D,SAAaoF,EAAA,2BAAApF,IAAA,UAA8C,CAC3D,SAAayF,GAAA,KAAAC,GAAA,QAAAC,GAAA,KAAAC,GAAA,KAAA5F,IAAA,UAA0D,CACvE,qECLA,IAAAuH,EAAU,GAAArC,QAAAC,CAAA,EAAgB,KAC1B,SAAaC,EAAA,aAAApF,IAAA,UAAgC,CAC7C,SAAaoF,EAAA,aAAApF,IAAA,UAAgC,CAC7C,qECHA,IAAAwH,EAAY,GAAAtC,QAAAC,CAAA,EAAgB,OAC5B,CACA,UACA,CAAM0B,OAAA,yCAAA7G,IAAA,UACN,CACA,qCCPA,IAAAyH,EAAAC,CAHA,WAAAA,eAAA,WAAAC,CAAA,EACA,UAAAA,EAAAC,UAAA,CAAAD,EAAA,CAA6C,QAAAA,CAAA,CAC7C,GACwCE,EAAQ,OAChDC,EAAkBD,EAAQ,MAI1B,SAAAE,EAAA3F,CAAA,CAAA9B,CAAA,EACA,IAAA0H,EAAA,UACA5F,GAAA,iBAAAA,GAGA,GAAAqF,EAAAQ,OAAA,EAAA7F,EAAA,SAAA4C,CAAA,CAAAtE,CAAA,EAEAsE,GAAAtE,GACAsH,CAAAA,CAAA,IAAAF,EAAAI,SAAA,EAAAlD,EAAA1E,GAAA,CAAAI,CAAA,CAEA,GAPAsH,CASA,CACAD,EAAAE,OAAA,CAAAF,EACAjH,EAAAC,OAAA,CAAAgH,mCCtBA7I,OAAAK,cAAA,CAAAwB,EAAA,aAA6C,CAAEL,MAAA,KAC/CK,EAAAmH,SAAiB,QACjB,IAAAC,EAAA,qBACAC,EAAA,YACAC,EAAA,UACAC,EAAA,6BACAC,EAAA,UAYAC,EAAA,SAAA/F,CAAA,CAAAgG,CAAA,EACA,OAAAA,EAAAC,WAAA,EACA,EAIAC,EAAA,SAAAlG,CAAA,CAAAmG,CAAA,EAA4C,SAAAC,MAAA,CAAAD,EAAA,KAoB5C7H,CAAAA,EAAAmH,SAAiB,CAhBjB,SAAAlD,CAAA,CAAA1E,CAAA,MAlBA0E,QAoBA,CADA,SAAA1E,GAA8BA,CAAAA,EAAA,IAlB9B,EADA0E,EAoBAA,IAlBAqD,EAAAS,IAAA,CAAA9D,IACAmD,EAAAW,IAAA,CAAA9D,IAkBAA,GAEAA,EAAAA,EAAA+D,WAAA,GASA/D,CANAA,EAFA1E,EAAA0I,WAAA,CAEAhE,EAAA7C,OAAA,CAAAoG,EAAAI,GAIA3D,EAAA7C,OAAA,CAAAmG,EAAAK,IAEAxG,OAAA,CAAAiG,EAAAI,GACA,qCC3CA,IAAAd,EAAA,WAAAA,eAAA,WAAAC,CAAA,EACA,UAAAA,EAAAC,UAAA,CAAAD,EAAA,CAA6C,QAAAA,CAAA,CAC7C,EACAzI,OAAAK,cAAA,CAAAwB,EAAA,aAA6C,CAAEL,MAAA,KAC/CK,EAAA,OAAe,CAgBf,SAAAqB,CAAA,CAAA6G,CAAA,EACA,IAAAC,EAAA,KACA,IAAA9G,GAAA,iBAAAA,EACA,OAAA8G,EAEA,IAAAzE,EAAA,GAAA0E,EAAAlB,OAAA,EAAA7F,GACAgH,EAAA,mBAAAH,EAcA,OAbAxE,EAAA4E,OAAA,UAAAzE,CAAA,EACA,GAAAA,gBAAAA,EAAAJ,IAAA,EAGA,IAAAQ,EAAAJ,EAAAI,QAAA,CAAAtE,EAAAkE,EAAAlE,KAAA,CACA0I,EACAH,EAAAjE,EAAAtE,EAAAkE,GAEAlE,GAEAwI,CAAAA,CADAA,EAAAA,GAAA,GACA,CAAAlE,EAAA,CAAAtE,CAAA,EAEA,GACAwI,CACA,EApCA,IAAAC,EAAAzB,EAA4CG,EAAQ,0CCA7C,SAAAyB,IAAA,CAEA,SAAAC,IAAA,oJCLP,SAAAC,IACA,IAAAC,EAAsB,GAAAC,EAAAC,MAAA,EAAM,IAO5B,MANI,GAAAC,EAAAC,CAAA,EAAyB,KAC7BJ,EAAAK,OAAA,IACA,KACAL,EAAAK,OAAA,GACA,GACK,IACLL,CACA,iCELA,OAAAM,UAA8BL,EAAAM,SAAe,CAC7CC,wBAAAC,CAAA,EACA,IAAAC,EAAA,KAAAC,KAAA,CAAAC,QAAA,CAAAP,OAAA,CACA,GAAAK,GAAAD,EAAAI,SAAA,QAAAF,KAAA,CAAAE,SAAA,EACA,IAAAC,EAAA,KAAAH,KAAA,CAAAI,OAAA,CAAAV,OAAA,CACAS,EAAAtD,MAAA,CAAAkD,EAAAM,YAAA,IACAF,EAAAvD,KAAA,CAAAmD,EAAAO,WAAA,IACAH,EAAAI,GAAA,CAAAR,EAAAS,SAAA,CACAL,EAAAM,IAAA,CAAAV,EAAAW,UAAA,CAEA,WACA,CAIAC,oBAAA,EACAC,QAAA,CACA,YAAAZ,KAAA,CAAAa,QAAA,CAEA,CACA,SAAAC,EAAA,CAAoBD,SAAAA,CAAA,CAAAX,UAAAA,CAAA,CAAqB,EACzC,IAAAa,EAAe,GAAAzB,EAAA0B,KAAA,IACfC,EAAgB,GAAA3B,EAAAC,MAAA,EAAM,MACtBY,EAAiB,GAAAb,EAAAC,MAAA,EAAM,CACvB3C,MAAA,EACAC,OAAA,EACA0D,IAAA,EACAE,KAAA,CACA,GAgCA,MAtBI,GAAAnB,EAAA4B,kBAAA,EAAkB,KACtB,IAAgBtE,MAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAA0D,IAAAA,CAAA,CAAAE,KAAAA,CAAA,EAA2BN,EAAAT,OAAA,CAC3C,GAAAQ,GAAA,CAAAe,EAAAvB,OAAA,GAAA9C,GAAA,CAAAC,EACA,MACAoE,CAAAA,EAAAvB,OAAA,CAAAyB,OAAA,CAAAC,WAAA,CAAAL,EACA,IAAA/I,EAAAqJ,SAAAC,aAAA,UAaA,OAZAD,SAAAE,IAAA,CAAAC,WAAA,CAAAxJ,GACAA,EAAAyJ,KAAA,EACAzJ,EAAAyJ,KAAA,CAAAC,UAAA;+BACA,EAAiCX,EAAG;;mBAEpC,EAAqBnE,EAAM;oBAC3B,EAAsBC,EAAO;iBAC7B,EAAmB0D,EAAI;kBACvB,EAAoBE,EAAK;;QAEzB,GAEA,KACAY,SAAAE,IAAA,CAAAI,WAAA,CAAA3J,EACA,CACA,EAAK,CAAAkI,EAAA,EACOZ,EAAAgC,aAAmB,CAAA3B,EAAA,CAAoBO,UAAAA,EAAAD,SAAAgB,EAAAb,QAAAD,CAAA,EAAsDb,EAAAsC,YAAkB,CAAAf,EAAA,CAAaI,IAAAA,CAAA,GACxI,CC9DA,IAAAY,EAAA,EAAyBhB,SAAAA,CAAA,CAAAiB,QAAAA,CAAA,CAAA5B,UAAAA,CAAA,CAAA6B,eAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAAC,sBAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAoF,IAC7G,IAAAC,EAA6B,GAAAC,EAAAC,CAAA,EAAWC,GACxCvB,EAAe,GAAAzB,EAAA0B,KAAA,IACfuB,EAAoB,GAAAjD,EAAAkD,OAAA,EAAO,MAC3BzB,GAAAA,EACAe,QAAAA,EACA5B,UAAAA,EACA8B,OAAAA,EACAD,eAAA,IAEA,QAAAU,KADAN,EAAAO,GAAA,CAAAC,EAAA,IACAR,EAAAS,MAAA,IACA,IAAAH,EACA,MAEAV,CAAAA,GAAAA,GACA,EACAc,SAAA,IACAV,EAAAO,GAAA,CAAAC,EAAA,IACA,IAAAR,EAAAW,MAAA,CAAAH,GAEA,GAMAV,EAAAc,KAAAA,EAAA,CAAA7C,EAAA,EAiBA,MAhBI,GAAAZ,EAAAkD,OAAA,EAAO,KACXL,EAAAlD,OAAA,EAAA+D,EAAApN,IAAAuM,EAAAO,GAAA,CAAA9M,EAAA,IACA,EAAK,CAAAsK,EAAA,EAKDZ,EAAA2D,SAAe,MACnB,GACAd,EAAAhC,IAAA,GACA4B,GACAA,GACA,EAAK,CAAA7B,EAAA,EACL,cAAAgC,GACArB,CAAAA,EAAmBvB,EAAAgC,aAAmB,CAACR,EAAQ,CAAIZ,UAAAA,CAAA,EAAsBW,EAAA,EAE7DvB,EAAAgC,aAAmB,CAAC4B,EAAAC,CAAe,CAAAC,QAAA,EAAa9M,MAAAiM,CAAA,EAAgB1B,EAC5E,EACA,SAAAyB,IACA,WAAAe,GACA,wBE3CA,IAAAC,EAAA,GAAAC,EAAA3N,GAAA,KAiDA4N,EAAA,EAA2B3C,SAAAA,CAAA,CAAAmB,OAAAA,CAAA,CAAAF,QAAAA,EAAA,GAAAC,eAAAA,CAAA,CAAA0B,gBAAAA,CAAA,CAAAxB,sBAAAA,EAAA,GAAAC,KAAAA,EAAA,OAAiH,QDzD5IwB,EC0DI,GAAAC,EAAAC,CAAA,EAAS,CAAAH,EAAA,4CAGb,IAAAI,EAAwB,GAAAvE,EAAAwE,UAAA,EAAWC,EAAAC,CAAkB,EAAAH,WAAA,EAAiBI,WJ1DtE,IAAA5E,EAAsBD,IACtB,CAAA8E,EAAAC,EAAA,CAAsD,GAAA7E,EAAA8E,QAAA,EAAQ,GAC9DP,EAAwB,GAAAvE,EAAA+E,WAAA,EAAW,KACnChF,EAAAK,OAAA,EAAAyE,EAAAD,EAAA,EACA,EAAK,CAAAA,EAAA,EAML,OADgC,GAAA5E,EAAA+E,WAAA,EAAW,IAAOC,EAAAC,EAAK,CAAAC,UAAA,CAAAX,GAAA,CAAAA,EAAA,EACvDK,EAAA,GIgDoF,IACpF7E,EAAsBD,IAEtBqF,EAAAC,SAjDA7D,CAAA,EACA,IAAA8D,EAAA,GAMA,OAJIrF,EAAAsF,QAAQ,CAAA3F,OAAA,CAAA4B,EAAA,IACA,GAAAvB,EAAAuF,cAAA,EAActB,IAC1BoB,EAAArL,IAAA,CAAAiK,EACA,GACAoB,CACA,EAyCA9D,GACAiE,EAAAL,EACAM,EAA4B,GAAAzF,EAAAC,MAAA,EAAM,IAAA8D,KAAA3D,OAAA,CAGlCsF,EAA4B,GAAA1F,EAAAC,MAAA,EAAMuF,GAElCG,EAAwB,GAAA3F,EAAAC,MAAA,EAAM,IAAA8D,KAAA3D,OAAA,CAG9BwF,EAA4B,GAAA5F,EAAAC,MAAA,EAAM,IAWlC,GAVI,GAAAC,EAAAC,CAAA,EAAyB,KAC7ByF,EAAAxF,OAAA,IACAyF,SApEAtE,CAAA,CAAAoE,CAAA,EACApE,EAAA5B,OAAA,KACA,IAAArJ,EAAA0N,EAAAC,GACA0B,EAAAvC,GAAA,CAAA9M,EAAA2N,EACA,EACA,EA+DAkB,EAAAQ,GACAD,EAAAtF,OAAA,CAAAoF,CACA,GD/EApB,ECgFoB,KACpBwB,EAAAxF,OAAA,IACAuF,EAAAG,KAAA,GACAL,EAAAK,KAAA,EACA,EDnFW,GAAA9F,EAAA2D,SAAA,EAAS,QAAAS,IAAA,ICoFpBwB,EAAAxF,OAAA,CACA,OAAgBJ,EAAAgC,aAAmB,CAAChC,EAAA+F,QAAc,MAAAP,EAAAQ,GAAA,IAAyChG,EAAAgC,aAAmB,CAACO,EAAa,CAAIjM,IAAA0N,EAAAC,GAAArD,UAAA,GAAA4B,QAAAA,EAAAA,GAAAiB,KAAAA,EAAAd,sBAAAA,EAAAC,KAAAA,CAAA,EAA0IqB,KAG1QuB,EAAA,IAAAA,EAAA,CAGA,IAAAS,EAAAP,EAAAtF,OAAA,CAAA4F,GAAA,CAAAhC,GACAkC,EAAAf,EAAAa,GAAA,CAAAhC,GAEAmC,EAAAF,EAAApO,MAAA,CACA,QAAAD,EAAA,EAAoBA,EAAAuO,EAAgBvO,IAAA,CACpC,IAAAtB,EAAA2P,CAAA,CAAArO,EAAA,CACA,KAAAsO,EAAAE,OAAA,CAAA9P,IAAAmP,EAAAY,GAAA,CAAA/P,IACAmP,EAAArC,GAAA,CAAA9M,EAAAmN,KAAAA,EAEA,OAGA,SAAAb,GAAA6C,EAAA5E,IAAA,EACA2E,CAAAA,EAAA,IAIAC,EAAA9F,OAAA,EAAA2G,EAAAhQ,KAEA,GAAA4P,KAAAA,EAAAE,OAAA,CAAA9P,GACA,OACA,IAAA2N,EAAA0B,EAAAY,GAAA,CAAAjQ,GACA,IAAA2N,EACA,OACA,IAAAuC,EAAAP,EAAAG,OAAA,CAAA9P,GACAmQ,EAAAH,EACAG,IA2BAA,EAAgCzG,EAAAgC,aAAmB,CAACO,EAAa,CAAIjM,IAAA0N,EAAAC,GAAArD,UAAA,GAAA6B,eA1BrE,KAEAgD,EAAAjC,MAAA,CAAAlN,GAIA,IAAAoQ,EAAAxQ,MAAAyQ,IAAA,CAAAhB,EAAAiB,IAAA,IAAAC,MAAA,KAAAX,EAAAY,QAAA,CAAAC,IAaA,GAXAL,EAAA/G,OAAA,IAAAgG,EAAAnC,MAAA,CAAAwD,IAEAtB,EAAAtF,OAAA,CAAA+E,EAAA0B,MAAA,KACA,IAAAI,EAAAjD,EAAAkD,GACA,OAEAD,IAAA3Q,GAEAoQ,EAAAI,QAAA,CAAAG,EACA,GAEA,CAAAxB,EAAA5E,IAAA,EACA,GAAAd,CAAA,IAAAA,EAAAK,OAAA,CACA,OACAmE,IACA9B,GAAAA,GACA,CACA,EACqEC,OAAAA,EAAAC,sBAAAA,EAAAC,KAAAA,CAAA,EAA6IqB,GAClNwB,EAAArC,GAAA,CAAA9M,EAAAmQ,IAEAjB,EAAA2B,MAAA,CAAAX,EAAA,EAAAC,EACA,GAGAjB,EAAAA,EAAAQ,GAAA,KACA,IAAA1P,EAAA2N,EAAA3N,GAAA,CACA,OAAAmP,EAAAY,GAAA,CAAA/P,GAAA2N,EAAqDjE,EAAAgC,aAAmB,CAACO,EAAa,CAAIjM,IAAA0N,EAAAC,GAAArD,UAAA,GAAA+B,sBAAAA,EAAAC,KAAAA,CAAA,EAAoGqB,EAC9L,GAMYjE,EAAAgC,aAAmB,CAAChC,EAAA+F,QAAc,MAAAN,EAAA5E,IAAA,CAC9C2E,EACAA,EAAAQ,GAAA,IAA0C,GAAAhG,EAAAsC,YAAA,EAAY2B,IACtD,qEC1JA,IAAAmD,EAAA,GAeO,SAAAxR,EAAAoB,CAAA,CAAAJ,CAAA,EACP,IAAAyQ,EAAAzQ,GAAAwQ,EAQA,OAAAE,EAAAtQ,EANA,kBAAAqQ,EAAAE,eAAA,EACAF,EAAAE,eAAA,CAGA,kBAAAF,EAAAG,WAAA,EAAAH,EAAAG,WAAA,CAGA,CAcA,SAAAF,EAAAtQ,CAAA,CAAAuQ,CAAA,CAAAC,CAAA,EACA,GAsDAxQ,GAAA,iBAtDAA,EAAA,CACA,aAAAA,EACA,MAAAA,SAAAA,EAAA8D,IAAA,EAAA0M,EAAAxQ,EAAAA,KAAA,IAGA,GAAAuQ,GAAA,QAAAvQ,GAAAA,EAAAyQ,GAAA,CACA,OAAAzQ,EAAAyQ,GAAA,CAGA,gBAAAzQ,EACA,OAAA0Q,EAAA1Q,EAAAuK,QAAA,CAAAgG,EAAAC,EAEA,QAEA,MAAAxR,OAAA,CAAAgB,GACA0Q,EAAA1Q,EAAAuQ,EAAAC,GAGA,EACA,CAcA,SAAAE,EAAApE,CAAA,CAAAiE,CAAA,CAAAC,CAAA,EAEA,IAAAG,EAAA,GACAC,EAAA,GAEA,OAAAA,EAAAtE,EAAAzL,MAAA,EACA8P,CAAA,CAAAC,EAAA,CAAAN,EAAAhE,CAAA,CAAAsE,EAAA,CAAAL,EAAAC,GAGA,OAAAG,EAAAE,IAAA,IACA,6FCnFO,IAAAC,EAAA,CACPC,QAAA,GACAC,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAgBA,SAAAC,CAAA,EACA,MAAW,GAAAC,EAAAC,EAAA,EAAaF,GAAS,GAAAG,EAAAC,CAAA,EAAYN,EAAAO,EAAA,cAAAL,GAAAK,EAAAL,EAC7C,EAgBA,SAAAK,EAAAL,CAAA,EACA,OAAAA,OAAAA,GAA4B,GAAAC,EAAAK,EAAA,EAAkBN,GAAAvI,EAAAuI,GAAAD,EAAAC,EAC9C,CACA,CA7CA,mFCyBO,SAAAO,EAAAT,CAAA,CAAArI,CAAA,CAAA9E,CAAA,CAAA6N,CAAA,EACP,IAAAC,EAAAD,EAAAA,EAAA,EAAAE,OAAAC,iBAAA,CACAjI,EAAA,EACA,OAGA,SAAAsH,CAAA,QACA,CAAQ,EAAAC,EAAAC,EAAA,EAAaF,IACrBF,EAAAc,KAAA,CAAAjO,GACAoE,SAMAA,EAAAiJ,CAAA,QACA,CAAQ,EAAAC,EAAAC,EAAA,EAAaF,IAAAtH,IAAA+H,GACrBX,EAAAe,OAAA,CAAAb,GACAjJ,IAEA+I,EAAAgB,IAAA,CAAAnO,GACA8E,EAAAuI,GACA,EAbAA,IAEAvI,EAAAuI,EACA,CAWA,8UC1CO,IAAAe,EAAAC,EAAA,YAcAC,EAAAD,EAAA,cAuBAE,EAAAF,EAAA,uBAaA,SAAAG,EAAAnB,CAAA,EACP,OAGAA,OAAAA,GAAAA,CAAAA,EAAA,IAAAA,MAAAA,CAAA,CAEA,CAaO,IAAAoB,EAAAJ,EAAA,MAoBAK,EAAAL,EAAA,cAeAM,EAAAN,EAAA,kBAiBA,SAAAO,EAAAvB,CAAA,EACP,OAAAA,OAAAA,GAAAA,EAAA,EACA,CAWO,SAAAwB,EAAAxB,CAAA,EACP,OAAAA,OAAAA,GAAAA,CAAAA,EAAA,GAAAA,KAAAA,CAAA,CACA,CAiBO,SAAAyB,EAAAzB,CAAA,EACP,OAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,CACA,CAuBO,IAAA0B,EAAAV,EAAA,gBAsBAW,EAAAX,EAAA,MAUP,SAAAA,EAAAY,CAAA,EACA,OAUA,SAAA5B,CAAA,EACA,OAAAA,OAAAA,GAAAA,EAAA,IAAA4B,EAAA3K,IAAA,CAAA4K,OAAAC,YAAA,CAAA9B,GACA,CACA,qCC/NO,SAAAhB,EAAA+C,CAAA,CAAAhR,CAAA,CAAAiR,CAAA,CAAAC,CAAA,MAIPC,EAHA,IAAA/Q,EAAA4Q,EAAArS,MAAA,CACAyS,EAAA,EAaA,GAPApR,EADAA,EAAA,EACA,CAAAA,EAAAI,EAAA,EAAAA,EAAAJ,EAEAA,EAAAI,EAAAA,EAAAJ,EAEAiR,EAAAA,EAAA,EAAAA,EAAA,EAGAC,EAAAvS,MAAA,KAEAwS,CADAA,EAAAnU,MAAAyQ,IAAA,CAAAyD,EAAA,EACAG,OAAA,CAAArR,EAAAiR,GAEAD,EAAA/C,MAAA,IAAAkD,QAMA,IAHAF,GAAAD,EAAA/C,MAAA,CAAAjO,EAAAiR,GAGAG,EAAAF,EAAAvS,MAAA,EAEAwS,CADAA,EAAAD,EAAAhQ,KAAA,CAAAkQ,EAAAA,EAAA,MACAC,OAAA,CAAArR,EAAA,GAEAgR,EAAA/C,MAAA,IAAAkD,GACAC,GAAA,IACApR,GAAA,GAGA,CAkBO,SAAAc,EAAAkQ,CAAA,CAAAE,CAAA,SACP,EAAAvS,MAAA,IACAsP,EAAA+C,EAAAA,EAAArS,MAAA,GAAAuS,GACAF,GAEAE,CACA,yIC7DO,SAAAI,EAAArC,CAAA,SACP,OAAAA,GAAuB,GAAAC,EAAAqC,EAAA,EAAyBtC,IAAU,GAAAC,EAAAsC,EAAA,EAAiBvC,GAC3E,EAEM,GAAAC,EAAAuC,EAAA,EAAkBxC,GACxB,QAEA,mFCfA,IAAAzS,EAAA,GAAyBA,cAAA,CAUlB,SAAAkV,EAAAC,CAAA,EAEP,IAAAnD,EAAA,GACAE,EAAA,GAEA,OAAAA,EAAAiD,EAAAhT,MAAA,GACAiT,SAgBApD,CAAA,CAAAqD,CAAA,EAEA,IAAAC,EAEA,IAAAA,KAAAD,EAAA,KAOA5C,EAJA,IAAAhH,EAAA8J,CAFAvV,EAAAS,IAAA,CAAAuR,EAAAsD,GAAAtD,CAAA,CAAAsD,EAAA,CAAAvH,KAAAA,CAAA,GAEAiE,CAAAA,CAAA,CAAAsD,EAAA,KAEAE,EAAAH,CAAA,CAAAC,EAAA,CAIA,GAAAE,EACA,IAAA/C,KAAA+C,EAAA,CACAxV,EAAAS,IAAA,CAAAgL,EAAAgH,IAAAhH,CAAAA,CAAA,CAAAgH,EAAA,KACA,IAAAnR,EAAAkU,CAAA,CAAA/C,EAAA,EACAgD,SAqBAC,CAAA,CAAAlB,CAAA,EACA,IAAAtC,EAAA,GAEAyD,EAAA,GAEA,OAAAzD,EAAAsC,EAAArS,MAAA,EAEK,CAAAqS,UAAAA,CAAA,CAAAtC,EAAA,CAAA0D,GAAA,CAAAF,EAAAC,CAAA,EAAArR,IAAA,CAAAkQ,CAAA,CAAAtC,EAAA,EAGH,GAAA2D,EAAA7P,CAAA,EAAM0P,EAAA,IAAAC,EACR,EA9BAlK,CAAA,CAAAgH,EAAA,CACAjS,MAAAF,OAAA,CAAAgB,GAAAA,EAAAA,EAAA,CAAAA,EAAA,IAEA,CAEA,CACA,EAzCA0Q,EAAAmD,CAAA,CAAAjD,EAAA,EAGA,OAAAF,CACA,qCCZO,SAAA8D,EAAAxU,CAAA,EACP,OAAAA,EAEAyB,OAAA,oBAEAA,OAAA,cAOA4G,WAAA,GAAAL,WAAA,EACA,mEChBO,SAAAyM,EAAAN,CAAA,CAAAO,CAAA,CAAAzI,CAAA,EAEP,IAAA0I,EAAA,GACA/D,EAAA,GAEA,OAAAA,EAAAuD,EAAAtT,MAAA,GACA,IAAA+T,EAAAT,CAAA,CAAAvD,EAAA,CAAA6D,UAAA,CAEAG,GAAA,CAAAD,EAAA7E,QAAA,CAAA8E,KACAF,EAAAE,EAAAF,EAAAzI,GACA0I,EAAA3R,IAAA,CAAA4R,GAEA,CAEA,OAAAF,CACA,wrBErBA,IAAAG,EAAA,0DACAC,EAAA,2DAGA1E,EAAA,GA0CO,SAAS2E,EAAIlV,CAAA,CAAAD,CAAA,EAGpB,MAAAqD,CADAoN,CADAzQ,GAAAwQ,CAAA,EACA4E,GAAA,CAAAF,EAAAD,CAAA,EACAzM,IAAA,CAAAvI,EACA,CCtDA,IAAAoD,EAAA,eAyBA,SAAAgS,EAAAjV,CAAA,EACA,MAAAA,KAAAA,EAAAyB,OAAA,CAAAwB,EAAA,GACA,CC5BO,MAAAiS,EAWPzV,YAAA6E,CAAA,CAAA6Q,CAAA,CAAAC,CAAA,EACA,KAAAD,MAAA,CAAAA,EACA,KAAA7Q,QAAA,CAAAA,EAEA8Q,GACA,MAAAA,KAAA,CAAAA,CAAA,CAEA,CACA,CCVO,SAAAC,EAAAC,CAAA,CAAAF,CAAA,EAEP,IAAA9Q,EAAA,GAEA6Q,EAAA,GAEA,QAAAI,KAAAD,EACA9W,OAAAgX,MAAA,CAAAlR,EAAAiR,EAAAjR,QAAA,EACA9F,OAAAgX,MAAA,CAAAL,EAAAI,EAAAJ,MAAA,EAGA,WAAaD,EAAM5Q,EAAA6Q,EAAAC,EACnB,CCjBO,SAAAK,EAAAzV,CAAA,EACP,OAAAA,EAAAqI,WAAA,EACA,CFeA6M,EAAAzW,SAAA,CAAA0W,MAAA,IACAD,EAAAzW,SAAA,CAAA6F,QAAA,IACA4Q,EAAAzW,SAAA,CAAA2W,KAAA,CAAA3I,KAAAA,CGvBO,OAAAiJ,EASPjW,YAAA6E,CAAA,CAAAqR,CAAA,EACA,KAAAA,SAAA,CAAAA,EACA,KAAArR,QAAA,CAAAA,CACA,CACA,CAEAoR,EAAAjX,SAAA,CAAAkX,SAAA,IACAD,EAAAjX,SAAA,CAAAmX,UAAA,IACAF,EAAAjX,SAAA,CAAAoX,OAAA,IACAH,EAAAjX,SAAA,CAAAqX,qBAAA,IACAJ,EAAAjX,SAAA,CAAAsX,cAAA,IACAL,EAAAjX,SAAA,CAAAuX,OAAA,IACAN,EAAAjX,SAAA,CAAAwX,eAAA,IACAP,EAAAjX,SAAA,CAAAyX,MAAA,IACAR,EAAAjX,SAAA,CAAA0X,iBAAA,IACAT,EAAAjX,SAAA,CAAA6F,QAAA,IACAoR,EAAAjX,SAAA,CAAA2X,cAAA,IACAV,EAAAjX,SAAA,CAAA2W,KAAA,CAAA3I,KAAAA,EC/BA,IAAA4J,EAAA,EAEaC,EAAOC,IACbX,EAAAW,IACAJ,EAAAI,IACAL,EAAAK,IACAH,EAAAG,IACAR,EAAAQ,IACAT,EAAAS,IAEP,SAAAA,IACA,YAAAF,CACA,CCLA,IAAAG,EACAhY,OAAAoR,IAAA,CAAc6G,EAGP,OAAAC,UAA0BhB,EAcjCjW,YAAA6E,CAAA,CAAAqR,CAAA,CAAAgB,CAAA,CAAAvB,CAAA,MA8BA9V,EAAAU,EA7BA,IAAA4Q,EAAA,GAMA,GAJA,MAAAtM,EAAAqR,GAEAP,GA2BA9I,CAAAA,IA3BA,MA2BA,CA3BA8I,CA2BA,EAzBA,iBAAAuB,EACA,OAAA/F,EAAA4F,EAAA3V,MAAA,GACA,IAAA+V,EAAAJ,CAAA,CAAA5F,EAAA,CAqBAtR,EApBAkX,CAAA,CAAA5F,EAAA,EAoBA5Q,EApBA,CAAA2W,EAA0CF,CAAK,CAAAG,EAAA,IAAaH,CAAK,CAAAG,EAAA,GAsBjEtK,CAAAA,IAtBA,CAsBAhN,EAAA,CAAAU,CAAA,CArBA,CAEA,CACA,CCCO,SAAA6W,EAAAtB,CAAA,EAEP,IAAAuB,EAAA,GAEAC,EAAA,GAEA,QAAAzS,EAAAtE,EAAA,GAAAxB,OAAAwY,OAAA,CAAAzB,EAAAuB,UAAA,GACA,IAAAG,EAAA,IAAqBP,EACrBpS,EACAiR,EAAA2B,SAAA,CAAA3B,EAAA4B,UAAA,KAAsD7S,GACtDtE,EACAuV,EAAAH,KAAA,CAIAG,CAAAA,EAAAU,eAAA,EACAV,EAAAU,eAAA,CAAAnG,QAAA,CAAAxL,IAEA2S,CAAAA,EAAAhB,eAAA,KAGAa,CAAA,CAAAxS,EAAA,CAAA2S,EAEAF,CAAA,CAAYtB,EAASnR,GAAA,CAAAA,EACrByS,CAAA,CAAYtB,EAASwB,EAAAtB,SAAA,GAAArR,CACrB,CAEA,WAAa4Q,EAAM4B,EAAAC,EAAAxB,EAAAH,KAAA,CACnB,CD3BAsB,EAAAjY,SAAA,CAAAuX,OAAA,IEtCO,IAAAoB,EAAaP,EAAM,CAC1BC,WAAA,CACAO,qBAAA,KACAC,WAAgB1B,EAChB2B,iBAAA,KACAC,SAAc5B,EACd6B,YAAiB7B,EACjB8B,aAAkBxB,EAClByB,aAAkBzB,EAClB0B,YAAiB1B,EACjB2B,aAAkBzB,EAClB0B,YAAA,KACAC,gBAAqB3B,EACrB4B,YAAA,KACAC,aAAkBrC,EAClBsC,eAAoB9B,EACpB+B,iBAAA,KACAC,aAAkBxC,EAClByC,WAAgBjC,EAChBkC,YAAiB1C,EACjB2C,aAAA,KACAC,WAAgB5C,EAChB6C,YAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,eAAoBxC,EACpByC,UAAe3C,EACf4C,SAAA,KACAC,UAAenD,EACfoD,cAAmBpD,EACnBqD,oBAAyBrD,EACzBsD,gBAAA,KACAC,SAAc/C,EACdgD,gBAAA,KACAC,aAAkBnD,EAClBoD,YAAiB1D,EACjB2D,aAAkB3D,EAClB4D,aAAA,KACAC,aAAkB7D,EAClB8D,oBAAyBtD,EACzBuD,aAAkBzD,EAClB0D,aAAkB1D,EAClB2D,YAAiB3D,EACjB4D,aAAkBlE,EAClBmE,YAAiB7D,EACjB8D,SAAA,KACAC,aAAkB/D,EAClBgE,aAAkBhE,EAClBiE,aAAkBjE,EAClBkE,cAAA,KACAC,KAAA,IACA,EACAnD,UAAAA,CAAAxK,EAAApI,IACAA,SAAAA,EACAA,EACA,QAAAA,EAAAlB,KAAA,IAAAiF,WAAA,EAEA,GCpDO,SAAAiS,EAAAnD,CAAA,CAAAxB,CAAA,EACP,OAAAA,KAAAwB,EAAAA,CAAA,CAAAxB,EAAA,CAAAA,CACA,CCAO,SAAA4E,EAAApD,CAAA,CAAA7S,CAAA,EACP,OAASgW,EAAsBnD,EAAA7S,EAAA+D,WAAA,GAC/B,CCDO,IAAAmS,EAAa3D,EAAM,CAC1BM,WAAA,CACAsD,cAAA,iBACAC,UAAA,QACAC,QAAA,MACAC,UAAA,YACA,EACA3E,gBAAA,0CACAa,WAAA,CAEA+D,KAAA,KACAC,OAAY/E,EACZgF,cAAmB3E,EACnB4E,UAAe5E,EACf6E,OAAA,KACAC,MAAA,KACAC,gBAAqB7E,EACrB8E,oBAAyB9E,EACzB+E,eAAoB/E,EACpB7F,IAAA,KACA6K,GAAA,KACAC,MAAWjF,EACXkF,eAAA,KACAC,aAAkBrF,EAClBsF,UAAepF,EACfqF,SAAcrF,EACdsF,SAAcxF,EACdyF,QAAA,KACAC,QAAA,KACAC,QAAazF,EACb0F,KAAA,KACAC,UAAe7F,EACf8F,KAAUhG,EACViG,QAAA,KACA3Z,QAAA,KACA4Z,gBAAqBxG,EACrByG,SAAc/F,EACdgG,aAAkBlG,EAClBmG,OAAYrG,EAASH,EACrByG,YAAA,KACAC,KAAA,KACAC,SAAA,KACAC,SAAA,KACApV,QAAa+O,EACbsG,MAAWtG,EACXuG,IAAA,KACAC,QAAA,KACAC,SAAczG,EACd0G,SAAc7G,EACd8G,UAAerH,EACfsH,QAAA,KACAC,aAAA,KACAC,cAAA,KACAC,KAAA,KACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,eAAoBnH,EACpBoH,WAAA,KACAC,QAAavH,EACb7P,OAAY2P,EACZ0H,OAAYzH,EACZ0H,KAAU3H,EACV4H,KAAA,KACAC,SAAA,KACAC,QAAa5H,EACb6H,UAAe7H,EACf3L,GAAA,KACAyT,WAAA,KACAC,YAAA,KACAC,MAAW9H,EACX+H,UAAA,KACAC,UAAA,KACAC,GAAA,KACAC,MAAWlI,EACXmI,OAAA,KACAC,SAActI,EACduI,QAAavI,EACbwI,UAAetI,EACfuI,SAAczI,EACd0I,KAAA,KACAC,MAAA,KACAC,KAAA,KACAC,SAAA,KACA/L,KAAA,KACAgM,QAAA,KACAC,KAAU7I,EACV8I,IAASlJ,EACTmJ,SAAA,KACA1N,IAAA,KACA2N,UAAepJ,EACfqJ,MAAA,KACAC,OAAA,KACAC,IAAA,KACAC,UAAexJ,EACfyJ,SAAcrJ,EACdsJ,MAAWtJ,EACXzW,KAAA,KACAggB,MAAA,KACAC,SAAcxJ,EACdyJ,WAAgBzJ,EAChB0J,QAAA,KACAC,aAAA,KACAC,WAAA,KACAC,cAAA,KACAC,cAAA,KACAC,eAAA,KACAC,eAAA,KACAC,OAAA,KACAC,SAAA,KACAC,UAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,QAAA,KACAC,QAAA,KACAC,cAAA,KACAC,cAAA,KACAC,kBAAA,KACAC,OAAA,KACAC,YAAA,KACAC,MAAA,KACAC,WAAA,KACAC,OAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,OAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,WAAA,KACAC,aAAA,KACAC,QAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,KACAC,QAAA,KACAC,iBAAA,KACAC,OAAA,KACAC,aAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,YAAA,KACAC,UAAA,KACAC,eAAA,KACAC,YAAA,KACAC,aAAA,KACAC,aAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,UAAA,KACAC,UAAA,KACAC,SAAA,KACAC,WAAA,KACAC,WAAA,KACAC,QAAA,KACAC,QAAA,KACAC,OAAA,KACAC,UAAA,KACAC,WAAA,KACAC,WAAA,KACAC,aAAA,KACAC,mBAAA,KACAC,QAAA,KACAC,SAAA,KACAC,SAAA,KACAC,YAAA,KACAC,0BAAA,KACAC,SAAA,KACAC,UAAA,KACAC,SAAA,KACAC,aAAA,KACAC,UAAA,KACAC,UAAA,KACAC,SAAA,KACAC,UAAA,KACAC,aAAA,KACAC,SAAA,KACAC,qBAAA,KACAC,SAAA,KACAC,eAAA,KACAC,UAAA,KACAC,QAAA,KACAC,KAAUlP,EACVmP,QAAavP,EACbwP,QAAA,KACAC,KAAUvP,EACVwP,YAAA,KACAC,YAAiBvP,EACjBwP,QAAA,KACAC,cAAA,KACAC,oBAAA,KACAC,OAAA,KACAC,QAAA,KACAC,SAAc7P,EACd8P,eAAA,KACAC,IAASjQ,EACTkQ,SAAchQ,EACdiQ,SAAcjQ,EACdkQ,KAAUtQ,EACVuQ,QAAavQ,EACbwQ,QAAatQ,EACbuQ,MAAA,KACAC,OAAYtQ,EACZuQ,SAAcvQ,EACdwQ,SAAcxQ,EACdyQ,mBAAwBzQ,EACxB0Q,yBAA8B1Q,EAC9B2Q,eAAA,KACAC,MAAA,KACArd,KAAUqM,EACViR,MAAA,KACAC,KAAA,KACAC,KAAUnR,EACVoR,WAAgB1R,EAChBrV,IAAA,KACAgnB,OAAA,KACAC,QAAA,KACAC,OAAA,KACAvlB,MAAWgU,EACXwR,KAAA,KACAhmB,MAAA,KACAimB,SAAczR,EACdvW,OAAA,KACAioB,MAAA,KACAC,UAAA,KACA/jB,KAAA,KACAgkB,cAAmBxR,EACnByR,OAAA,KACA/nB,MAAW4V,EACXtP,MAAW4P,EACX8R,KAAA,KACAC,mBAAA,KAIAC,MAAA,KACAC,MAAA,KACAC,QAAahS,EACbiS,KAAA,KACAC,WAAA,KACAC,QAAA,KACAC,OAAYtS,EACZuS,YAAA,KACAC,aAAkBxS,EAClByS,YAAA,KACAC,YAAA,KACAC,KAAA,KACAC,QAAA,KACAC,QAAA,KACAja,MAAA,KACAqC,KAAA,KACA6X,SAAA,KACAC,SAAA,KACAC,MAAA,KACAC,QAAa7S,EACb8S,QAAa9S,EACb+S,MAAA,KACAC,KAAA,KACAC,MAAA,KACAC,YAAA,KACAC,OAAYvT,EACZwT,WAAgBxT,EAChByT,KAAA,KACAC,SAAA,KACAC,OAAA,KACAC,aAAkB5T,EAClB6T,YAAiB7T,EACjB8T,SAAc1T,EACd2T,OAAY3T,EACZ4T,QAAa5T,EACb6T,OAAY7T,EACZ8T,OAAA,KACAC,QAAA,KACAC,OAAA,KACAC,IAAA,KACAC,YAAiBtU,EACjB5S,MAAA,KACAmnB,OAAA,KACAC,UAAe9U,EACf+U,QAAA,KACAC,QAAA,KACAC,KAAA,KACAC,UAAe5U,EACf6U,UAAA,KACAC,QAAA,KACAC,OAAA,KACAC,MAAA,KACAC,OAAYjV,EAGZkV,kBAAA,KACAC,YAAA,KACAC,SAAA,KACAC,wBAA6BjV,EAC7BkV,sBAA2BlV,EAC3BpO,OAAA,KACA5D,SAAA,KACAmnB,QAAavV,EACbwV,SAAA,KACAC,aAAA,IACA,EACAvW,MAAA,OACA8B,UAAaqD,CACb,GCvTOqR,EAAY/U,EAAM,CACzBM,WAAA,CACA0U,aAAA,gBACAC,kBAAA,qBACAC,WAAA,cACAC,cAAA,iBACAC,UAAA,aACAhQ,UAAA,QACAiQ,SAAA,YACAC,SAAA,YACAC,mBAAA,sBACAC,0BAAA,8BACAC,aAAA,gBACAC,eAAA,kBACA/P,YAAA,cACAgQ,SAAA,WACAC,iBAAA,oBACAC,iBAAA,oBACAC,YAAA,eACAC,SAAA,YACAC,WAAA,cACAC,aAAA,gBACAC,WAAA,cACAC,SAAA,YACAC,eAAA,mBACAC,YAAA,eACAC,UAAA,aACAC,YAAA,eACAC,WAAA,cACAC,UAAA,aACAC,2BAAA,+BACAC,yBAAA,6BACAzP,SAAA,WACA0P,UAAA,cACAC,aAAA,iBACAC,aAAA,iBACAC,eAAA,kBACAC,cAAA,iBACAC,cAAA,iBACAC,UAAA,aACAC,UAAA,aACAC,YAAA,eACAC,QAAA,WACAC,YAAA,gBACAC,aAAA,iBACAC,QAAA,WACAC,QAAA,WACAC,QAAA,WACAC,SAAA,YACAC,MAAA,SACAC,UAAA,cACAC,WAAA,eACA3O,QAAA,UACA4O,WAAA,aACA3O,aAAA,eACAG,cAAA,gBACAyO,QAAA,UACArO,SAAA,WACAC,UAAA,YACAC,iBAAA,mBACAC,SAAA,WACAC,QAAA,UACAC,QAAA,UACAI,OAAA,SACAC,YAAA,cACAC,MAAA,QACAC,WAAA,aACAC,OAAA,SACAC,UAAA,YACAC,YAAA,cACAC,WAAA,aACAC,YAAA,cACAC,WAAA,aACAC,YAAA,cACAC,OAAA,SACAC,iBAAA,mBACAC,UAAA,YACAgN,MAAA,QACA/M,QAAA,UACAC,QAAA,UACAC,QAAA,UACA8M,UAAA,YACAC,WAAA,aACA7M,aAAA,eACAC,QAAA,UACAC,UAAA,YACAC,UAAA,YACAC,WAAA,aACAC,QAAA,UACAE,OAAA,SACAC,aAAA,eACAC,iBAAA,mBACAE,YAAA,cACAC,UAAA,YACAE,YAAA,cACAC,aAAA,eACAC,aAAA,eACAC,YAAA,cACAC,WAAA,aACAC,YAAA,cACAC,UAAA,YACA0L,aAAA,eACAzL,UAAA,YACAC,SAAA,WACAC,WAAA,aACAC,WAAA,aACAC,QAAA,UACAC,QAAA,UACAC,OAAA,SACAC,UAAA,YACAC,WAAA,aACAC,WAAA,aACAC,aAAA,eACAgL,SAAA,WACA9K,QAAA,UACAC,SAAA,WACAC,SAAA,WACAG,SAAA,WACAC,UAAA,YACAC,SAAA,WACAwK,OAAA,SACAtK,UAAA,YACAC,UAAA,YACAC,SAAA,WACAC,UAAA,YACAC,aAAA,eACAC,SAAA,WACAE,SAAA,WACAC,eAAA,iBACAC,UAAA,YACA8J,OAAA,SACAC,iBAAA,oBACAC,kBAAA,qBACAC,WAAA,cACAC,QAAA,WACAC,cAAA,iBACArJ,eAAA,iBACAsJ,gBAAA,mBACAC,eAAA,kBACAC,UAAA,aACAC,YAAA,eACAC,sBAAA,yBACAC,uBAAA,0BACAC,gBAAA,mBACAC,iBAAA,oBACAC,cAAA,iBACAC,eAAA,kBACAC,iBAAA,oBACAC,cAAA,iBACAC,YAAA,eACA3I,SAAA,WACA4I,WAAA,cACAC,eAAA,kBACAC,cAAA,iBACAC,gBAAA,mBACAC,OAAA,SACAC,kBAAA,qBACAC,mBAAA,sBACAC,YAAA,eACAC,aAAA,gBACAC,WAAA,eACAC,YAAA,eACAC,SAAA,YACAC,aAAA,gBACAC,cAAA,iBACAC,aAAA,gBACAC,SAAA,aACAC,YAAA,gBACAC,YAAA,gBACAC,YAAA,eACAC,YAAA,eACAC,QAAA,WAEAC,cAAA,gBACAC,cAAA,eACA,EACA/a,WAAA,CACAgb,MAAWhc,EACX+V,aAAkB3V,EAClB6b,WAAA,KACAC,SAAA,KACAlG,kBAAA,KACAmG,WAAgB/b,EAChBgc,UAAehc,EACf6V,WAAA,KACAoG,OAAYjc,EACZkc,cAAA,KACAC,cAAA,KACAC,QAAapc,EACbqc,UAAA,KACAvG,cAAA,KACAwG,cAAA,KACAC,YAAA,KACAC,KAAA,KACAC,MAAA,KACAC,KAAU1c,EACV2c,GAAA,KACAC,SAAA,KACA7G,UAAe/V,EACf+F,UAAe7F,EACf2c,KAAA,KACA7G,SAAA,KACA8G,cAAA,KACA7G,SAAA,KACAjD,MAAA,KACAkD,mBAAA,KACAC,0BAAA,KACAC,aAAA,KACAC,eAAA,KACA/pB,QAAA,KACAywB,kBAAA,KACAC,iBAAA,KACA1W,YAAA,KACA2W,OAAA,KACAvuB,GAAA,KACAC,GAAA,KACAH,EAAA,KACA8nB,SAAA,KACA4G,cAAA,KACAC,QAAand,EACbod,gBAAqBpd,EACrBqd,UAAA,KACAC,QAAA,KACAC,IAAA,KACAC,QAAaxd,EACbuW,iBAAA,KACAzP,SAAc1G,EACdqd,GAAA,KACAC,GAAA,KACAC,SAAA,KACAC,SAAA,KACAC,UAAe7d,EACfwW,iBAAA,KACApqB,IAAA,KACA+mB,MAAA,KACA2K,SAAc9d,EACd+d,0BAAA,KACAC,KAAA,KACAvH,YAAiBzW,EACjB0W,SAAA,KACA/c,OAAA,KACAskB,UAAA,KACAC,YAAA,KACAvH,WAAA,KACAC,aAAA,KACAuH,UAAA,KACAC,eAAA,KACAvH,WAAA,KACAC,SAAA,KACAC,eAAA,KACAC,YAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAkH,OAAA,KACAC,GAAA,KACA7kB,KAAA,KACA8kB,GAAA,KACAC,GAAA,KACAC,GAAQ5e,EACR6e,GAAQ7e,EACRuX,UAAevX,EACfwX,2BAAA,KACAC,yBAAA,KACAqH,SAAA,KACAC,kBAAA,KACAC,cAAA,KACAC,QAAA,KACAC,QAAa/e,EACbgf,kBAAA,KACAC,WAAA,KACA5uB,OAAA,KACAuX,KAAA,KACAC,SAAA,KACA0P,UAAevX,EACfwX,aAAkBxX,EAClByX,aAAkBzX,EAClBzL,GAAA,KACA2qB,YAAiBlf,EACjB0X,eAAA,KACAyH,kBAAA,KACAC,GAAA,KACAC,IAAA,KACAC,UAAetf,EACf5I,EAAO4I,EACPuf,GAAQvf,EACRwf,GAAQxf,EACRyf,GAAQzf,EACR0f,GAAQ1f,EACR2f,aAAkB/f,EAClBggB,iBAAA,KACAC,UAAA,KACAC,WAAA,KACAC,SAAA,KACAC,QAAA,KACAlX,KAAA,KACAmX,aAAA,KACAtI,cAAA,KACAC,cAAA,KACAsI,kBAAuBlgB,EACvBmgB,MAAA,KACAtI,UAAA,KACAC,UAAA,KACAC,YAAA,KACAqI,aAAA,KACAC,YAAA,KACAC,YAAA,KACA7f,KAAA,KACA8f,iBAAA,KACAC,UAAA,KACAC,aAAA,KACAhlB,IAAA,KACA4N,MAAA,KACAqX,uBAAA,KACAC,sBAAA,KACAC,UAAe5gB,EACf6gB,UAAA,KACAvX,OAAA,KACAC,IAAA,KACA7T,KAAA,KACA/L,KAAA,KACAquB,QAAA,KACAC,YAAA,KACAC,aAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,UAAA,KACAC,WAAA,KACAqI,WAAA,KACAC,SAAA,KACAC,OAAA,KACAlX,QAAA,KACA4O,WAAA,KACA3O,aAAA,KACAG,cAAA,KACAyO,QAAA,KACArO,SAAA,KACAC,UAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,QAAA,KACAC,QAAA,KACAI,OAAA,KACAC,YAAA,KACAC,MAAA,KACAC,WAAA,KACAC,OAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,OAAA,KACAC,iBAAA,KACAC,UAAA,KACAgN,MAAA,KACA/M,QAAA,KACAC,QAAA,KACAC,QAAA,KACA8M,UAAA,KACAC,WAAA,KACA7M,aAAA,KACAC,QAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,KACAC,QAAA,KACAE,OAAA,KACAC,aAAA,KACAC,iBAAA,KACAE,YAAA,KACAC,UAAA,KACAE,YAAA,KACAC,aAAA,KACAC,aAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,UAAA,KACA0L,aAAA,KACAzL,UAAA,KACAC,SAAA,KACAC,WAAA,KACAC,WAAA,KACAC,QAAA,KACAC,QAAA,KACAC,OAAA,KACAC,UAAA,KACAC,WAAA,KACAC,WAAA,KACAC,aAAA,KACAgL,SAAA,KACA9K,QAAA,KACAC,SAAA,KACAC,SAAA,KACAG,SAAA,KACAC,UAAA,KACAC,SAAA,KACAwK,OAAA,KACAtK,UAAA,KACAC,UAAA,KACAC,SAAA,KACAC,UAAA,KACAC,aAAA,KACAC,SAAA,KACAE,SAAA,KACAC,eAAA,KACAC,UAAA,KACA8J,OAAA,KACA+H,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,OAAA,KACAC,YAAA,KACAC,OAAA,KACAC,SAAA,KACAC,QAAA,KACArI,iBAAsBnZ,EACtBoZ,kBAAuBpZ,EACvBqZ,WAAA,KACAC,QAAA,KACAmI,KAAA,KACAC,WAAgB1hB,EAChB2hB,oBAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,MAAA,KACArS,KAAUvP,EACV6hB,MAAA,KACArG,cAAA,KACAnC,cAAA,KACAtpB,OAAA,KACA+xB,UAAehiB,EACfiiB,UAAejiB,EACfkiB,UAAeliB,EACfmiB,cAAA,KACAC,oBAAA,KACAC,eAAA,KACAC,UAAA,KACAl0B,SAAcwR,EACdhR,EAAA,KACA2zB,OAAA,KACArS,eAAA,KACAsS,KAAA,KACAC,KAAA,KACAtS,IAASvQ,EACTyU,IAASzU,EACT4Z,gBAAA,KACAkJ,YAAA,KACAC,UAAA,KACAC,mBAAwBhjB,EACxBijB,iBAAsBjjB,EACtBkjB,cAAmBljB,EACnBmjB,gBAAqBnjB,EACrBojB,SAAA,KACAC,QAAA,KACAxoB,OAAA,KACAyoB,OAAA,KACAxzB,GAAA,KACAC,GAAA,KACAwzB,MAAA,KACAC,KAAA,KACA3J,eAAA,KACA4J,KAAA,KACAC,MAAA,KACAC,aAAA,KACAC,iBAAsBxjB,EACtByjB,iBAAsBzjB,EACtB0jB,aAAA,KACAC,QAAA,KACAC,YAAA,KACAC,aAAA,KACAC,MAAA,KACAC,MAAA,KACAC,YAAA,KACAtK,UAAA,KACAC,YAAA,KACAC,sBAA2B5Z,EAC3B6Z,uBAA4B7Z,EAC5BikB,OAAA,KACAC,OAAA,KACApK,gBAAqBla,EACrBma,iBAAA,KACAC,cAAA,KACAC,eAAA,KACAC,iBAAsBla,EACtBma,cAAmBna,EACnBoa,YAAA,KACA5uB,MAAA,KACA24B,aAAkBnkB,EAClBokB,aAAA,KACAC,oBAAA,KACAC,WAAA,KACAC,cAAA,KACAC,qBAAA,KACAC,eAAoB7kB,EACpB6R,SAAczR,EACd0kB,YAAA,KACAj7B,OAAA,KACAk7B,QAAa3kB,EACb4kB,QAAa5kB,EACbqa,WAAA,KACAC,eAAA,KACAC,cAAA,KACAsK,WAAA,KACAlJ,cAAA,KACAjK,MAAA,KACAoT,kBAAA,KACAl3B,KAAA,KACA6sB,OAAY7a,EACZmlB,GAAA,KACA/jB,UAAA,KACAwZ,gBAAA,KACAwK,GAAA,KACAC,GAAA,KACAvK,kBAAuB1a,EACvB2a,mBAAwB3a,EACxBklB,QAAA,KACAtK,YAAA,KACAC,aAAA,KACAC,WAAgB9a,EAChB5J,OAAA,KACA2kB,YAAiB/a,EACjBkb,cAAmBlb,EACnBmb,aAAA,KACAH,SAAchb,EACdib,aAAkBjb,EAClB8U,QAAA,KACAsG,SAAcpb,EACdqb,YAAiBrb,EACjBsb,YAAiBtb,EACjBmlB,QAAA,KACAC,WAAA,KACAC,WAAA,KACAj1B,MAAA,KACAk1B,OAAA,KACA/J,YAAA,KACAC,YAAA,KACAlrB,EAAA,KACAzB,GAAA,KACAC,GAAA,KACAy2B,iBAAA,KACA9J,QAAazb,EACbzP,EAAA,KACAxB,GAAA,KACAC,GAAA,KACAw2B,iBAAA,KACAC,EAAA,KACAC,WAAA,IACA,EACAxmB,MAAA,MACA8B,UAAaoD,CACb,GCpjBOuhB,EAAchlB,EAAM,CAC3BC,WAAA,CACAglB,aAAA,KACAC,aAAA,KACAC,UAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,KACAC,UAAA,IACA,EACAhnB,MAAA,QACA8B,UAAAA,CAAAxK,EAAApI,IACA,SAAAA,EAAAlB,KAAA,IAAAiF,WAAA,EAEA,GCbOg0B,EAAcxlB,EAAM,CAC3BM,WAAA,CAAemlB,WAAA,eACfxlB,WAAA,CAAeylB,WAAA,KAAAF,MAAA,MACfjnB,MAAA,QACA8B,UAAaqD,CACb,GCNOiiB,EAAY3lB,EAAM,CACzBC,WAAA,CAAe2lB,QAAA,KAAAC,QAAA,KAAAC,SAAA,MACfvnB,MAAA,MACA8B,UAAAA,CAAAxK,EAAApI,IACA,OAAAA,EAAAlB,KAAA,IAAAiF,WAAA,EAEA,GCGau0B,EAAOvnB,EAAK,CAAE+B,EAAMoD,EAAUqhB,EAAOQ,EAAOG,EAAG,SAK/CK,EAAMxnB,EAAK,CAAE+B,EAAMwU,EAASiQ,EAAOQ,EAAOG,EAAG,QCR1DM,EAAA,SACAC,EAAA,UACAC,EAAA,kBA0EA,SAAAC,EAAAC,CAAA,EACA,UAAAA,EAAA70B,WAAA,EACA,CAQA,SAAA80B,EAAAD,CAAA,EACA,OAAAA,EAAAv5B,MAAA,IAAAqE,WAAA,EACA,CCrFO,IAAAo1B,EAAA,CACPrU,QAAA,UACAyD,SAAA,WACA/N,OAAA,SACAuR,gBAAA,kBACAC,iBAAA,mBACAC,cAAA,gBACAC,eAAA,iBACAC,iBAAA,mBACAO,OAAA,SACAmL,aAAA,eACAC,aAAA,eACAC,UAAA,YACAC,UAAA,YACAC,UAAA,YACAC,WAAA,aACAC,UAAA,YACAG,WAAA,YACA,gBEAO,IAAAc,EAAAC,EAAA,OAUAC,EAAAD,EAAA,SAUP,SAAAA,EAAAx5B,CAAA,EACA,OAQA,SAAA1B,CAAA,EACA,IAAAk7B,EAAA,GAAAl7B,EAAAH,QAAA,EAAAG,EAAAH,QAAA,CAAA6B,EAAA,KAEA,GACA,iBAAAw5B,EAAAn7B,IAAA,EACAm7B,EAAAn7B,IAAA,IACA,iBAAAm7B,EAAA17B,MAAA,EACA07B,EAAA17B,MAAA,GAEA,OACAO,KAAAm7B,EAAAn7B,IAAA,CACAP,OAAA07B,EAAA17B,MAAA,CACAs1B,OACA,iBAAAoG,EAAApG,MAAA,EAAAoG,EAAApG,MAAA,IACAoG,EAAApG,MAAA,CACAzqB,KAAAA,CACA,CAEA,CACA,CCzCO,SAAA+wB,EAAAx9B,CAAA,SAEP,oBAAAA,EAKA,aAAAA,GAAA,SAAAA,EACWy9B,EAAQz9B,EAAAiC,QAAA,EAInB,UAAAjC,GAAA,QAAAA,EACWy9B,EAAQz9B,GAInB,SAAAA,GAAA,WAAAA,EACW09B,EAAK19B,GAIhB,GAnBA,EAoBA,CAMA,SAAS09B,EAAKJ,CAAA,EACd,OAAA1sB,EAAA0sB,GAAAA,EAAAn7B,IAAA,MAAAyO,EAAA0sB,GAAAA,EAAA17B,MAAA,CACA,CAMA,SAAS67B,EAAQh6B,CAAA,EACjB,OAASi6B,EAAKj6B,GAAAA,EAAAvB,KAAA,MAA2Bw7B,EAAKj6B,GAAAA,EAAAnB,GAAA,CAC9C,CAMA,SAAAsO,EAAA5Q,CAAA,EACA,OAAAA,GAAA,iBAAAA,EAAAA,EAAA,CACA,CCzDO,MAAA29B,UAAAC,MAwDPn+B,YAAAo+B,CAAA,CAAAC,CAAA,CAAAtG,CAAA,EACA,QAEA,iBAAAsG,IACAtG,EAAAsG,EACAA,EAAArxB,KAAAA,GAIA,IAAA5J,EAAA,GAEAjD,EAAA,GACAm+B,EAAA,GAwCA,GAtCAD,IAMAl+B,EAHA,SAAAk+B,GACA,WAAAA,EAEA,CAAmBE,MAAAF,CAAA,EAInB,UAAAA,GACA,QAAAA,EAEA,CAAmBE,MAAAF,CAAA,EAGnB,SAAAA,EACA,CACAG,UAAA,CAAAH,EAAA,CACAE,MAAAF,EAAA77B,QAAA,EAKA,CAAmB,GAAA67B,CAAA,GAInB,iBAAAD,EACAh7B,EAAAg7B,EAGA,CAAAj+B,EAAAs+B,KAAA,EAAAL,IACAE,EAAA,GACAl7B,EAAAg7B,EAAAM,OAAA,CACAv+B,EAAAs+B,KAAA,CAAAL,GAGA,CAAAj+B,EAAAw+B,MAAA,GAAAx+B,EAAA2C,MAAA,mBAAAi1B,EAAA,CACA,IAAA5mB,EAAA4mB,EAAApoB,OAAA,KAEAwB,CAAA,KAAAA,EACAhR,EAAAw+B,MAAA,CAAA5G,GAEA53B,EAAA2C,MAAA,CAAAi1B,EAAAp0B,KAAA,GAAAwN,GACAhR,EAAAw+B,MAAA,CAAA5G,EAAAp0B,KAAA,CAAAwN,EAAA,GAEA,CAEA,IAAAhR,EAAAo+B,KAAA,EAAAp+B,EAAAq+B,SAAA,EAAAr+B,EAAAq+B,SAAA,EACA,IAAAI,EAAAz+B,EAAAq+B,SAAA,CAAAr+B,EAAAq+B,SAAA,CAAAp9B,MAAA,IAEAw9B,GACAz+B,CAAAA,EAAAo+B,KAAA,CAAAK,EAAAp8B,QAAA,CAEA,CAEA,IAAAC,EACAtC,EAAAo+B,KAAA,YAAAp+B,EAAAo+B,KAAA,CACAp+B,EAAAo+B,KAAA,CAAA97B,KAAA,CACAtC,EAAAo+B,KAAA,CAOA,KAAAC,SAAA,CAAAr+B,EAAAq+B,SAAA,EAAAxxB,KAAAA,EAOA,KAAAyxB,KAAA,CAAAt+B,EAAAs+B,KAAA,EAAAzxB,KAAAA,EAOA,KAAA7K,MAAA,CAAAM,EAAAA,EAAAN,MAAA,CAAA6K,KAAAA,EAWA,KAAA6xB,KAAA,CAAA7xB,KAAAA,EAOA,KAAA8xB,IAAA,IAQA,KAAAJ,OAAA,CAAAt7B,EAOA,KAAAV,IAAA,CAAAD,EAAAA,EAAAC,IAAA,CAAAsK,KAAAA,EASA,KAAA5M,IAAA,CAAgB29B,EAAiB59B,EAAAo+B,KAAA,SAOjC,KAAAA,KAAA,CAAAp+B,EAAAo+B,KAAA,EAAAvxB,KAAAA,EAOA,KAAA5J,MAAA,MAAAs7B,OAAA,CAOA,KAAAC,MAAA,CAAAx+B,EAAAw+B,MAAA,EAAA3xB,KAAAA,EAOA,KAAAlK,MAAA,CAAA3C,EAAA2C,MAAA,EAAAkK,KAAAA,EAWA,KAAA+xB,KAAA,CACAT,GAAAn+B,EAAAs+B,KAAA,mBAAAt+B,EAAAs+B,KAAA,CAAAM,KAAA,CACA5+B,EAAAs+B,KAAA,CAAAM,KAAA,CACA,GAYA,KAAAC,MAAA,CAAAhyB,KAAAA,EAOA,KAAAiyB,QAAA,CAAAjyB,KAAAA,EAOA,KAAAkyB,IAAA,CAAAlyB,KAAAA,EAUA,KAAAmyB,GAAA,CAAAnyB,KAAAA,CACA,CACA,CAEAkxB,EAAAl/B,SAAA,CAAA8/B,IAAA,IACAZ,EAAAl/B,SAAA,CAAAoB,IAAA,IACA89B,EAAAl/B,SAAA,CAAAoE,MAAA,IACA86B,EAAAl/B,SAAA,CAAA0/B,OAAA,IACAR,EAAAl/B,SAAA,CAAA+/B,KAAA,IACAb,EAAAl/B,SAAA,CAAAmD,MAAA,CAAA6K,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAA0D,IAAA,CAAAsK,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAAw/B,SAAA,CAAAxxB,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAAy/B,KAAA,CAAAzxB,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAA6/B,KAAA,CAAA7xB,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAAu/B,KAAA,CAAAvxB,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAA2/B,MAAA,CAAA3xB,KAAAA,EACAkxB,EAAAl/B,SAAA,CAAA8D,MAAA,CAAAkK,KAAAA,ECnSA,IAAAoyB,EAAA,GAAcngC,cAAA,CAGdogC,GAAA,IAAA/xB,IAEMgyB,GAAG,SAaTC,GAAA,IAAAC,IAAA,wCAEAC,GAAA,IAAAD,IAAA,aAEAE,GAAA,0DAwFA,SAAA7uB,GAAA8uB,CAAA,CAAAh9B,CAAA,CAAA9C,CAAA,QACA,YAAA8C,EAAA0B,IAAA,CACWu7B,SAoCKD,CAAA,CAAAh9B,CAAA,CAAA9C,CAAA,EAChB,IAAAggC,EAAAF,EAAAG,MAAA,CACAA,EAAAD,CAEA,SAAAl9B,EAAAo9B,OAAA,CAAAn3B,WAAA,IAAAi3B,SAAAA,EAAAlqB,KAAA,GACAmqB,EAAa1C,EACbuC,EAAAG,MAAA,CAAAA,GAGAH,EAAAnB,SAAA,CAAAj7B,IAAA,CAAAZ,GAEA,IAAA0B,EAAA27B,GAAAL,EAAAh9B,EAAAo9B,OAAA,KACA91B,EAAAg2B,SAkPAN,CAAA,CAAAh9B,CAAA,MAIAu9B,EAEAx7B,EAJA,IAAAuF,EAAA,GAMA,IAAAvF,KAAA/B,EAAA0U,UAAA,CACA,GAAA3S,aAAAA,GAAA06B,EAAA1/B,IAAA,CAAAiD,EAAA0U,UAAA,CAAA3S,GAAA,CACA,IAAAwM,EAAAivB,SAuJAR,CAAA,CAAAj7B,CAAA,CAAAnE,CAAA,EACA,IAAAiX,EAAe4oB,SNhiBRN,CAAA,CAAAv/B,CAAA,EACP,IAAAmV,EAAiBM,EAASzV,GAC1BsE,EAAAtE,EACA8/B,EAAapqB,EAEb,GAAAP,KAAAoqB,EAAApqB,MAAA,CACA,OAAAoqB,EAAAj7B,QAAA,CAAAi7B,EAAApqB,MAAA,CAAAA,EAAA,EAGA,GAAAA,EAAAtU,MAAA,IAAAsU,SAAAA,EAAA/R,KAAA,OAAA45B,EAAA50B,IAAA,CAAApI,GAAA,CAEA,GAAAA,MAAAA,EAAA2D,MAAA,KAEA,IAAAo8B,EAAA//B,EAAAoD,KAAA,IAAA3B,OAAA,CAAAs7B,EAAAI,GACA74B,EAAA,OAAAy7B,EAAAp8B,MAAA,IAAAqE,WAAA,GAAA+3B,EAAA38B,KAAA,GACA,KAAM,CAEN,IAAA28B,EAAA//B,EAAAoD,KAAA,IAEA,IAAA25B,EAAA30B,IAAA,CAAA23B,GAAA,CACA,IAAAC,EAAAD,EAAAt+B,OAAA,CAAAq7B,EAAAG,EAEA,OAAA+C,EAAAr8B,MAAA,KACAq8B,CAAAA,EAAA,IAAAA,CAAA,EAGAhgC,EAAA,OAAAggC,CACA,CACA,CAEAF,EAAWppB,CACX,CAEA,WAAAopB,EAAAx7B,EAAAtE,EACA,EM8fmBo/B,EAAAG,MAAA,CAAAp7B,GAGnB,IACAnE,CAAAA,MAAAA,GAEA,iBAAAA,GAAA6R,OAAAouB,KAAA,CAAAjgC,EAAA,GAYA,GAPAd,MAAAF,OAAA,CAAAgB,IAGAA,CAAAA,EAAAiX,EAAAlB,cAAA,CAAkCmqB,SzB5hB3B5zB,CAAA,CAAA1M,CAAA,EACP,IAAAyQ,EAAA,GAKA,MAAA8vB,CAFA7zB,KAAAA,CAAA,CAAAA,EAAAzL,MAAA,QAAAyL,EAAA,IAAAA,CAAA,EAGAuE,IAAA,CACA,CAAAR,EAAA+vB,QAAA,SACA,IACA/vB,CAAAA,CAAA,IAAAA,EAAAgwB,OAAA,UAEA9+B,IAAA,EACA,EyB+gBwCvB,GJlkBxCsM,EAAAuE,IAAA,MAAAtP,IAAA,EIkkBwD,EAIxD0V,UAAAA,EAAA3S,QAAA,EACA,IAAAkE,EACA,iBAAAxI,EAAAA,EAAAsgC,SA6BAlB,CAAA,CAAAp/B,CAAA,EACA,IACA,OAAWugC,EAASvgC,EAAA,CAASsI,YAAA,IAC7B,CAAI,MAAA5F,EAAA,CACJ,GAAA08B,EAAAoB,kBAAA,CACA,SAIA,IAAArC,EAAA,IAAwBR,EAAY,kCACpCM,UAAAmB,EAAAnB,SAAA,CACAC,MAHoCx7B,EAIpC07B,OAAA,QACA77B,OAAA,0BACA,EAIA,OAHA47B,EAAAI,IAAA,CAAAa,EAAAqB,QAAA,EAAAh0B,KAAAA,EACA0xB,EAAAS,GAAA,CAAAO,GAAA,gCAEAhB,CACA,CACA,EAjDAiB,EAAApsB,OAAAhT,IAMA,MAJA,QAAAo/B,EAAAsB,qBAAA,EACAl4B,CAAAA,EAAAm4B,SA2IAC,CAAA,MAIAjxB,EAFA,IAAAkxB,EAAA,GAIA,IAAAlxB,KAAAixB,EACA/B,EAAA1/B,IAAA,CAAAyhC,EAAAjxB,IACAkxB,CAAAA,CAAA,CAAAC,SAaAnxB,CAAA,EACA,IAAAsrB,EAAAtrB,EAAAlO,OAAA,CAAwBs9B,GAAGgC,IAG3B,MADA,QAAA9F,EAAA73B,KAAA,OAAA63B,CAAAA,EAAA,IAAAA,CAAA,EACAA,CACA,EAlBAtrB,GAAA,CAAAixB,CAAA,CAAAjxB,EAAA,EAIA,OAAAkxB,CACA,EAxJAr4B,EAAA,EAGA,SAAAA,EAAA,CAGA,OACA42B,UAAAA,EAAA4B,wBAAA,EAAA/pB,EAAA7B,KAAA,CACQgoB,CAAW,CAAAnmB,EAAA3S,QAAA,GAAA2S,EAAA3S,QAAA,CACnB2S,EAAAtB,SAAA,CACA3V,EACA,CACA,EA3LAo/B,EAAAj7B,EAAA/B,EAAA0U,UAAA,CAAA3S,EAAA,EAEA,GAAAwM,EAAA,CACA,IAAArR,EAAAU,EAAA,CAAA2Q,CAGAyuB,CAAAA,EAAA6B,qBAAA,EACA3hC,UAAAA,GACA,iBAAAU,GACAk/B,GAAA7vB,GAAA,CAAAjN,EAAAo9B,OAAA,EAEAG,EAAA3/B,EAEA0J,CAAA,CAAApK,EAAA,CAAAU,CAEA,CACA,CAUA,OAPA2/B,GAGAj+B,CAAAA,CADoCgI,EAAAhI,KAAA,EAAAgI,CAAAA,EAAAhI,KAAA,IAAoC,CACxE,CAAA09B,QAAAA,EAAAsB,qBAAA,2BACAf,CAAA,EAGAj2B,CACA,EAvRA01B,EAAAh9B,GACAmI,EAAA22B,GAAA9B,EAAAh9B,GAeA,OAbA48B,GAAA3vB,GAAA,CAAAjN,EAAAo9B,OAAA,GACAj1B,CAAAA,EAAAA,EAAAsF,MAAA,UAAA5C,CAAA,EACA,uBAAAA,GAAA,CvBvKA,kBuBuKoDA,EvBtKpDk0B,SAAAA,EAAAr9B,IAAA,EACAmR,EAAAksB,EAAAnhC,KAAA,EAEAiV,EuBmKoDhI,EvBnKpD,CuBoKA,EAAK,EAGLm0B,GAAAhC,EAAA11B,EAAA5F,EAAA1B,GACAi/B,GAAA33B,EAAAa,GAGA60B,EAAAnB,SAAA,CAAAqD,GAAA,GACAlC,EAAAG,MAAA,CAAAD,EAEAF,EAAAvoB,MAAA,CAAAzU,EAAA0B,EAAA4F,EAAApK,EACA,EAjEkB8/B,EAAAh9B,EAAA9C,GAGlB8C,sBAAAA,EAAA0B,IAAA,EAAA1B,sBAAAA,EAAA0B,IAAA,CACAy9B,SAyEAnC,CAAA,CAAAh9B,CAAA,EACA,GAAAA,EAAAqa,IAAA,EAAAra,EAAAqa,IAAA,CAAA+kB,MAAA,EAAApC,EAAAqC,SAAA,EAEA,IAAAC,EAAAC,EADAllB,IAAA,CAAA+kB,MAAA,CACAI,IAAA,IAIA,MAHI,GAAAC,EAAAj5B,EAAA,EAAM84B,wBAAAA,EAAA59B,IAAA,EAIVs7B,EAAAqC,SAAA,CAAAK,kBAAA,CAAAJ,EAAAA,UAAA,CAEA,CAEAK,GAAA3C,EAAAh9B,EAAAH,QAAA,CACA,EAtFAm9B,EAAAh9B,GAGAA,sBAAAA,EAAA0B,IAAA,EAAA1B,sBAAAA,EAAA0B,IAAA,CACAk+B,SAqHA5C,CAAA,CAAAh9B,CAAA,CAAA9C,CAAA,EACA,IAAAggC,EAAAF,EAAAG,MAAA,CACAA,EAAAD,CAEA,SAAAl9B,EAAAvC,IAAA,EAAAy/B,SAAAA,EAAAlqB,KAAA,GACAmqB,EAAa1C,EACbuC,EAAAG,MAAA,CAAAA,GAGAH,EAAAnB,SAAA,CAAAj7B,IAAA,CAAAZ,GAEA,IAAA0B,EACA1B,OAAAA,EAAAvC,IAAA,CACAu/B,EAAArwB,QAAA,CACA0wB,GAAAL,EAAAh9B,EAAAvC,IAAA,KACA6J,EAAAu4B,SAuMA7C,CAAA,CAAAh9B,CAAA,EAEA,IAAAsH,EAAA,GAEA,QAAAiM,KAAAvT,EAAA+U,UAAA,CACA,GAAAxB,8BAAAA,EAAA7R,IAAA,EACA,GAAA6R,EAAA8G,IAAA,EAAA9G,EAAA8G,IAAA,CAAA+kB,MAAA,EAAApC,EAAAqC,SAAA,EAEA,IAAAC,EAAAC,EADAllB,IAAA,CAAA+kB,MAAA,CACAI,IAAA,IACQ,GAAAC,EAAAj5B,EAAA,EAAM84B,wBAAAA,EAAA59B,IAAA,EACd,IAAAo+B,EAAAR,EAAAA,UAAA,CACQ,GAAAG,EAAAj5B,EAAA,EAAMs5B,qBAAAA,EAAAp+B,IAAA,EACd,IAAAQ,EAAA49B,EAAAprB,UAAA,IACQ,GAAA+qB,EAAAj5B,EAAA,EAAMtE,kBAAAA,EAAAR,IAAA,EAEdtF,OAAAgX,MAAA,CACA9L,EACA01B,EAAAqC,SAAA,CAAAK,kBAAA,CAAAx9B,EAAA69B,QAAA,EAEA,MACAJ,GAAA3C,EAAAh9B,EAAAH,QAAA,MAEM,KAINjC,EAFA,IAAAH,EAAA8V,EAAA9V,IAAA,CAIA,GAAA8V,EAAA3V,KAAA,mBAAA2V,EAAA3V,KAAA,EACA,GACA2V,EAAA3V,KAAA,CAAAyc,IAAA,EACA9G,EAAA3V,KAAA,CAAAyc,IAAA,CAAA+kB,MAAA,EACApC,EAAAqC,SAAA,CACA,CAEA,IAAAC,EAAAC,EADA3hC,KAAA,CAAAyc,IAAA,CAAA+kB,MAAA,CACAI,IAAA,IACU,GAAAC,EAAAj5B,EAAA,EAAM84B,wBAAAA,EAAA59B,IAAA,EAChB9D,EAAAo/B,EAAAqC,SAAA,CAAAK,kBAAA,CAAAJ,EAAAA,UAAA,CACA,MACAK,GAAA3C,EAAAh9B,EAAAH,QAAA,OAGAjC,EAAA2V,OAAAA,EAAA3V,KAAA,EAAA2V,EAAA3V,KAAA,CAIA0J,CAAA,CAAA7J,EAAA,CAAmDG,CACnD,CAGA,OAAA0J,CACA,EA1PA01B,EAAAh9B,GACAmI,EAAA22B,GAAA9B,EAAAh9B,GASA,OAPAg/B,GAAAhC,EAAA11B,EAAA5F,EAAA1B,GACAi/B,GAAA33B,EAAAa,GAGA60B,EAAAnB,SAAA,CAAAqD,GAAA,GACAlC,EAAAG,MAAA,CAAAD,EAEAF,EAAAvoB,MAAA,CAAAzU,EAAA0B,EAAA4F,EAAApK,EACA,EA/IA8/B,EAAAh9B,EAAA9C,GAGA8C,aAAAA,EAAA0B,IAAA,CACAs+B,SA0FAhD,CAAA,CAAAh9B,CAAA,EACA,GAAAA,EAAAqa,IAAA,EAAAra,EAAAqa,IAAA,CAAA+kB,MAAA,EAAApC,EAAAqC,SAAA,CAEA,OACArC,EAAAqC,SAAA,CAAAY,eAAA,CAAAjgC,EAAAqa,IAAA,CAAA+kB,MAAA,EAIAO,GAAA3C,EAAAh9B,EAAAH,QAAA,CACA,EAnGAm9B,EAAAh9B,GAGAA,SAAAA,EAAA0B,IAAA,CACAw+B,SAqJAlD,CAAA,CAAAh9B,CAAA,CAAA9C,CAAA,EAEA,IAAAoK,EAAA,GAIA,OAFA23B,GAAA33B,EAAAw3B,GAAA9B,EAAAh9B,IAEAg9B,EAAAvoB,MAAA,CAAAzU,EAAAg9B,EAAArwB,QAAA,CAAArF,EAAApK,EACA,EA5JA8/B,EAAAh9B,EAAA9C,GAGA8C,SAAAA,EAAA0B,IAAA,CAsKA1B,EAAApC,KAAA,OAnKA,CAoLA,SAAAohC,GAAAhC,CAAA,CAAA11B,CAAA,CAAA5F,CAAA,CAAA1B,CAAA,EAEA,iBAAA0B,GAAAA,IAAAs7B,EAAArwB,QAAA,EAAAqwB,EAAAmD,QAAA,EACA74B,CAAAA,EAAAtH,IAAA,CAAAA,CAAA,CAEA,CAYA,SAAAi/B,GAAA33B,CAAA,CAAAa,CAAA,EACA,GAAAA,EAAA1J,MAAA,IACA,IAAAb,EAAAuK,EAAA1J,MAAA,GAAA0J,EAAAA,CAAA,IAEAvK,GACA0J,CAAAA,EAAAa,QAAA,CAAAvK,CAAA,CAEA,CACA,CA+KA,SAAAkhC,GAAA9B,CAAA,CAAAh9B,CAAA,EAEA,IAAAmI,EAAA,GACAqG,EAAA,GAIA4xB,EAAApD,EAAAqD,QAAA,KAAA11B,IAAA+xB,GAEA,OAAAluB,EAAAxO,EAAAmI,QAAA,CAAA1J,MAAA,OAGAvB,EAFA,IAAA2N,EAAA7K,EAAAmI,QAAA,CAAAqG,EAAA,CAIA,GAAAwuB,EAAAqD,QAAA,EACA,IAAA5iC,EACAoN,YAAAA,EAAAnJ,IAAA,CACAmJ,EAAAuyB,OAAA,CACAvyB,sBAAAA,EAAAnJ,IAAA,EACAmJ,sBAAAA,EAAAnJ,IAAA,CACAmJ,EAAApN,IAAA,CACA4M,KAAAA,EAEA,GAAA5M,EAAA,CACA,IAAA6iC,EAAAF,EAAAjzB,GAAA,CAAA1P,IAAA,EACAP,EAAAO,EAAA,IAAA6iC,EACAF,EAAAp2B,GAAA,CAAAvM,EAAA6iC,EAAA,EACA,CACA,CAEA,IAAA/xB,EAAAL,GAAA8uB,EAAAnyB,EAAA3N,EACAmN,MAAAA,IAAAkE,GAAApG,EAAAvH,IAAA,CAAA2N,EACA,CAEA,OAAApG,CACA,CAkGA,SAAAk1B,GAAAL,CAAA,CAAAv/B,CAAA,CAAA8iC,CAAA,EAEA,IAAAhyB,EAEA,GAAAgyB,GAEI,GAAA9iC,EAAAiQ,QAAA,WAIJ1N,EAHA,IAAAwgC,EAAA/iC,EAAAgjC,KAAA,MACAjyB,EAAA,GAIA,OAAAA,EAAAgyB,EAAA/hC,MAAA,GAEA,IAAAsD,EAAmB4Q,EAAgB6tB,CAAA,CAAAhyB,EAAA,EACnC,CAAW9M,KAAA,aAAAjE,KAAA+iC,CAAA,CAAAhyB,EAAA,EACX,CAAW9M,KAAA,UAAA9D,MAAA4iC,CAAA,CAAAhyB,EAAA,EACXxO,EAAAA,EACA,CACA0B,KAAA,mBACAsmB,OAAAhoB,EACAkC,SAAAH,EACA2+B,SAAAC,CAAAA,CAAAnyB,CAAAA,GAAAzM,YAAAA,EAAAL,IAAA,EACAk/B,SAAA,EACA,EACA7+B,CACA,CAEI,GAAA09B,EAAAj5B,EAAA,EAAMxG,EAAA,mBACVuO,EAAAvO,CACA,MACAuO,EACMoE,EAAgBlV,IAAA,UAAAuI,IAAA,CAAAvI,GACtB,CAAWiE,KAAA,aAAAjE,KAAAA,CAAA,EACX,CAAWiE,KAAA,UAAA9D,MAAAH,CAAA,OA7BX8Q,EAAA,CAAc7M,KAAA,UAAA9D,MAAAH,CAAA,EAkCd,GAAA8Q,YAAAA,EAAA7M,IAAA,EACA,IAAAjE,EAA6C8Q,EAAA3Q,KAAA,CAC7C,OAAA6+B,EAAA1/B,IAAA,CAAAigC,EAAA6D,UAAA,CAAApjC,GAAAu/B,EAAA6D,UAAA,CAAApjC,EAAA,CAAAA,CACA,CAGA,GAAAu/B,EAAAqC,SAAA,CACA,OAAArC,EAAAqC,SAAA,CAAAK,kBAAA,CAAAnxB,GAGAoxB,GAAA3C,EACA,CAOA,SAAA2C,GAAA3C,CAAA,CAAApB,CAAA,EACA,IAAAG,EAAA,IAAsBR,EACtB,sDACA,CACAM,UAAAmB,EAAAnB,SAAA,CACAD,MAAAA,EACAI,OAAA,aACA77B,OAAA,0BACA,EAKA,OAHA47B,EAAAI,IAAA,CAAAa,EAAAqB,QAAA,EAAAh0B,KAAAA,EACA0xB,EAAAS,GAAA,CAAAO,GAAA,qDAEAhB,CACA,CA4CA,SAAA4C,GAAA7D,CAAA,EACA,UAAAA,EAAA70B,WAAA,EACA,CC1wBO,IAAA66B,GAAA,CACPjoB,OAAA,SACAe,KAAA,+BACAS,KAAA,WACAa,WAAA,mBACAQ,KAAA,2BACAqlB,KAAA,aACA1kB,OAAA,KACAY,SAAA,SACAsG,KAAA,aACAM,OAAA,UACA1lB,IAAA,CACA,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,QACA,kDCAO,OAAA6iC,GAOP3jC,YAAA+L,CAAA,EAEA,KAAArB,IAAA,CAAAqB,EAAA,IAAAA,EAAA,IAEA,KAAA0I,KAAA,IAYA3E,IAAAqB,CAAA,EACA,GAAAA,EAAA,GAAAA,GAAA,KAAAzG,IAAA,CAAAtJ,MAAA,MAAAqT,KAAA,CAAArT,MAAA,CACA,yCAAA+P,EAAA,uCAAAzG,IAAA,CAAAtJ,MAAA,MAAAqT,KAAA,CAAArT,MAAA,cAEA,OAAAsJ,IAAA,CAAAtJ,MAAA,MAAAsJ,IAAA,CAAAyG,EAAA,CACA,KAAAsD,KAAA,MAAAA,KAAA,CAAArT,MAAA,CAAA+P,EAAA,KAAAzG,IAAA,CAAAtJ,MAAA,IAOA,IAAAA,QAAA,CACA,YAAAsJ,IAAA,CAAAtJ,MAAA,MAAAqT,KAAA,CAAArT,MAAA,CAUAwiC,OAAA,CAEA,OADA,KAAAC,SAAA,IACA,KAAApvB,KAAA,CAAAotB,GAAA,EACA,CAaAl+B,MAAAlB,CAAA,CAAAI,CAAA,EAEA,IAAAihC,EAAAjhC,MAAAA,EAAAuP,OAAAC,iBAAA,CAAAxP,SACA,OAAA6H,IAAA,CAAAtJ,MAAA,CACA,KAAAsJ,IAAA,CAAA/G,KAAA,CAAAlB,EAAAqhC,GAEArhC,EAAA,KAAAiI,IAAA,CAAAtJ,MAAA,CACA,KAAAqT,KAAA,CAAA9Q,KAAA,MAAA8Q,KAAA,CAAArT,MAAA,CAAA0iC,EAAA,KAAAp5B,IAAA,CAAAtJ,MAAA,MAAAqT,KAAA,CAAArT,MAAA,CAAAqB,EAAA,KAAAiI,IAAA,CAAAtJ,MAAA,EAAA2iC,OAAA,GAEA,KAAAr5B,IAAA,CAAA/G,KAAA,CAAAlB,GAAAiG,MAAA,MAAA+L,KAAA,CAAA9Q,KAAA,MAAA8Q,KAAA,CAAArT,MAAA,CAAA0iC,EAAA,KAAAp5B,IAAA,CAAAtJ,MAAA,EAAA2iC,OAAA,GACA,CAsBArzB,OAAAjO,CAAA,CAAAuhC,CAAA,CAAArwB,CAAA,EAGA,KAAAkwB,SAAA,CAAAI,KAAAC,KAAA,CAAAzhC,IACA,IAAA0hC,EAAA,KAAA1vB,KAAA,CAAA/D,MAAA,MAAA+D,KAAA,CAAArT,MAAA,CAFA4iC,CAAAA,GAAA,GAEA5xB,OAAAC,iBAAA,EAEA,OADAsB,GAAAywB,GAAA,KAAA15B,IAAA,CAAAiJ,GACAwwB,EAAAJ,OAAA,EACA,CAUAlC,KAAA,CAEA,OADA,KAAAgC,SAAA,CAAAzxB,OAAAC,iBAAA,EACA,KAAA3H,IAAA,CAAAm3B,GAAA,EACA,CAWAt+B,KAAA8gC,CAAA,EACA,KAAAR,SAAA,CAAAzxB,OAAAC,iBAAA,EACA,KAAA3H,IAAA,CAAAnH,IAAA,CAAA8gC,EACA,CAWAC,SAAA3wB,CAAA,EACA,KAAAkwB,SAAA,CAAAzxB,OAAAC,iBAAA,EACA+xB,GAAA,KAAA15B,IAAA,CAAAiJ,EACA,CAWAG,QAAAuwB,CAAA,EACA,KAAAR,SAAA,IACA,KAAApvB,KAAA,CAAAlR,IAAA,CAAA8gC,EACA,CAWAE,YAAA5wB,CAAA,EACA,KAAAkwB,SAAA,IACAO,GAAA,KAAA3vB,KAAA,CAAAd,EAAAowB,OAAA,GACA,CAcAF,UAAAW,CAAA,EACA,GAAAA,IAAA,KAAA95B,IAAA,CAAAtJ,MAAA,EAAAojC,CAAAA,CAAAA,CAAAA,EAAA,KAAA95B,IAAA,CAAAtJ,MAAA,YAAAqT,KAAA,CAAArT,MAAA,GAAAojC,CAAAA,CAAAA,CAAAA,EAAA,aAAA95B,IAAA,CAAAtJ,MAAA,GACA,GAAAojC,EAAA,KAAA95B,IAAA,CAAAtJ,MAAA,EAEA,IAAA+iC,EAAA,KAAAz5B,IAAA,CAAAgG,MAAA,CAAA8zB,EAAApyB,OAAAC,iBAAA,EACA+xB,GAAA,KAAA3vB,KAAA,CAAA0vB,EAAAJ,OAAA,GACA,KAAM,CAEN,IAAAI,EAAA,KAAA1vB,KAAA,CAAA/D,MAAA,MAAAhG,IAAA,CAAAtJ,MAAA,MAAAqT,KAAA,CAAArT,MAAA,CAAAojC,EAAApyB,OAAAC,iBAAA,EACA+xB,GAAA,KAAA15B,IAAA,CAAAy5B,EAAAJ,OAAA,GACA,EACA,CACA,CAcA,SAAAK,GAAA3wB,CAAA,CAAAgB,CAAA,EAEA,IAAAZ,EAAA,EACA,GAAAY,EAAArT,MAAA,KACAqS,EAAAlQ,IAAA,IAAAkR,QAEA,KAAAZ,EAAAY,EAAArT,MAAA,EACAqS,EAAAlQ,IAAA,IAAAkR,EAAA9Q,KAAA,CAAAkQ,EAAAA,EAAA,MACAA,GAAA,GAGA,CCvOO,SAAA4wB,GAAAC,CAAA,MAKP9a,EAEA+a,EAEAC,EAEAC,EAEAjxB,EAEAkxB,EAEAC,EAfA,IAAAC,EAAA,GACA7zB,EAAA,GAeA8D,EAAA,IAAqB0uB,GAAYe,GACjC,OAAAvzB,EAAA8D,EAAA7T,MAAA,GACA,KAAA+P,CAAAA,KAAA6zB,CAAA,GACA7zB,EAAA6zB,CAAA,CAAA7zB,EAAA,CAMA,GAJAyY,EAAA3U,EAAAnF,GAAA,CAAAqB,GAIAA,GAAAyY,cAAAA,CAAA,IAAAvlB,IAAA,EAAA4Q,mBAAAA,EAAAnF,GAAA,CAAAqB,EAAA,MAAA9M,IAAA,GAEAugC,CAAAA,EAAA,GACAE,CAFAA,EAAAlb,CAAA,IAAAqb,UAAA,CAAAhwB,MAAA,EAEA7T,MAAA,EAAA0jC,oBAAAA,CAAA,CAAAF,EAAA,IAAAvgC,IAAA,EACAugC,CAAAA,GAAA,GAEAA,EAAAE,EAAA1jC,MAAA,EAAA0jC,YAAAA,CAAA,CAAAF,EAAA,IAAAvgC,IAAA,EACA,KACA,EADAugC,EAAAE,EAAA1jC,MAAA,EACA0jC,YAAAA,CAAA,CAAAF,EAAA,IAAAvgC,IAAA,EAGA,cAAAygC,CAAA,CAAAF,EAAA,IAAAvgC,IAAA,GACAygC,CAAA,CAAAF,EAAA,IAAAM,2BAAA,IACAN,KAOA,GAAAhb,UAAAA,CAAA,IACAA,CAAA,IAAAub,WAAA,GACApmC,OAAAgX,MAAA,CAAAivB,EAAAI,SAsDAnwB,CAAA,CAAAowB,CAAA,MAmBAC,EAEAC,EApBA,IAAAC,EAAAvwB,EAAAnF,GAAA,CAAAu1B,EAAA,IACA74B,EAAAyI,EAAAnF,GAAA,CAAAu1B,EAAA,IACAI,EAAAJ,EAAA,EAEAK,EAAA,GACAC,EAAAH,EAAAP,UAAA,EACAU,IACAA,EAAAn5B,EAAAo5B,MAAA,CAAAJ,EAAAL,WAAA,EAAAK,EAAA/iC,KAAA,EACA+iC,EAAAK,wBAAA,EACAF,CAAAA,EAAAE,wBAAA,MAGA,IAAAC,EAAAH,EAAA1wB,MAAA,CAEA+vB,EAAA,GAEAe,EAAA,GAKA50B,EAAA,GAEAxH,EAAA67B,EACAQ,EAAA,EACAvjC,EAAA,EACAwjC,EAAA,CADA,EACA,CAIA,KAAAt8B,GAAA,CAEA,KAAAsL,EAAAnF,GAAA,GAAA21B,EAAA,MAAA97B,IAGA+7B,EAAAniC,IAAA,CAAAkiC,GACA,CAAA97B,EAAAs7B,UAAA,GACAK,EAAA94B,EAAA05B,WAAA,CAAAv8B,GACAA,EAAAw8B,IAAA,EACAb,EAAA/hC,IAAA,OAEAgiC,GACAI,EAAAS,UAAA,CAAAz8B,EAAAlH,KAAA,EAEAkH,EAAAu7B,2BAAA,EACAS,CAAAA,EAAAU,kCAAA,KAEAV,EAAAW,KAAA,CAAAhB,GACA37B,EAAAu7B,2BAAA,EACAS,CAAAA,EAAAU,kCAAA,CAAAr5B,KAAAA,CAAA,GAKAu4B,EAAA57B,EACAA,EAAAA,EAAAw8B,IAAA,CAMA,IADAx8B,EAAA67B,EACA,EAAAr0B,EAAA20B,EAAA1kC,MAAA,EAGA,SAAA0kC,CAAA,CAAA30B,EAAA,KAAA20B,UAAAA,CAAA,CAAA30B,EAAA,OAAA20B,CAAA,CAAA30B,EAAA,IAAA9M,IAAA,GAAAyhC,CAAA,CAAA30B,EAAA,MAAA9M,IAAA,EAAAyhC,CAAA,CAAA30B,EAAA,IAAA1O,KAAA,CAAAC,IAAA,GAAAojC,CAAA,CAAA30B,EAAA,IAAAtO,GAAA,CAAAH,IAAA,GACAD,EAAA0O,EAAA,EACA80B,EAAA1iC,IAAA,CAAAd,GAEAkH,EAAAs7B,UAAA,CAAAj4B,KAAAA,EACArD,EAAA47B,QAAA,CAAAv4B,KAAAA,EACArD,EAAAA,EAAAw8B,IAAA,EAqBA,IAhBAR,EAAA1wB,MAAA,IAKAtL,GAEAA,EAAAs7B,UAAA,CAAAj4B,KAAAA,EACArD,EAAA47B,QAAA,CAAAv4B,KAAAA,GAEAi5B,EAAApE,GAAA,GAKA1wB,EAAA80B,EAAA7kC,MAAA,CACA+P,KAAA,CACA,IAAAxN,EAAAmiC,EAAAniC,KAAA,CAAAsiC,CAAA,CAAA90B,EAAA,CAAA80B,CAAA,CAAA90B,EAAA,IACA1O,EAAAijC,EAAA7D,GAAA,GACAmD,EAAAzhC,IAAA,EAAAd,EAAAA,EAAAkB,EAAAvC,MAAA,KACA6T,EAAAvE,MAAA,CAAAjO,EAAA,EAAAkB,EACA,CAGA,IAFAqhC,EAAAjB,OAAA,GACA5yB,EAAA,GACA,EAAAA,EAAA6zB,EAAA5jC,MAAA,EACA2kC,CAAA,CAAAC,EAAAhB,CAAA,CAAA7zB,EAAA,KAAA60B,EAAAhB,CAAA,CAAA7zB,EAAA,IACA60B,GAAAhB,CAAA,CAAA7zB,EAAA,IAAA6zB,CAAA,CAAA7zB,EAAA,MAEA,OAAA40B,CACA,EA/JA9wB,EAAA9D,IACAA,EAAA6zB,CAAA,CAAA7zB,EAAA,CACA4zB,EAAA,SAIA,GAAAnb,CAAA,IAAA2c,UAAA,EAGA,IAFA3B,EAAAzzB,EACAwzB,EAAA33B,KAAAA,EACA43B,KAEA,GAAAC,eAAAA,CADAA,EAAA5vB,EAAAnF,GAAA,CAAA80B,EAAA,CACA,IAAAvgC,IAAA,EAAAwgC,oBAAAA,CAAA,IAAAxgC,IAAA,CACA,UAAAwgC,CAAA,MACAF,GACA1vB,CAAAA,EAAAnF,GAAA,CAAA60B,EAAA,IAAAtgC,IAAA,oBAEAwgC,CAAA,IAAAxgC,IAAA,cACAsgC,EAAAC,QAEU,GAAAC,eAAAA,CAAA,IAAAxgC,IAAA,EAAAwgC,mBAAAA,CAAA,IAAAxgC,IAAA,OAGV,MAGAsgC,IAEA/a,CAAA,IAAA/mB,GAAA,EACA,GAAAoS,EAAAnF,GAAA,CAAA60B,EAAA,IAAAliC,KAAA,EAKAmR,CADAA,EAAAqB,EAAAtR,KAAA,CAAAghC,EAAAxzB,EAAA,EACA2C,OAAA,CAAA8V,GACA3U,EAAAvE,MAAA,CAAAi0B,EAAAxzB,EAAAwzB,EAAA,EAAA/wB,GAEA,CACA,CAIA,MADE,GAAA4yB,GAAAvhC,CAAA,EAAMy/B,EAAA,EAAAtyB,OAAAC,iBAAA,CAAA4C,EAAAtR,KAAA,KACR,CAAAohC,CACA,sCEjGO,IAAAhiC,GAAA,CACPwO,SASA,SAAAC,CAAA,MAGA+zB,EAFA,IAAAkB,EAAAj1B,EAAAk1B,OAAA,MAAAd,MAAA,CAAAlxB,UAAA,CAAAiyB,cAAA,CAMA,SAAAj1B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAF,EAAAe,OAAA,CAAAb,GACA,MACA,CAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACW,GAAAo0B,GAAA90B,CAAA,EAAYN,EAAAi1B,EAAA,aACvB,EAGA,SAAA/0B,CAAA,EAEA,OADAF,EAAAc,KAAA,cACAu0B,SAIAA,EAAAn1B,CAAA,EACA,IAAA8zB,EAAAh0B,EAAAc,KAAA,cACA6yB,YAAA,OACAI,SAAAA,CACA,GAKA,OAJAA,GACAA,CAAAA,EAAAY,IAAA,CAAAX,CAAA,EAEAD,EAAAC,EACAxoB,SAIAA,EAAAtL,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAF,EAAAgB,IAAA,cACAhB,EAAAgB,IAAA,cACAhB,EAAAe,OAAA,CAAAb,GACA,MACA,OACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,cACAq0B,IAIAr1B,EAAAe,OAAA,CAAAb,GACAsL,EACA,EApBAtL,EACA,EAdAA,EACA,GAlBA,OAAA+0B,CAmDA,CA/DA,ECQaM,GAAQ,CACrBx1B,SAcA,SAAAC,CAAA,MAMAw1B,EAEAC,EAEAC,EATA,IAAAC,EAAA,KAEApI,EAAA,GACAqI,EAAA,EAOA,OAAA3kC,EAGA,SAAAA,EAAAiP,CAAA,EAWA,GAAA01B,EAAArI,EAAA39B,MAAA,EACA,IAAAijC,EAAAtF,CAAA,CAAAqI,EAAA,CAEA,OADAD,EAAAE,cAAA,CAAAhD,CAAA,IACA7yB,EAAAk1B,OAAA,CAAArC,CAAA,IAAAiD,YAAA,CAAAC,EAAAC,GAAA91B,EACA,CAGA,OAAA81B,EAAA91B,EACA,CAGA,SAAA61B,EAAA71B,CAAA,EAMA,GALA01B,IAKAD,EAAAE,cAAA,CAAAI,UAAA,MAWA5J,CAVAsJ,CAAAA,EAAAE,cAAA,CAAAI,UAAA,CAAAz6B,KAAAA,EACAg6B,GACAU,IAKA,IAAAC,EAAAR,EAAAlyB,MAAA,CAAA7T,MAAA,CACAwmC,EAAAD,EAKA,KAAAC,KACA,GAAAT,SAAAA,EAAAlyB,MAAA,CAAA2yB,EAAA,KAAAT,cAAAA,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAAvjC,IAAA,EACAw5B,EAAAsJ,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAA/kC,GAAA,CACA,KACA,CAEAglC,EAAAT,GAGA,IAAAj2B,EAAAw2B,EACA,KAAAx2B,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,EACA+lC,EAAAlyB,MAAA,CAAA9D,EAAA,IAAAtO,GAAA,EACA,GAAAg7B,CAAA,EAEA1sB,IAQA,MAJM,GAAAq1B,GAAAvhC,CAAA,EAAMkiC,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAAT,EAAAlyB,MAAA,CAAAtR,KAAA,CAAAgkC,IAGZR,EAAAlyB,MAAA,CAAA7T,MAAA,CAAA+P,EACAq2B,EAAA91B,EACA,CACA,OAAAjP,EAAAiP,EACA,CAGA,SAAA81B,EAAA91B,CAAA,EAMA,GAAA01B,IAAArI,EAAA39B,MAAA,EAIA,IAAA4lC,EACA,OAAAc,EAAAp2B,GAMA,GAAAs1B,EAAAe,gBAAA,EAAAf,EAAAe,gBAAA,CAAAC,QAAA,CACA,OAAAC,EAAAv2B,EAQAy1B,CAAAA,EAAAe,SAAA,CAAA5E,CAAAA,CAAA0D,CAAAA,EAAAe,gBAAA,GAAAf,EAAAmB,6BAAA,CACA,CAIA,OADAhB,EAAAE,cAAA,IACA71B,EAAA2F,KAAA,CAAAixB,GAAAC,EAAAC,GAAA52B,EACA,CAGA,SAAA22B,EAAA32B,CAAA,EAGA,OAFAs1B,GAAAU,IACAG,EAAAT,GACAU,EAAAp2B,EACA,CAGA,SAAA42B,EAAA52B,CAAA,EAGA,OAFAy1B,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EAAA0kC,IAAArI,EAAA39B,MAAA,CACA8lC,EAAAC,EAAAqB,GAAA,GAAA/Q,MAAA,CACAwQ,EAAAv2B,EACA,CAGA,SAAAo2B,EAAAp2B,CAAA,EAGA,OADAy1B,EAAAE,cAAA,IACA71B,EAAAk1B,OAAA,CAAA0B,GAAAK,EAAAR,GAAAv2B,EACA,CAGA,SAAA+2B,EAAA/2B,CAAA,EAIA,OAHA01B,IACArI,EAAAx7B,IAAA,EAAA4jC,EAAAY,gBAAA,CAAAZ,EAAAE,cAAA,GAEAS,EAAAp2B,EACA,CAGA,SAAAu2B,EAAAv2B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAs1B,GAAAU,IACAG,EAAA,GACAr2B,EAAAe,OAAA,CAAAb,GACA,MACA,CAOA,OANAs1B,EAAAA,GAAAG,EAAAvB,MAAA,CAAA8C,IAAA,CAAAvB,EAAAqB,GAAA,IACAh3B,EAAAc,KAAA,cACA2yB,WAAA+B,EACA7B,YAAA,OACAI,SAAA0B,CACA,GACA0B,SAIAA,EAAAj3B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAk3B,EAAAp3B,EAAAgB,IAAA,kBACAq1B,EAAA,GACAr2B,EAAAe,OAAA,CAAAb,GACA,MACA,OACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAe,OAAA,CAAAb,GACAk3B,EAAAp3B,EAAAgB,IAAA,eAEA40B,EAAA,EACAD,EAAAe,SAAA,CAAAl7B,KAAAA,EACAvK,IAEA+O,EAAAe,OAAA,CAAAb,GACAi3B,EACA,EArBAj3B,EACA,CA8BA,SAAAk3B,EAAApD,CAAA,CAAAqD,CAAA,EACA,IAAAvD,EAAA6B,EAAAjB,WAAA,CAAAV,GAyCA,GAxCAqD,GAAAvD,EAAA/hC,IAAA,OACAiiC,EAAAD,QAAA,CAAA0B,EACAA,GAAAA,CAAAA,EAAAd,IAAA,CAAAX,CAAA,EACAyB,EAAAzB,EACAwB,EAAAZ,UAAA,CAAAZ,EAAA/iC,KAAA,EACAukC,EAAAV,KAAA,CAAAhB,GAmCA6B,EAAAvB,MAAA,CAAA2C,IAAA,CAAA/C,EAAA/iC,KAAA,CAAAC,IAAA,GACA,IAoBAomC,EAEAjL,EAtBA1sB,EAAA61B,EAAA/xB,MAAA,CAAA7T,MAAA,CACA,KAAA+P,KACA,GAEA61B,EAAA/xB,MAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,CAAAyP,GAEA,EAAAF,EAAA/xB,MAAA,CAAA9D,EAAA,IAAAtO,GAAA,EAEAmkC,EAAA/xB,MAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAyP,CAAA,EAGA,OAMA,IAAAS,EAAAR,EAAAlyB,MAAA,CAAA7T,MAAA,CACAwmC,EAAAD,EAOA,KAAAC,KACA,GAAAT,SAAAA,EAAAlyB,MAAA,CAAA2yB,EAAA,KAAAT,cAAAA,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAAvjC,IAAA,EACA,GAAAykC,EAAA,CACAjL,EAAAsJ,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAA/kC,GAAA,CACA,KACA,CACAimC,EAAA,EACA,CAMA,IAJAjB,EAAAT,GAGAj2B,EAAAw2B,EACAx2B,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,EACA+lC,EAAAlyB,MAAA,CAAA9D,EAAA,IAAAtO,GAAA,EACA,GAAAg7B,CAAA,EAEA1sB,IAIM,GAAAq1B,GAAAvhC,CAAA,EAAMkiC,EAAAlyB,MAAA,CAAA2yB,EAAA,IAAAT,EAAAlyB,MAAA,CAAAtR,KAAA,CAAAgkC,IAGZR,EAAAlyB,MAAA,CAAA7T,MAAA,CAAA+P,CACA,CACA,CAQA,SAAA02B,EAAAz9B,CAAA,EACA,IAAA+G,EAAA4tB,EAAA39B,MAAA,CAGA,KAAA+P,KAAA/G,GAAA,CACA,IAAA2+B,EAAAhK,CAAA,CAAA5tB,EAAA,CACAg2B,EAAAE,cAAA,CAAA0B,CAAA,IACAA,CAAA,IAAAv2B,IAAA,CAAA9S,IAAA,CAAAynC,EAAA31B,EACA,CACAutB,EAAA39B,MAAA,CAAAgJ,CACA,CACA,SAAAs9B,IACAV,EAAAV,KAAA,SACAW,EAAAj6B,KAAAA,EACAg6B,EAAAh6B,KAAAA,EACAm6B,EAAAE,cAAA,CAAAI,UAAA,CAAAz6B,KAAAA,CACA,CACA,CApUA,EAGAo7B,GAAA,CACA72B,SAwUA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EAGA,MAAS,GAAAm1B,GAAA90B,CAAA,EAAYN,EAAAA,EAAAk1B,OAAA,MAAAd,MAAA,CAAAlxB,UAAA,CAAApJ,QAAA,CAAAnC,EAAAsI,GAAA,kBAAAm0B,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,EACrB,CA3UA,iBCZO,IAAMk8B,GAAO,CACpB/zB,QAgBA,SAAAF,CAAA,EAEA,OADEwvB,GAAWxvB,GACbA,CACA,EAlBA1D,SAyBA,SAAAC,CAAA,CAAArI,CAAA,EAEA,IAAAo8B,EACA,OAYA,SAAA7zB,CAAA,EAKA,OAJAF,EAAAc,KAAA,YACAizB,EAAA/zB,EAAAc,KAAA,iBACA6yB,YAAA,SACA,GACAgE,EAAAz3B,EACA,EAYA,SAAAy3B,EAAAz3B,CAAA,SACA,OAAAA,EACA03B,EAAA13B,GAKQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC1BF,EAAA2F,KAAA,CAAAkyB,GAAAC,EAAAF,GAAA13B,IAIAF,EAAAe,OAAA,CAAAb,GACAy3B,EACA,CAOA,SAAAC,EAAA13B,CAAA,EAGA,OAFAF,EAAAgB,IAAA,iBACAhB,EAAAgB,IAAA,YACArJ,EAAAuI,EACA,CAOA,SAAA43B,EAAA53B,CAAA,EAQA,OAPAF,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,iBACA+yB,EAAAY,IAAA,CAAA30B,EAAAc,KAAA,iBACA6yB,YAAA,UACAI,SAAAA,CACA,GACAA,EAAAA,EAAAY,IAAA,CACAgD,CACA,CACA,CAnGA,EAGAE,GAAA,CACA/3B,QAAA,GACAC,SAqGA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAOA,SAAAz1B,CAAA,EAKA,OAJAF,EAAAgB,IAAA,iBACAhB,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACW,GAAAo0B,GAAA90B,CAAA,EAAYN,EAAA+3B,EAAA,aACvB,EAOA,SAAAA,EAAA73B,CAAA,EACA,GAAAA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC3C,OAAAD,EAAAC,GAKA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,UACA,CAAA+lC,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,kBAAAm5B,GAAAA,eAAAA,CAAA,IAAAnlC,IAAA,EAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,IACA+H,EAAAuI,GAEAF,EAAA02B,SAAA,CAAAf,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAg0B,IAAA,CAAAj3B,EAAAtI,GAAAuI,EACA,CACA,CAvIA,ECdOg3B,GAAA,CACPn3B,SASA,SAAAC,CAAA,EACA,IAAA21B,EAAA,KACAp7B,EAAAyF,EAAAk1B,OAAA,CAEEgD,GAAAC,CAAS,CAMX,SAAAj4B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAF,EAAAe,OAAA,CAAAb,GACA,MACA,CAKA,OAJAF,EAAAc,KAAA,oBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,oBACA20B,EAAAY,gBAAA,CAAA/6B,KAAAA,EACAjB,CACA,EAdAyF,EAAAk1B,OAAA,MAAAd,MAAA,CAAAlxB,UAAA,CAAAk1B,WAAA,CAAAC,EAAsE,GAAAjD,GAAA90B,CAAA,EAAYN,EAAAA,EAAAk1B,OAAA,MAAAd,MAAA,CAAAlxB,UAAA,CAAAg0B,IAAA,CAAAmB,EAAAr4B,EAAAk1B,OAAA,CAAuFwC,GAAOW,IAAA,gBAChL,OAAA99B,EAgBA,SAAA89B,EAAAn4B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAF,EAAAe,OAAA,CAAAb,GACA,MACA,CAKA,OAJAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACA20B,EAAAY,gBAAA,CAAA/6B,KAAAA,EACAjB,CACA,CACA,CA1CA,ECJO+9B,GAAA,CACP90B,WAAA+0B,IACA,EACOrP,GAAAsP,GAAA,UACMC,GAAID,GAAA,QAQjB,SAAAA,GAAAE,CAAA,EACA,OACAl1B,WAAA+0B,GAAAG,SAAAA,EAAAC,GAAAn9B,KAAAA,GACAuE,SAQA,SAAAC,CAAA,EACA,IAAA21B,EAAA,KACAzyB,EAAA,KAAAkxB,MAAA,CAAAlxB,UAAA,CAAAw1B,EAAA,CACA9e,EAAA5Z,EAAAk1B,OAAA,CAAAhyB,EAAAjS,EAAA2nC,GACA,OAAA3nC,EAGA,SAAAA,EAAAiP,CAAA,EACA,OAAA24B,EAAA34B,GAAA0Z,EAAA1Z,GAAA04B,EAAA14B,EACA,CAGA,SAAA04B,EAAA14B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAF,EAAAe,OAAA,CAAAb,GACA,MACA,CAGA,OAFAF,EAAAc,KAAA,SACAd,EAAAe,OAAA,CAAAb,GACAsL,CACA,CAGA,SAAAA,EAAAtL,CAAA,SACA,EAAAA,IACAF,EAAAgB,IAAA,SACA4Y,EAAA1Z,KAIAF,EAAAe,OAAA,CAAAb,GACAsL,EACA,CAQA,SAAAqtB,EAAA34B,CAAA,EACA,GAAAA,OAAAA,EACA,SAEA,IAAA+B,EAAAiB,CAAA,CAAAhD,EAAA,CACAP,EAAA,GACA,GAAAsC,EAGA,OAAAtC,EAAAsC,EAAArS,MAAA,GACA,IAAAijC,EAAA5wB,CAAA,CAAAtC,EAAA,CACA,IAAAkzB,EAAAkB,QAAA,EAAAlB,EAAAkB,QAAA,CAAA7lC,IAAA,CAAAynC,EAAAA,EAAA5B,QAAA,EACA,QAEA,CAEA,QACA,CACA,CAjEA,CAkEA,CAQA,SAAAwE,GAAAO,CAAA,EACA,OAGA,SAAAr1B,CAAA,CAAAzI,CAAA,EACA,IAEA8F,EAFAnB,EAAA,GAMA,OAAAA,GAAA8D,EAAA7T,MAAA,EACAkR,KAAAtF,IAAAsF,EACA2C,CAAA,CAAA9D,EAAA,EAAA8D,SAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,GACAiO,EAAAnB,EACAA,KAEQ8D,CAAA,CAAA9D,EAAA,EAAA8D,SAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,GAER8M,IAAAmB,EAAA,IACA2C,CAAA,CAAA3C,EAAA,IAAAzP,GAAA,CAAAoS,CAAA,CAAA9D,EAAA,MAAAtO,GAAA,CACAoS,EAAAvE,MAAA,CAAA4B,EAAA,EAAAnB,EAAAmB,EAAA,GACAnB,EAAAmB,EAAA,GAEAA,EAAAtF,KAAAA,GAGA,OAAAs9B,EAAAA,EAAAr1B,EAAAzI,GAAAyI,CACA,CACA,CAaA,SAAAk1B,GAAAl1B,CAAA,CAAAzI,CAAA,EACA,IAAA64B,EAAA,EAEA,OAAAA,GAAApwB,EAAA7T,MAAA,EACA,IAAAikC,IAAApwB,EAAA7T,MAAA,EAAA6T,eAAAA,CAAA,CAAAowB,EAAA,IAAAhhC,IAAA,GAAA4Q,SAAAA,CAAA,CAAAowB,EAAA,MAAAhhC,IAAA,MAOAkmC,EANA,IAAAvtB,EAAA/H,CAAA,CAAAowB,EAAA,MACAmF,EAAAh+B,EAAA05B,WAAA,CAAAlpB,GACA7L,EAAAq5B,EAAAppC,MAAA,CACAqpC,EAAA,GACArgC,EAAA,EAGA,KAAA+G,KAAA,CACA,IAAAu5B,EAAAF,CAAA,CAAAr5B,EAAA,CACA,oBAAAu5B,EAAA,CAEA,IADAD,EAAAC,EAAAtpC,MAAA,CACAspC,KAAAA,EAAAC,UAAA,CAAAF,EAAA,IACArgC,IACAqgC,IAEA,GAAAA,EAAA,MACAA,EAAA,EACA,MAEA,GAAAC,KAAAA,EACAH,EAAA,GACAngC,SACU,GAAAsgC,KAAAA,OAEA,CAEVv5B,IACA,KACA,CACA,CAMA,GAHA3E,EAAAq5B,wBAAA,EAAAR,IAAApwB,EAAA7T,MAAA,EACAgJ,CAAAA,EAAA,GAEAA,EAAA,CACA,IAAAo7B,EAAA,CACAnhC,KAAAghC,IAAApwB,EAAA7T,MAAA,EAAAmpC,GAAAngC,EAAA,mCACA3H,MAAA,CACAmoC,aAAAz5B,EAAAs5B,EAAAztB,EAAAva,KAAA,CAAAmoC,YAAA,CAAAH,EACAI,OAAA7tB,EAAAva,KAAA,CAAAooC,MAAA,CAAA15B,EACAzO,KAAAsa,EAAAna,GAAA,CAAAH,IAAA,CACAP,OAAA6a,EAAAna,GAAA,CAAAV,MAAA,CAAAiI,EACAqtB,OAAAza,EAAAna,GAAA,CAAA40B,MAAA,CAAArtB,CACA,EACAvH,IAAA,CACA,GAAAma,EAAAna,GAAA,CAEA,CACAma,CAAAA,EAAAna,GAAA,EACA,GAAA2iC,EAAA/iC,KAAA,EAEAua,EAAAva,KAAA,CAAAg1B,MAAA,GAAAza,EAAAna,GAAA,CAAA40B,MAAA,CACA14B,OAAAgX,MAAA,CAAAiH,EAAAwoB,IAEAvwB,EAAAvE,MAAA,CAAA20B,EAAA,WAAAG,EAAAh5B,EAAA,SAAAg5B,EAAAh5B,EAAA,EACA64B,GAAA,EAEA,CACAA,GACA,CAEA,OAAApwB,CACA,CCtMO,IAAA61B,GAAA,CACP1qC,KAAA,gBACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAEAs5B,EAFA3gC,EAAA,EAGA,OAYA,SAAAsH,CAAA,EAGA,OAFAF,EAAAc,KAAA,kBAgBAy4B,EAdAr5B,EAeA24B,SAaAA,EAAA34B,CAAA,SACA,IAAAq5B,GACAv5B,EAAAc,KAAA,0BACA04B,SAmBAA,EAAAt5B,CAAA,SACA,IAAAq5B,GACAv5B,EAAAe,OAAA,CAAAb,GACAtH,IACA4gC,IAEAx5B,EAAAgB,IAAA,0BACW,GAAAs0B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA64B,EAAA,cAAA34B,GAAA24B,EAAA34B,GAC7C,EA3BAA,IAEAtH,GAAA,GAAAsH,CAAAA,OAAAA,GAAuC,GAAAo1B,GAAA90B,EAAA,EAAkBN,EAAA,GACzDF,EAAAgB,IAAA,kBACArJ,EAAAuI,IAEAD,EAAAC,EACA,EAtCAA,EACA,CA0DA,CArFA,ECCO+B,GAAA,CACP6zB,aAAA,CACA/1B,SAiHA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KAEA,OADAA,EAAAE,cAAA,CAAAI,UAAA,CAAAz6B,KAAAA,EACAwE,EAAA2F,KAAA,CAAuBuyB,GAAAC,CAAS,CAGhC,SAAAj4B,CAAA,EAKA,OAJAy1B,EAAAE,cAAA,CAAA4D,iBAAA,CAAA9D,EAAAE,cAAA,CAAA4D,iBAAA,EAAA9D,EAAAE,cAAA,CAAA6D,gBAAA,CAIW,GAAAtE,GAAA90B,CAAA,EAAYN,EAAArI,EAAA,iBAAAg+B,EAAAE,cAAA,CAAAj9B,IAAA,IAAAsH,EACvB,EAGA,SAAAA,CAAA,SACA,EAAA21B,cAAA,CAAA4D,iBAAA,GAAkD,GAAAnE,GAAAl1B,EAAA,EAAaF,IAC/Dy1B,EAAAE,cAAA,CAAA4D,iBAAA,CAAAj+B,KAAAA,EACAm6B,EAAAE,cAAA,CAAA6D,gBAAA,CAAAl+B,KAAAA,EACAm+B,EAAAz5B,KAEAy1B,EAAAE,cAAA,CAAA4D,iBAAA,CAAAj+B,KAAAA,EACAm6B,EAAAE,cAAA,CAAA6D,gBAAA,CAAAl+B,KAAAA,EACAwE,EAAAk1B,OAAA,CAAA0E,GAAAjiC,EAAAgiC,GAAAz5B,GACA,GAGA,SAAAy5B,EAAAz5B,CAAA,EAOA,OALAy1B,EAAAE,cAAA,CAAAI,UAAA,IAEAN,EAAAe,SAAA,CAAAl7B,KAAAA,EAGW,GAAA45B,GAAA90B,CAAA,EAAYN,EAAAA,EAAAk1B,OAAA,CAAAjzB,GAAAtK,EAAAsI,GAAA,aAAA01B,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,GAAA0E,EACvB,CACA,CApJA,EACAc,KA0KA,SAAAhB,CAAA,EACAA,EAAAgB,IAAA,MAAA60B,cAAA,CAAAhjC,IAAA,CACA,EA3KAjE,KAAA,OACAmR,SAuBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACAqC,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACAiqC,EAAA7B,GAAAA,eAAAA,CAAA,IAAAnlC,IAAA,CAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,GACAgJ,EAAA,EACA,OAGA,SAAAsH,CAAA,EACA,IAAA2N,EAAA8nB,EAAAE,cAAA,CAAAhjC,IAAA,EAAAqN,CAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EAAA,+BACA,GAAA2N,kBAAAA,EAAA,CAAA8nB,EAAAE,cAAA,CAAA0D,MAAA,EAAAr5B,IAAAy1B,EAAAE,cAAA,CAAA0D,MAAA,CAAwG,GAAAjE,GAAAwE,EAAA,EAAU55B,GAAA,CAOlH,GANAy1B,EAAAE,cAAA,CAAAhjC,IAAA,GACA8iC,EAAAE,cAAA,CAAAhjC,IAAA,CAAAgb,EACA7N,EAAAc,KAAA,CAAA+M,EAAA,CACAknB,WAAA,EACA,IAEAlnB,kBAAAA,EAEA,OADA7N,EAAAc,KAAA,mBACAZ,KAAAA,GAAAA,KAAAA,EAAAF,EAAA2F,KAAA,CAA0D2zB,GAAar5B,EAAA85B,GAAA75B,GAAA65B,EAAA75B,GAEvE,IAAAy1B,EAAAe,SAAA,EAAAx2B,KAAAA,EAGA,OAFAF,EAAAc,KAAA,mBACAd,EAAAc,KAAA,kBACAk5B,SAOAA,EAAA95B,CAAA,QACA,CAAQ,EAAAo1B,GAAAwE,EAAA,EAAU55B,IAAA,EAAAtH,EAAA,IAClBoH,EAAAe,OAAA,CAAAb,GACA85B,GAEA,EAAArE,EAAAe,SAAA,EAAA99B,EAAA,IAAA+8B,CAAAA,EAAAE,cAAA,CAAA0D,MAAA,CAAAr5B,IAAAy1B,EAAAE,cAAA,CAAA0D,MAAA,CAAAr5B,KAAAA,GAAAA,KAAAA,CAAA,GACAF,EAAAgB,IAAA,kBACA+4B,EAAA75B,IAEAD,EAAAC,EACA,EAjBAA,EAEA,CACA,OAAAD,EAAAC,EACA,EAkBA,SAAA65B,EAAA75B,CAAA,EAKA,OAJAF,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACA20B,EAAAE,cAAA,CAAA0D,MAAA,CAAA5D,EAAAE,cAAA,CAAA0D,MAAA,EAAAr5B,EACAF,EAAA2F,KAAA,CAAyBuyB,GAAAC,CAAS,CAElCxC,EAAAe,SAAA,CAAAz2B,EAAAg6B,EAAAj6B,EAAAk1B,OAAA,CAAAgF,GAAAC,EAAAC,GACA,CAGA,SAAAH,EAAA/5B,CAAA,EAGA,OAFAy1B,EAAAE,cAAA,CAAA6D,gBAAA,IACAG,IACAM,EAAAj6B,EACA,CAGA,SAAAk6B,EAAAl6B,CAAA,QACA,CAAQ,EAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAc,KAAA,6BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,6BACAm5B,GAEAl6B,EAAAC,EACA,CAGA,SAAAi6B,EAAAj6B,CAAA,EAEA,OADAy1B,EAAAE,cAAA,CAAAj9B,IAAA,CAAAihC,EAAAlE,EAAAsC,cAAA,CAAAj4B,EAAAgB,IAAA,uBAAApR,MAAA,CACA+H,EAAAuI,EACA,CACA,CArGA,EAGAg6B,GAAA,CACAp6B,QAAA,GACAC,SA2KA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KAIA,MAAS,GAAAP,GAAA90B,CAAA,EAAYN,EAGrB,SAAAE,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACA,OAAY,GAAA0lC,GAAAl1B,EAAA,EAAaF,IAAA83B,GAAAA,6BAAAA,CAAA,IAAAnlC,IAAA,CAAA8E,EAAAuI,GAAAD,EAAAC,EACzB,EANqB,2BAAAy1B,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,EAOrB,CAtLA,EAGAo+B,GAAA,CACA95B,QAAA,GACAC,SA4IA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,MAAS,GAAAP,GAAA90B,CAAA,EAAYN,EAGrB,SAAAE,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACA,OAAAooC,GAAAA,mBAAAA,CAAA,IAAAnlC,IAAA,EAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,GAAA+lC,EAAAE,cAAA,CAAAj9B,IAAA,CAAAjB,EAAAuI,GAAAD,EAAAC,EACA,EANqB,iBAAAy1B,EAAAE,cAAA,CAAAj9B,IAAA,GAOrB,CApJA,ECvBOyhC,GAAA,CACPvE,aAAA,CACA/1B,SAgFA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAeA,SAAAz1B,CAAA,QACA,CAAQ,EAAAo1B,GAAAl1B,EAAA,EAAaF,GAGR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAs6B,EAAA,aAAA3E,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,GAAA0E,GAEzBo6B,EAAAp6B,EACA,EAeA,SAAAo6B,EAAAp6B,CAAA,EACA,OAAAF,EAAAk1B,OAAA,CAAAmF,GAAA1iC,EAAAsI,GAAAC,EACA,CACA,CAzHA,EACAc,KA2HA,SAAAhB,CAAA,EACAA,EAAAgB,IAAA,cACA,EA5HApS,KAAA,aACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,EACA,GAAAA,KAAAA,EAAA,CACA,IAAAiuB,EAAAwH,EAAAE,cAAA,CAWA,OAVA1H,EAAA5Z,IAAA,GACAvU,EAAAc,KAAA,eACAi0B,WAAA,EACA,GACA5G,EAAA5Z,IAAA,KAEAvU,EAAAc,KAAA,qBACAd,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACAT,CACA,CACA,OAAAN,EAAAC,EACA,EAYA,SAAAK,EAAAL,CAAA,QACA,CAAQ,EAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAc,KAAA,+BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,+BACAhB,EAAAgB,IAAA,qBACArJ,IAEAqI,EAAAgB,IAAA,qBACArJ,EAAAuI,GACA,CACA,CA5DA,ECsBO,SAAAq6B,GAAAv6B,CAAA,CAAArI,CAAA,CAAAsI,CAAA,CAAApN,CAAA,CAAA2nC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAj6B,CAAA,EACP,IAAAC,EAAAD,GAAAE,OAAAC,iBAAA,CACA+5B,EAAA,EACA,OAcA,SAAA16B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,CAAAjO,GACAmN,EAAAc,KAAA,CAAA05B,GACAx6B,EAAAc,KAAA,CAAA25B,GACAz6B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAy5B,GACAI,GAIA36B,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAAwF,EAAA,EAAY56B,GACnED,EAAAC,IAEAF,EAAAc,KAAA,CAAAjO,GACAmN,EAAAc,KAAA,CAAA45B,GACA16B,EAAAc,KAAA,CAAA65B,GACA36B,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACAoH,EAAA76B,GACA,EAYA,SAAA26B,EAAA36B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,CAAA25B,GACAz6B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAy5B,GACAz6B,EAAAgB,IAAA,CAAAw5B,GACAx6B,EAAAgB,IAAA,CAAAnO,GACA8E,IAEAqI,EAAAc,KAAA,CAAA65B,GACA36B,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACAqH,EAAA96B,GACA,CAYA,SAAA86B,EAAA96B,CAAA,SACA,KAAAA,GACAF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,CAAA25B,GACAE,EAAA36B,IAEAA,OAAAA,GAAAA,KAAAA,GAAwC,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC1DD,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAA+6B,EAAAD,EACA,CAYA,SAAAC,EAAA/6B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA86B,GAEAA,EAAA96B,EACA,CAYA,SAAA66B,EAAA76B,CAAA,QACA,CAAA06B,GAAA16B,CAAAA,OAAAA,GAAAA,KAAAA,GAAqD,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,EAAA,GAC9EF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,CAAA25B,GACA36B,EAAAgB,IAAA,CAAA05B,GACA16B,EAAAgB,IAAA,CAAAnO,GACA8E,EAAAuI,IAEA06B,EAAAj6B,GAAAT,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA06B,IACAG,GAEA76B,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA06B,IACAG,GAMA76B,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAAwF,EAAA,EAAY56B,GACnED,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAAg7B,EAAAH,EACA,CAYA,SAAAG,EAAAh7B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA66B,GAEAA,EAAA76B,EACA,CACA,CCpKO,SAAAi7B,GAAAn7B,CAAA,CAAArI,CAAA,CAAAsI,CAAA,CAAApN,CAAA,CAAAuoC,CAAA,CAAAT,CAAA,MAIPrD,EAHA,IAAA3B,EAAA,KACA/8B,EAAA,EAGA,OAYA,SAAAsH,CAAA,EAMA,OALAF,EAAAc,KAAA,CAAAjO,GACAmN,EAAAc,KAAA,CAAAs6B,GACAp7B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAo6B,GACAp7B,EAAAc,KAAA,CAAA65B,GACA9B,CACA,EAYA,SAAAA,EAAA34B,CAAA,SACA,OAAAA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAA,CAAAo3B,GAMAp3B,KAAAA,GAAA,CAAAtH,GAAA,2BAAA+8B,EAAAvB,MAAA,CAAAlxB,UAAA,CACAjD,EAAAC,GAEAA,KAAAA,GACAF,EAAAgB,IAAA,CAAA25B,GACA36B,EAAAc,KAAA,CAAAs6B,GACAp7B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAo6B,GACAp7B,EAAAgB,IAAA,CAAAnO,GACA8E,GAIQ,GAAA29B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACA63B,IAEA74B,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACA0H,EAAAn7B,GACA,CAYA,SAAAm7B,EAAAn7B,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAAAtH,IAAA,KACzEoH,EAAAgB,IAAA,gBACA63B,EAAA34B,KAEAF,EAAAe,OAAA,CAAAb,GACAo3B,GAAAA,CAAAA,EAAA,CAAuB,GAAAhC,GAAAl1B,EAAA,EAAaF,EAAA,EACpCA,KAAAA,EAAAo7B,EAAAD,EACA,CAYA,SAAAC,EAAAp7B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,IACAyiC,GAEAA,EAAAn7B,EACA,CACA,CCzGO,SAAAq7B,GAAAv7B,CAAA,CAAArI,CAAA,CAAAsI,CAAA,CAAApN,CAAA,CAAAuoC,CAAA,CAAAT,CAAA,EAEP,IAAApB,EACA,OAYA,SAAAr5B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAc,KAAA,CAAAjO,GACAmN,EAAAc,KAAA,CAAAs6B,GACAp7B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAo6B,GACA7B,EAAAr5B,KAAAA,EAAA,GAAAA,EACAwhB,GAEAzhB,EAAAC,EACA,EAcA,SAAAwhB,EAAAxhB,CAAA,SACA,IAAAq5B,GACAv5B,EAAAc,KAAA,CAAAs6B,GACAp7B,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,CAAAo6B,GACAp7B,EAAAgB,IAAA,CAAAnO,GACA8E,IAEAqI,EAAAc,KAAA,CAAA65B,GACA9B,EAAA34B,GACA,CAYA,SAAA24B,EAAA34B,CAAA,SACA,IAAAq5B,GACAv5B,EAAAgB,IAAA,CAAA25B,GACAjZ,EAAA6X,IAEAr5B,OAAAA,EACAD,EAAAC,GAIQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAE1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACa,GAAAo0B,GAAA90B,CAAA,EAAYN,EAAA64B,EAAA,gBAEzB74B,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACAqG,EAAA95B,GACA,CAOA,SAAA85B,EAAA95B,CAAA,SACA,IAAAq5B,GAAAr5B,OAAAA,GAA4C,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC9DF,EAAAgB,IAAA,gBACA63B,EAAA34B,KAEAF,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAAs7B,EAAAxB,EACA,CAYA,SAAAwB,EAAAt7B,CAAA,SACA,IAAAq5B,GAAAr5B,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA85B,GAEAA,EAAA95B,EACA,CACA,CCrIO,SAAAu7B,GAAAz7B,CAAA,CAAArI,CAAA,EAEP,IAAA2/B,EACA,OAGA,SAAArmC,EAAAiP,CAAA,QACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAs2B,EAAA,GACArmC,GAEQ,GAAAqkC,GAAAl1B,EAAA,EAAaF,GACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA/O,EAAAqmC,EAAA,2BAAAp3B,GAEzBvI,EAAAuI,EACA,CACA,gBCpBA,IAAAw7B,GAAA,CACA57B,QAAA,GACAC,SAuKA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAcA,SAAAC,CAAA,EACA,MAAW,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAASu7B,GAAiBz7B,EAAA27B,GAAAz7B,GAAAD,EAAAC,EAC9D,EAaA,SAAAy7B,EAAAz7B,CAAA,EACA,OAAWq7B,GAAYv7B,EAAA47B,EAAA37B,EAAA,mEAAAC,EACvB,CAYA,SAAA07B,EAAA17B,CAAA,EACA,MAAW,GAAAo1B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA67B,EAAA,cAAA37B,GAAA27B,EAAA37B,EAC7C,CAYA,SAAA27B,EAAA37B,CAAA,EACA,OAAAA,OAAAA,GAA4B,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAAAvI,EAAAuI,GAAAD,EAAAC,EAC9C,CACA,CAnOA,ECdO47B,GAAA,CACPltC,KAAA,eACAmR,SAcA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAgBA,SAAAz1B,CAAA,EAMA,OAHAF,EAAAc,KAAA,iBAGW,GAAAs0B,GAAA90B,CAAA,EAAYN,EAAA+7B,EAAA,gBAAA77B,EACvB,EAYA,SAAA67B,EAAA77B,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACA,OAAAooC,GAAAA,eAAAA,CAAA,IAAAnlC,IAAA,EAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,IAAAipC,SAaAA,EAAA34B,CAAA,SACA,OAAAA,EACAK,EAAAL,GAEQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC1BF,EAAAk1B,OAAA,CAAA8G,GAAAnD,EAAAt4B,GAAAL,IAEAF,EAAAc,KAAA,kBACAk5B,SAaAA,EAAA95B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,kBACA63B,EAAA34B,KAEAF,EAAAe,OAAA,CAAAb,GACA85B,EACA,EApBA95B,GACA,EAtBAA,GAAAD,EAAAC,EACA,CA2CA,SAAAK,EAAAL,CAAA,EAKA,OAJAF,EAAAgB,IAAA,iBAIArJ,EAAAuI,EACA,CACA,CAvGA,EAGA87B,GAAA,CACAl8B,QAAA,GACAC,SAyGA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAAAqG,EAaA,SAAAA,EAAA97B,CAAA,SAGA,EAAAk0B,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EACA+O,EAAAC,GAEQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAg7B,GASW,GAAA5G,GAAA90B,CAAA,EAAYN,EAAA+7B,EAAA,gBAAA77B,EACvB,CAYA,SAAA67B,EAAA77B,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACA,OAAAooC,GAAAA,eAAAA,CAAA,IAAAnlC,IAAA,EAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,IAAA+H,EAAAuI,GAAmH,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAAA87B,EAAA97B,GAAAD,EAAAC,EACrI,CACA,CA3JA,EEPO+7B,GAAA,CACPrtC,KAAA,kBACAstC,UAKA,SAAAz4B,CAAA,CAAAzI,CAAA,EAEA,IAEAzJ,EAEAqoB,EAEAtV,EANA3E,EAAA8D,EAAA7T,MAAA,CAUA,KAAA+P,KACA,GAAA8D,UAAAA,CAAA,CAAA9D,EAAA,KACA,GAAA8D,YAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACAtB,EAAAoO,EACA,KACA,CACA,cAAA8D,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACA+mB,CAAAA,EAAAja,CAAA,CAEA,KAGA,YAAA8D,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAEA4Q,EAAAvE,MAAA,CAAAS,EAAA,GAEA2E,GAAAb,eAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACAyR,CAAAA,EAAA3E,CAAA,EAIA,IAAAw8B,EAAA,CACAtpC,KAAA,gBACA5B,MAAA,CACA,GAAAwS,CAAA,CAAAlS,EAAA,IAAAN,KAAA,EAEAI,IAAA,CACA,GAAAoS,CAAA,CAAAA,EAAA7T,MAAA,OAAAyB,GAAA,CAEA,EAmBA,OAhBAoS,CAAA,CAAAmW,EAAA,IAAA/mB,IAAA,qBAIAyR,GACAb,EAAAvE,MAAA,CAAA0a,EAAA,WAAAuiB,EAAAnhC,EAAA,EACAyI,EAAAvE,MAAA,CAAAoF,EAAA,YAAAb,CAAA,CAAAlS,EAAA,IAAAyJ,EAAA,EACAyI,CAAA,CAAAlS,EAAA,IAAAF,GAAA,EACA,GAAAoS,CAAA,CAAAa,EAAA,IAAAjT,GAAA,GAGAoS,CAAA,CAAAlS,EAAA,IAAA4qC,EAIA14B,EAAA1R,IAAA,SAAAoqC,EAAAnhC,EAAA,EACAyI,CACA,EAjEA1D,SAwEA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAGAs5B,EAFA,IAAA5D,EAAA,KAGA,OAaA,SAAAz1B,CAAA,EACA,IAEAk8B,EAFAz8B,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,CAIA,KAAA+P,KAGA,GAAAg2B,eAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA8iC,eAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA8iC,YAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACAupC,EAAAzG,cAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,CACA,KACA,OAKA,CAAA8iC,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,GAAAykC,CAAAA,EAAAe,SAAA,EAAA0F,CAAA,GACAp8B,EAAAc,KAAA,sBACAy4B,EAAAr5B,EAkBAF,EAAAc,KAAA,8BACAk5B,SAcAA,EAAA95B,CAAA,SACA,IAAAq5B,GACAv5B,EAAAe,OAAA,CAAAb,GACA85B,IAEAh6B,EAAAgB,IAAA,8BACW,GAAAs0B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAO,EAAA,cAAAL,GAAAK,EAAAL,GAC7C,EAvCAA,IAEAD,EAAAC,EACA,EAiDA,SAAAK,EAAAL,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,sBACArJ,EAAAuI,IAEAD,EAAAC,EACA,CACA,CAtKA,ECHOm8B,GAAA,CACP,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,KACA,CAcOC,GAAA,oCCpEPC,GAAA,CACAz8B,QAAA,GACAC,SA6zBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAaA,SAAAC,CAAA,EAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAhB,EAAAk1B,OAAA,CAA2BgD,GAAAC,CAAS,CAAAxgC,EAAAsI,EACpC,CACA,CAh1BA,EACAu8B,GAAA,CACA18B,QAAA,GACAC,SA2wBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAaA,SAAAz1B,CAAA,QACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAT,GAEAN,EAAAC,EACA,EAaA,SAAAK,EAAAL,CAAA,EACA,OAAAy1B,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EAAA+O,EAAAC,GAAAvI,EAAAuI,EACA,CACA,CAjzBA,EClBAu8B,GAAA,CACA38B,QAAA,GACAC,SAiaA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAOA,SAAAz1B,CAAA,SACA,OAAAA,EACAD,EAAAC,IAEAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAq0B,EACA,EAOA,SAAAA,EAAAn1B,CAAA,EACA,OAAAy1B,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EAAA+O,EAAAC,GAAAvI,EAAAuI,EACA,CACA,CA3bA,EAGOw8B,GAAA,CACPlG,SAAA,GACA5nC,KAAA,aACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAUAs5B,EATA,IAAA5D,EAAA,KAEAgH,EAAA,CACA78B,QAAA,GACAC,SAiSA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAArH,EAAA,EACA,OAOA,SAAAsH,CAAA,EAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACA/P,CACA,EAcA,SAAAA,EAAAiP,CAAA,EAKA,OADAF,EAAAc,KAAA,oBACa,GAAAw0B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA48B,EAAA,aAAAjH,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,GAAA0E,GAAA08B,EAAA18B,EAC/C,CAcA,SAAA08B,EAAA18B,CAAA,SACA,IAAAq5B,GACAv5B,EAAAc,KAAA,4BACA+7B,SAiBAA,EAAA38B,CAAA,SACA,IAAAq5B,GACA3gC,IACAoH,EAAAe,OAAA,CAAAb,GACA28B,GAEAjkC,GAAAkkC,GACA98B,EAAAgB,IAAA,4BACe,GAAAs0B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA+8B,EAAA,cAAA78B,GAAA68B,EAAA78B,IAEjDD,EAAAC,EACA,EA5BAA,IAEAD,EAAAC,EACA,CAuCA,SAAA68B,EAAA78B,CAAA,SACA,OAAAA,GAA2B,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC7CF,EAAAgB,IAAA,oBACArJ,EAAAuI,IAEAD,EAAAC,EACA,CACA,CApYA,EACA88B,EAAA,EACAF,EAAA,EAGA,OAcA,SAAA58B,CAAA,EAEA,OAAA+8B,SAeA/8B,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IAMA,OALAotC,EAAAhF,GAAAA,eAAAA,CAAA,IAAAnlC,IAAA,CAAAmlC,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,GACA2pC,EAAAr5B,EACAF,EAAAc,KAAA,eACAd,EAAAc,KAAA,oBACAd,EAAAc,KAAA,4BACAo8B,SAeAA,EAAAh9B,CAAA,SACA,IAAAq5B,GACAuD,IACA98B,EAAAe,OAAA,CAAAb,GACAg9B,GAEAJ,EAAA,EACA78B,EAAAC,IAEAF,EAAAgB,IAAA,4BACW,GAAAs0B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAm9B,EAAA,cAAAj9B,GAAAi9B,EAAAj9B,GAC7C,EA1BAA,EACA,EAvBAA,EACA,EA6DA,SAAAi9B,EAAAj9B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,oBACA20B,EAAAe,SAAA,CAAA/+B,EAAAuI,GAAAF,EAAA2F,KAAA,CAAA82B,GAAAW,EAAA78B,GAAAL,KAEAF,EAAAc,KAAA,wBACAd,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACA3tB,SAeAA,EAAA9F,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,wBACAm8B,EAAAj9B,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,wBACa,GAAAo0B,GAAA90B,CAAA,EAAYN,EAAAq9B,EAAA,cAAAn9B,IAEzBA,KAAAA,GAAAA,IAAAq5B,EACAt5B,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACA8F,EACA,EA/BA9F,GACA,CA4CA,SAAAm9B,EAAAn9B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC3Ci9B,EAAAj9B,IAEAF,EAAAc,KAAA,wBACAd,EAAAc,KAAA,gBACA6yB,YAAA,QACA,GACA2J,SAeAA,EAAAp9B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,wBACAm8B,EAAAj9B,IAEAA,KAAAA,GAAAA,IAAAq5B,EACAt5B,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACAo9B,EACA,EA1BAp9B,GACA,CAwCA,SAAAk9B,EAAAl9B,CAAA,EACA,OAAAF,EAAAk1B,OAAA,CAAAyH,EAAAp8B,EAAAg9B,GAAAr9B,EACA,CAcA,SAAAq9B,EAAAr9B,CAAA,EAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAi0B,CACA,CAcA,SAAAA,EAAA/0B,CAAA,EACA,OAAA88B,EAAA,GAAgC,GAAA1H,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAw9B,EAAA,aAAAR,EAAA,GAAA98B,GAAAs9B,EAAAt9B,EAClE,CAcA,SAAAs9B,EAAAt9B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC3CF,EAAA2F,KAAA,CAAA82B,GAAAW,EAAA78B,GAAAL,IAEAF,EAAAc,KAAA,kBACA28B,SAeAA,EAAAv9B,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,kBACAw8B,EAAAt9B,KAEAF,EAAAe,OAAA,CAAAb,GACAu9B,EACA,EAtBAv9B,GACA,CAmCA,SAAAK,EAAAL,CAAA,EAEA,OADAF,EAAAgB,IAAA,eACArJ,EAAAuI,EACA,CA4GA,CAlZA,ECnBMw9B,GAAO5jC,SAAAC,aAAA,MAMN,SAAA4jC,GAAA5uC,CAAA,EACP,IAAA6uC,EAAA,IAAA7uC,EAAA,GACE2uC,CAAAA,GAAOG,SAAA,CAAAD,EACT,IAAA9mC,EAAoB4mC,GAAOI,WAAA,OAQ3B,CAGAhnC,KAAAA,EAAAqiC,UAAA,CAAAriC,EAAAlH,MAAA,KACAb,SAAAA,CAAA,GASA+H,IAAA8mC,GAAA9mC,CACA,CCtBO,IAAA8mC,GAAA,CACPhvC,KAAA,qBACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAIAS,EAEAvJ,EALA,IAAAw+B,EAAA,KACA/8B,EAAA,EAKA,OAgBA,SAAAsH,CAAA,EAKA,OAJAF,EAAAc,KAAA,uBACAd,EAAAc,KAAA,6BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,6BACAuT,CACA,EAiBA,SAAAA,EAAArU,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,oCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,oCACA+8B,IAEA/9B,EAAAc,KAAA,4BACAJ,EAAA,GACAvJ,EAAWm+B,GAAA0I,EAAiB,CAC5BjvC,EAAAmR,GACA,CAcA,SAAA69B,EAAA79B,CAAA,SACA,KAAAA,GAAAA,MAAAA,GACAF,EAAAc,KAAA,wCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,wCACAhB,EAAAc,KAAA,4BACAJ,EAAA,EACAvJ,EAAam+B,GAAA2I,EAAa,CAC1BlvC,IAEAiR,EAAAc,KAAA,4BACAJ,EAAA,EACAvJ,EAAWm+B,GAAAwE,EAAU,CACrB/qC,EAAAmR,GACA,CAmBA,SAAAnR,EAAAmR,CAAA,EACA,GAAAA,KAAAA,GAAAtH,EAAA,CACA,IAAAo7B,EAAAh0B,EAAAgB,IAAA,mCACA,IAAmBs0B,GAAA0I,EAAiB,EAAKL,GAA6BhI,EAAAsC,cAAA,CAAAjE,KAMtEh0B,EAAAc,KAAA,6BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,6BACAhB,EAAAgB,IAAA,uBACArJ,GATAsI,EAAAC,EAUA,QACA,EAAAA,IAAAtH,IAAA8H,GACAV,EAAAe,OAAA,CAAAb,GACAnR,GAEAkR,EAAAC,EACA,CACA,CApIA,ECLOg+B,GAAA,CACPtvC,KAAA,kBACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAYA,SAAAC,CAAA,EAKA,OAJAF,EAAAc,KAAA,oBACAd,EAAAc,KAAA,iBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,iBACAg5B,CACA,EAYA,SAAAA,EAAA95B,CAAA,QAEA,CAAQ,EAAAo1B,GAAA6I,EAAA,EAAgBj+B,IACxBF,EAAAc,KAAA,yBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,yBACAhB,EAAAgB,IAAA,oBACArJ,GAEAsI,EAAAC,EACA,CACA,CAjDA,ECFOk+B,GAAA,CACPxvC,KAAA,aACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,EACA,OAGA,SAAAuI,CAAA,EAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACW,GAAAo0B,GAAA90B,CAAA,EAAYN,EAAArI,EAAA,aACvB,CACA,CAjBA,gBCMO,IAAA0mC,GAAA,CACPzvC,KAAA,WACA4U,WAmBA,SAAAC,CAAA,EACA,IAAA9D,EAAA,GAEA2+B,EAAA,GACA,OAAA3+B,EAAA8D,EAAA7T,MAAA,GACA,IAAAokC,EAAAvwB,CAAA,CAAA9D,EAAA,IAEA,GADA2+B,EAAAvsC,IAAA,CAAA0R,CAAA,CAAA9D,EAAA,EACAq0B,eAAAA,EAAAnhC,IAAA,EAAAmhC,cAAAA,EAAAnhC,IAAA,EAAAmhC,aAAAA,EAAAnhC,IAAA,EAEA,IAAAozB,EAAA+N,eAAAA,EAAAnhC,IAAA,IACAmhC,CAAAA,EAAAnhC,IAAA,QACA8M,GAAAsmB,CACA,CACA,CAMA,OAHAxiB,EAAA7T,MAAA,GAAA0uC,EAAA1uC,MAAA,EACI,GAAAolC,GAAAvhC,CAAA,EAAMgQ,EAAA,EAAAA,EAAA7T,MAAA,CAAA0uC,GAEV76B,CACA,EAtCAy4B,UAyCA,SAAAz4B,CAAA,CAAAzI,CAAA,EACA,IAGAg5B,EAEAzf,EAEAgqB,EAEAjwB,EATA3O,EAAA8D,EAAA7T,MAAA,CACAq2B,EAAA,EAWA,KAAAtmB,KAEA,GADAq0B,EAAAvwB,CAAA,CAAA9D,EAAA,IACA4U,EAAA,CAEA,GAAAyf,SAAAA,EAAAnhC,IAAA,EAAAmhC,cAAAA,EAAAnhC,IAAA,EAAAmhC,EAAAwK,SAAA,CACA,KAKA,WAAA/6B,CAAA,CAAA9D,EAAA,KAAAq0B,cAAAA,EAAAnhC,IAAA,EACAmhC,CAAAA,EAAAwK,SAAA,IAEA,MAAM,GAAAD,EACN,IAAA96B,UAAAA,CAAA,CAAA9D,EAAA,KAAAq0B,CAAAA,eAAAA,EAAAnhC,IAAA,EAAAmhC,cAAAA,EAAAnhC,IAAA,IAAAmhC,EAAAyK,SAAA,GACAlqB,EAAA5U,EACAq0B,cAAAA,EAAAnhC,IAAA,GACAozB,EAAA,EACA,KACA,CACA,KACM,aAAA+N,EAAAnhC,IAAA,EACN0rC,CAAAA,EAAA5+B,CAAA,EAGA,IAAA++B,EAAA,CACA7rC,KAAA4Q,cAAAA,CAAA,CAAA8Q,EAAA,IAAA1hB,IAAA,gBACA5B,MAAA,CACA,GAAAwS,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,EAEAI,IAAA,CACA,GAAAoS,CAAA,CAAAA,EAAA7T,MAAA,OAAAyB,GAAA,CAEA,EACAyc,EAAA,CACAjb,KAAA,QACA5B,MAAA,CACA,GAAAwS,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,EAEAI,IAAA,CACA,GAAAoS,CAAA,CAAA86B,EAAA,IAAAltC,GAAA,CAEA,EACAuoB,EAAA,CACA/mB,KAAA,YACA5B,MAAA,CACA,GAAAwS,CAAA,CAAA8Q,EAAA0R,EAAA,MAAA50B,GAAA,EAEAA,IAAA,CACA,GAAAoS,CAAA,CAAA86B,EAAA,MAAAttC,KAAA,CAEA,EAuBA,OAtBAqd,EAAA,UAAAowB,EAAA1jC,EAAA,UAAA8S,EAAA9S,EAAA,EAGAsT,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAA7K,EAAAtR,KAAA,CAAAoiB,EAAA,EAAAA,EAAA0R,EAAA,IAGd3X,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAA,UAAAsL,EAAA5e,EAAA,GAKdsT,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAQ,GAAAswB,GAAAC,CAAA,EAAU7jC,EAAAo5B,MAAA,CAAAlxB,UAAA,CAAA47B,UAAA,CAAArH,IAAA,CAAAh0B,EAAAtR,KAAA,CAAAoiB,EAAA0R,EAAA,EAAAsY,EAAA,GAAAvjC,IAGhCsT,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAA,SAAAsL,EAAA5e,EAAA,CAAAyI,CAAA,CAAA86B,EAAA,GAAA96B,CAAA,CAAA86B,EAAA,WAAAzwB,EAAA9S,EAAA,GAGdsT,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAA7K,EAAAtR,KAAA,CAAAosC,EAAA,IAGdjwB,EAAU,GAAA0mB,GAAA2J,CAAA,EAAIrwB,EAAA,SAAAowB,EAAA1jC,EAAA,GACZ,GAAAg6B,GAAAvhC,CAAA,EAAMgQ,EAAA8Q,EAAA9Q,EAAA7T,MAAA,CAAA0e,GACR7K,CACA,EAhIA1D,SAuIA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAIA8+B,EAEAh6B,EALA,IAAA4wB,EAAA,KACAh2B,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,CAOA,KAAA+P,KACA,IAAAg2B,eAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA8iC,cAAAA,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,IAAA8iC,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA8+B,SAAA,EACAM,EAAApJ,EAAAlyB,MAAA,CAAA9D,EAAA,IACA,KACA,CAEA,OAiBA,SAAAO,CAAA,SAEA,EAaA6+B,EAAAP,SAAA,CACAQ,EAAA9+B,IAEA6E,EAAA4wB,EAAAvB,MAAA,CAAArvB,OAAA,CAAAlG,QAAA,CAA2C,GAAAogC,GAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,EAC9DhnC,MAAA8tC,EAAA1tC,GAAA,CACAA,IAAAskC,EAAAqB,GAAA,EACA,KACAh3B,EAAAc,KAAA,aACAd,EAAAc,KAAA,gBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,aACAT,GAxBAN,EAAAC,EAyBA,EAkBA,SAAAK,EAAAL,CAAA,SAKA,KAAAA,EACAF,EAAAk1B,OAAA,CAAAgK,GAAAC,EAAAp6B,EAAAo6B,EAAAH,GAAA9+B,GAIAA,KAAAA,EACAF,EAAAk1B,OAAA,CAAAkK,GAAAD,EAAAp6B,EAAAs6B,EAAAL,GAAA9+B,GAIA6E,EAAAo6B,EAAAj/B,GAAA8+B,EAAA9+B,EACA,CAgBA,SAAAm/B,EAAAn/B,CAAA,EACA,OAAAF,EAAAk1B,OAAA,CAAAoK,GAAAH,EAAAH,GAAA9+B,EACA,CAkBA,SAAAi/B,EAAAj/B,CAAA,EAEA,OAAAvI,EAAAuI,EACA,CAkBA,SAAA8+B,EAAA9+B,CAAA,EAEA,OADA6+B,EAAAN,SAAA,IACAx+B,EAAAC,EACA,CACA,CAjSA,EAGAg/B,GAAA,CACAn/B,SAoSA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAYA,SAAAC,CAAA,EAKA,OAJAF,EAAAc,KAAA,aACAd,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACAu+B,CACA,EAYA,SAAAA,EAAAr/B,CAAA,EACA,MAAW,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAASu7B,GAAiBz7B,EAAAw/B,GAAAt/B,GAAAs/B,EAAAt/B,EAC9D,CAYA,SAAAs/B,EAAAt/B,CAAA,SACA,KAAAA,EACAu/B,EAAAv/B,GAEWq6B,GAAkBv6B,EAAA0/B,EAAAC,EAAA,+IAAAz/B,EAC7B,CAYA,SAAAw/B,EAAAx/B,CAAA,EACA,MAAW,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAASu7B,GAAiBz7B,EAAA4/B,GAAA1/B,GAAAu/B,EAAAv/B,EAC9D,CAYA,SAAAy/B,EAAAz/B,CAAA,EACA,OAAAD,EAAAC,EACA,CAYA,SAAA0/B,EAAA1/B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACaq7B,GAAYv7B,EAAA6/B,EAAA5/B,EAAA,6DAAAC,GAEzBu/B,EAAAv/B,EACA,CAYA,SAAA2/B,EAAA3/B,CAAA,EACA,MAAW,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAASu7B,GAAiBz7B,EAAAy/B,GAAAv/B,GAAAu/B,EAAAv/B,EAC9D,CAYA,SAAAu/B,EAAAv/B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACAhB,EAAAgB,IAAA,aACArJ,GAEAsI,EAAAC,EACA,CACA,CAtaA,EAEAk/B,GAAA,CACAr/B,SA0aA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,EACA,OAAWi7B,GAAYjtC,IAAA,CAAAynC,EAAA31B,EAAA8/B,EAAAC,EAAA,iDAAA7/B,EACvB,EAYA,SAAA4/B,EAAA5/B,CAAA,EACA,OAAAy1B,EAAAvB,MAAA,CAAArvB,OAAA,CAAAlG,QAAA,CAAwC,GAAAogC,GAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,CAAAtC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,QAAAuC,KAAA,SAAAwF,EAAAuI,GAAAD,EAAAC,EAC3D,CAYA,SAAA6/B,EAAA7/B,CAAA,EACA,OAAAD,EAAAC,EACA,CACA,CAtdA,EAEAo/B,GAAA,CACAv/B,SA0dA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAcA,SAAAC,CAAA,EAOA,OAJAF,EAAAc,KAAA,cACAd,EAAAc,KAAA,oBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,oBACAg/B,CACA,EAcA,SAAAA,EAAA9/B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,oBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,oBACAhB,EAAAgB,IAAA,cACArJ,GAEAsI,EAAAC,EACA,CACA,CAxgBA,EC3BO+/B,GAAA,CACPrxC,KAAA,kBACA4U,WAAc66B,GAAQ76B,UAAA,CACtBzD,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,EAKA,OAJAF,EAAAc,KAAA,eACAd,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACAuT,CACA,EAYA,SAAAA,EAAArU,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,gBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,eACAT,GAEAN,EAAAC,EACA,CA6BA,SAAAK,EAAAL,CAAA,EAMA,OAAAA,KAAAA,GAAA,2BAAAy1B,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAjD,EAAAC,GAAAvI,EAAAuI,EACA,CACA,CArFA,iBCEO,IAAAggC,GAAA,CACPtxC,KAAA,YACA4U,WAUA,SAAAC,CAAA,CAAAzI,CAAA,EACA,IAEAuZ,EAEAmqB,EAEA9kB,EAEAumB,EAEAC,EAEAC,EAEAC,EAEAra,EAhBAtmB,EAAA,GAsBA,OAAAA,EAAA8D,EAAA7T,MAAA,EAEA,GAAA6T,UAAAA,CAAA,CAAA9D,EAAA,KAAA8D,sBAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA4Q,CAAA,CAAA9D,EAAA,IAAA4gC,MAAA,CAIA,KAHAhsB,EAAA5U,EAGA4U,KAEA,GAAA9Q,SAAAA,CAAA,CAAA8Q,EAAA,KAAA9Q,sBAAAA,CAAA,CAAA8Q,EAAA,IAAA1hB,IAAA,EAAA4Q,CAAA,CAAA8Q,EAAA,IAAAisB,KAAA,EAEAxlC,EAAAi9B,cAAA,CAAAx0B,CAAA,CAAA8Q,EAAA,KAAA4kB,UAAA,MAAAn+B,EAAAi9B,cAAA,CAAAx0B,CAAA,CAAA9D,EAAA,KAAAw5B,UAAA,KAKA,IAAA11B,CAAA,CAAA8Q,EAAA,IAAAgsB,MAAA,EAAA98B,CAAA,CAAA9D,EAAA,IAAA6gC,KAAA,IAAA/8B,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,QAAAxiB,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,CAAAg1B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,KACA,SAIAoa,EAAA58B,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,CAAAg1B,MAAA,IAAAxiB,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,OACA,IAAAh1B,EAAA,CACA,GAAAwS,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,EAEAA,EAAA,CACA,GAAAoS,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,EAEAwvC,GAAAxvC,EAAA,CAAAovC,GACAI,GAAApvC,EAAAgvC,GACAF,EAAA,CACAttC,KAAAwtC,EAAA,sCACApvC,MAAAA,EACAI,IAAA,CACA,GAAAoS,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,CAEA,EACA+uC,EAAA,CACAvtC,KAAAwtC,EAAA,sCACApvC,MAAA,CACA,GAAAwS,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,EAEAI,IAAAA,CACA,EACAuoB,EAAA,CACA/mB,KAAAwtC,EAAA,8BACApvC,MAAA,CACA,GAAAwS,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,EAEAA,IAAA,CACA,GAAAoS,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAEA,EACAytC,EAAA,CACA7rC,KAAAwtC,EAAA,sBACApvC,MAAA,CACA,GAAAkvC,EAAAlvC,KAAA,EAEAI,IAAA,CACA,GAAA+uC,EAAA/uC,GAAA,CAEA,EACAoS,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,EACA,GAAA8uC,EAAAlvC,KAAA,EAEAwS,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,EACA,GAAAmvC,EAAA/uC,GAAA,EAEAivC,EAAA,GAGA78B,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,CAAAg1B,MAAA,EACAqa,CAAAA,EAAyB,GAAAtL,GAAA2J,CAAA,EAAI2B,EAAA,UAAA78B,CAAA,CAAA8Q,EAAA,IAAAvZ,EAAA,SAAAyI,CAAA,CAAA8Q,EAAA,IAAAvZ,EAAA,IAI7BslC,EAAuB,GAAAtL,GAAA2J,CAAA,EAAI2B,EAAA,UAAA5B,EAAA1jC,EAAA,UAAAmlC,EAAAnlC,EAAA,SAAAmlC,EAAAnlC,EAAA,UAAA4e,EAAA5e,EAAA,GAK3BslC,EAAuB,GAAAtL,GAAA2J,CAAA,EAAI2B,EAAa,GAAA1B,GAAAC,CAAA,EAAU7jC,EAAAo5B,MAAA,CAAAlxB,UAAA,CAAA47B,UAAA,CAAArH,IAAA,CAAAh0B,EAAAtR,KAAA,CAAAoiB,EAAA,EAAA5U,GAAA3E,IAGlDslC,EAAuB,GAAAtL,GAAA2J,CAAA,EAAI2B,EAAA,SAAA1mB,EAAA5e,EAAA,UAAAolC,EAAAplC,EAAA,SAAAolC,EAAAplC,EAAA,SAAA0jC,EAAA1jC,EAAA,GAG3ByI,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,EACAA,EAAA,EACAqa,EAAyB,GAAAtL,GAAA2J,CAAA,EAAI2B,EAAA,UAAA78B,CAAA,CAAA9D,EAAA,IAAA3E,EAAA,SAAAyI,CAAA,CAAA9D,EAAA,IAAA3E,EAAA,IAE7BirB,EAAA,EAEU,GAAA+O,GAAAvhC,CAAA,EAAMgQ,EAAA8Q,EAAA,EAAA5U,EAAA4U,EAAA,EAAA+rB,GAChB3gC,EAAA4U,EAAA+rB,EAAA1wC,MAAA,CAAAq2B,EAAA,EACA,KACA,CACA,CAMA,IADAtmB,EAAA,GACA,EAAAA,EAAA8D,EAAA7T,MAAA,EACA,sBAAA6T,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACA4Q,CAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,SAGA,OAAA4Q,CACA,EA5IA1D,SAmJA,SAAAC,CAAA,CAAArI,CAAA,MAMA4hC,EALA,IAAAmH,EAAA,KAAAtM,MAAA,CAAAlxB,UAAA,CAAAw9B,gBAAA,CAAAjJ,IAAA,CACA1D,EAAA,KAAAA,QAAA,CACA3wB,EAAiB,GAAAu9B,GAAA9sC,CAAA,EAAiBkgC,GAIlC,OAYA,SAAA7zB,CAAA,EAGA,OAFAq5B,EAAAr5B,EACAF,EAAAc,KAAA,sBACAk5B,SAaAA,EAAA95B,CAAA,EACA,GAAAA,IAAAq5B,EAEA,OADAv5B,EAAAe,OAAA,CAAAb,GACA85B,EAEA,IAAAhG,EAAAh0B,EAAAgB,IAAA,sBAGAT,EAAkB,GAAAogC,GAAA9sC,CAAA,EAAiBqM,GAInCqU,EAAA,CAAAhU,GAAAA,IAAAA,GAAA6C,GAAAs9B,EAAA7hC,QAAA,CAAAqB,GACAq+B,EAAA,CAAAn7B,GAAAA,IAAAA,GAAA7C,GAAAmgC,EAAA7hC,QAAA,CAAAk1B,GAGA,OAFAC,EAAAwM,KAAA,CAAA1O,CAAAA,CAAAyH,CAAAA,KAAAA,EAAAhlB,EAAAA,GAAAnR,CAAAA,GAAA,CAAAm7B,CAAA,GACAvK,EAAAuM,MAAA,CAAAzO,CAAAA,CAAAyH,CAAAA,KAAAA,EAAAgF,EAAAA,GAAAh+B,CAAAA,GAAA,CAAAgU,CAAA,GACA5c,EAAAuI,EACA,EA9BAA,EACA,CA8BA,CAvMA,EAsNA,SAAAugC,GAAApU,CAAA,CAAApG,CAAA,EACAoG,EAAA17B,MAAA,EAAAs1B,EACAoG,EAAApG,MAAA,EAAAA,EACAoG,EAAA+M,YAAA,EAAAnT,CACA,CGpOO,IAAA2a,GAAA,CACPhyC,KAAA,iBACA4U,WAAc66B,GAAQ76B,UAAA,CACtBzD,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,EAMA,OALAF,EAAAc,KAAA,cACAd,EAAAc,KAAA,gBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,gBACAhB,EAAAgB,IAAA,cACAT,CACA,EAGA,SAAAA,EAAAL,CAAA,EAKA,OAAAA,KAAAA,GAAA,2BAAAy1B,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAjD,EAAAC,GAAAvI,EAAAuI,EACA,CACA,CAtCA,EGRa2gC,GAAQ,CACrB,GAAQ5+B,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQo4B,EACR,EAGOlF,GAAA,CACP,GnBVO,CACPvmC,KAAA,aACAmR,SAcA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAGA6gC,EAFA,IAAAnL,EAAA,KAGA,OAYA,SAAAz1B,CAAA,EAKA,OADAF,EAAAc,KAAA,eAiBWq6B,GAAYjtC,IAAA,CAAAynC,EAAA31B,EAAA+gC,EAEvB9gC,EAAA,mEAlBAC,EACA,EA8BA,SAAA6gC,EAAA7gC,CAAA,QAEA,CADA4gC,EAAiB,GAAA7B,GAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,CAAAtC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,QAAAuC,KAAA,QACpC+N,KAAAA,IACAF,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACAggC,GAEA/gC,EAAAC,EACA,CAYA,SAAA8gC,EAAA9gC,CAAA,EAEA,MAAW,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAASu7B,GAAiBz7B,EAAAihC,GAAA/gC,GAAA+gC,EAAA/gC,EAC9D,CAYA,SAAA+gC,EAAA/gC,CAAA,EACA,OAAWq6B,GAAkBv6B,EAAAkhC,EAE7BjhC,EAAA,sJAAAC,EACA,CAYA,SAAAghC,EAAAhhC,CAAA,EACA,OAAAF,EAAAk1B,OAAA,CAAAwG,GAAAn7B,EAAAA,GAAAL,EACA,CAcA,SAAAK,EAAAL,CAAA,EACA,MAAW,GAAAo1B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAmhC,EAAA,cAAAjhC,GAAAihC,EAAAjhC,EAC7C,CAcA,SAAAihC,EAAAjhC,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,eAKA20B,EAAAvB,MAAA,CAAArvB,OAAA,CAAAhT,IAAA,CAAA+uC,GAKAnpC,EAAAuI,IAEAD,EAAAC,EACA,CACA,CArKA,CmBQA,EAGOk4B,GAAA,CACP,KAAQ0D,GACR,KAAQA,GACR,GAAQA,EACR,EAGasF,GAAI,CACjB,GjBxBO,CACPxyC,KAAA,aACA+U,QAKA,SAAAF,CAAA,CAAAzI,CAAA,EACA,IAGAzJ,EAEAqoB,EALAge,EAAAn0B,EAAA7T,MAAA,GACAqlC,EAAA,EAgCA,MAzBA,eAAAxxB,CAAA,CAPA,EAOA,IAAA5Q,IAAA,EACAoiC,CAAAA,GAAA,GAIA2C,EAAA,EAAA3C,GAAAxxB,eAAAA,CAAA,CAAAm0B,EAAA,IAAA/kC,IAAA,EACA+kC,CAAAA,GAAA,GAEA,uBAAAn0B,CAAA,CAAAm0B,EAAA,IAAA/kC,IAAA,EAAAoiC,CAAAA,IAAA2C,EAAA,GAAAA,EAAA,EAAA3C,GAAAxxB,eAAAA,CAAA,CAAAm0B,EAAA,MAAA/kC,IAAA,GACA+kC,CAAAA,GAAA3C,EAAA,IAAA2C,EAAA,KAEAA,EAAA3C,IACA1jC,EAAA,CACAsB,KAAA,iBACA5B,MAAAwS,CAAA,CAAAwxB,EAAA,IAAAhkC,KAAA,CACAI,IAAAoS,CAAA,CAAAm0B,EAAA,IAAAvmC,GAAA,EAEAuoB,EAAA,CACA/mB,KAAA,YACA5B,MAAAwS,CAAA,CAAAwxB,EAAA,IAAAhkC,KAAA,CACAI,IAAAoS,CAAA,CAAAm0B,EAAA,IAAAvmC,GAAA,CACAsiC,YAAA,MACA,EACI,GAAAqB,GAAAvhC,CAAA,EAAMgQ,EAAAwxB,EAAA2C,EAAA3C,EAAA,YAAA1jC,EAAAyJ,EAAA,UAAA4e,EAAA5e,EAAA,SAAA4e,EAAA5e,EAAA,SAAAzJ,EAAAyJ,EAAA,IAEVyI,CACA,EAvCA1D,SA8CA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAArH,EAAA,EACA,OAYA,SAAAsH,CAAA,EAGA,OADAF,EAAAc,KAAA,eAeAd,EAAAc,KAAA,uBACAo8B,SAaAA,EAAAh9B,CAAA,SACA,KAAAA,GAAAtH,IAAA,GACAoH,EAAAe,OAAA,CAAAb,GACAg9B,GAIAh9B,OAAAA,GAAyB,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,IAClDF,EAAAgB,IAAA,uBACA63B,SAeAA,EAAA34B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,uBACAugC,SA+BAA,EAAAnhC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAmhC,IAEArhC,EAAAgB,IAAA,uBACA63B,EAAA34B,GACA,EAtCAA,IAEAA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,eAIArJ,EAAAuI,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,GACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA64B,EAAA,cAAA34B,IAKzBF,EAAAc,KAAA,mBACA0K,SAkCAA,EAAAtL,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAwC,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,IACjEF,EAAAgB,IAAA,mBACA63B,EAAA34B,KAEAF,EAAAe,OAAA,CAAAb,GACAsL,EACA,EAzCAtL,GACA,EAnCAA,IAEAD,EAAAC,EACA,EAxCAA,EACA,CAgHA,CA/KA,EiBqBA,GAAQo5B,GACR,IAAS2C,GAAiB3C,GAAa,CACvC,Gd1BO,CACP9C,SAAA,GACA5nC,KAAA,WACAstC,UAeA,SAAAz4B,CAAA,EACA,IAAA9D,EAAA8D,EAAA7T,MAAA,CACA,KAAA+P,KACA8D,CAAAA,UAAAA,CAAA,CAAA9D,EAAA,KAAA8D,aAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,IAYA,OARA8M,EAAA,GAAA8D,eAAAA,CAAA,CAAA9D,EAAA,MAAA9M,IAAA,GAEA4Q,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAwS,CAAA,CAAA9D,EAAA,MAAA1O,KAAA,CAEAwS,CAAA,CAAA9D,EAAA,MAAA1O,KAAA,CAAAwS,CAAA,CAAA9D,EAAA,MAAA1O,KAAA,CAEAwS,EAAAvE,MAAA,CAAAS,EAAA,MAEA8D,CACA,EA9BA1D,SAqCA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAGAs5B,EAEA+H,EAEAC,EAEA5hC,EAEA6hC,EAVA,IAAA7L,EAAA,KAWA,OAYA,SAAAz1B,CAAA,EAEA,OAcAF,EAAAc,KAAA,aACAd,EAAAc,KAAA,iBACAd,EAAAe,OAAA,CAhBAb,GAiBAqU,CAhBA,EAiCA,SAAAA,EAAArU,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAuhC,GAEAvhC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAohC,EAAA,GACAI,GAEAxhC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAq5B,EAAA,EAMA5D,EAAAe,SAAA,CAAA/+B,EAAAgqC,GAIQ,GAAArM,GAAAsM,EAAA,EAAU1hC,IAElBF,EAAAe,OAAA,CAAAb,GACAqhC,EAAAx/B,OAAAC,YAAA,CAAA9B,GACAquB,GAEAtuB,EAAAC,EACA,CAgBA,SAAAuhC,EAAAvhC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAq5B,EAAA,EACAsI,GAEA3hC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAq5B,EAAA,EACA55B,EAAA,EACAmiC,GAIQ,GAAAxM,GAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACAq5B,EAAA,EAGA5D,EAAAe,SAAA,CAAA/+B,EAAAgqC,GAEA1hC,EAAAC,EACA,CAYA,SAAA2hC,EAAA3hC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GAGAy1B,EAAAe,SAAA,CAAA/+B,EAAAgqC,GAEA1hC,EAAAC,EACA,CAYA,SAAA4hC,EAAA5hC,CAAA,EACA,IAAAnR,EAAA,gBACA,IAAAA,EAAAoqC,UAAA,CAAAx5B,KAEA,CADAK,EAAAe,OAAA,CAAAb,GACAP,IAAA5Q,EAAAa,MAAA,EAGA+lC,EAAAe,SAAA,CAAA/+B,EAAAm+B,EAEAgM,EAEA7hC,EAAAC,EACA,CAYA,SAAAwhC,EAAAxhC,CAAA,QACA,CAAQ,EAAAo1B,GAAAsM,EAAA,EAAU1hC,IAElBF,EAAAe,OAAA,CAAAb,GACAqhC,EAAAx/B,OAAAC,YAAA,CAAA9B,GACAquB,GAEAtuB,EAAAC,EACA,CAcA,SAAAquB,EAAAruB,CAAA,EACA,GAAAA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAAA,CAChF,IAAA6hC,EAAA7hC,KAAAA,EACAtR,EAAA2yC,EAAAnqC,WAAA,SACA,CAAA2qC,GAAA,CAAAT,GAAmChF,GAAYz9B,QAAA,CAAAjQ,IAC/C2qC,EAAA,EAGA5D,EAAAe,SAAA,CAAA/+B,EAAAuI,GAAA41B,EAAA51B,IAEUm8B,GAAcx9B,QAAA,CAAA0iC,EAAAnqC,WAAA,IAExB,CADAmiC,EAAA,EACAwI,IACA/hC,EAAAe,OAAA,CAAAb,GACA8hC,GAKArM,EAAAe,SAAA,CAAA/+B,EAAAuI,GAAA41B,EAAA51B,IAEAq5B,EAAA,EAEA5D,EAAAe,SAAA,GAAAf,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EAAA+O,EAAAC,GAAAohC,EAAAW,SA0CAA,EAAA/hC,CAAA,QACA,CAAQ,EAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACA+hC,GAEAC,EAAAhiC,EACA,EAhDAA,GAAAiiC,EAAAjiC,GACA,QAGA,KAAAA,GAAuB,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IACxCF,EAAAe,OAAA,CAAAb,GACAqhC,GAAAx/B,OAAAC,YAAA,CAAA9B,GACAquB,GAEAtuB,EAAAC,EACA,CAYA,SAAA8hC,EAAA9hC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GAGAy1B,EAAAe,SAAA,CAAA/+B,EAAAm+B,GAEA71B,EAAAC,EACA,CA2CA,SAAAiiC,EAAAjiC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAgiC,GAIAhiC,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAAsM,EAAA,EAAU1hC,IAChDF,EAAAe,OAAA,CAAAb,GACAkiC,GAEQ,GAAA9M,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAiiC,GAEAD,EAAAhiC,EACA,CAgBA,SAAAkiC,EAAAliC,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAoE,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IACrFF,EAAAe,OAAA,CAAAb,GACAkiC,GAEAC,EAAAniC,EACA,CAeA,SAAAmiC,EAAAniC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAoiC,GAEQ,GAAAhN,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAmiC,GAEAF,EAAAjiC,EACA,CAeA,SAAAoiC,EAAApiC,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAD,EAAAC,GAEAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAshC,EAAAthC,EACAqiC,GAEQ,GAAAjN,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAoiC,GAEAE,SAsCAA,EAAAtiC,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAkI,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAC3JmiC,EAAAniC,IAEAF,EAAAe,OAAA,CAAAb,GACAsiC,EACA,EA5CAtiC,EACA,CAcA,SAAAqiC,EAAAriC,CAAA,SACA,IAAAshC,GACAxhC,EAAAe,OAAA,CAAAb,GACAshC,EAAA,KACAiB,GAEAviC,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC3CD,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACAqiC,EACA,CA+BA,SAAAE,EAAAviC,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAAl1B,EAAA,EAAaF,GACnDiiC,EAAAjiC,GAEAD,EAAAC,EACA,CAYA,SAAAgiC,EAAAhiC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAwiC,GAEAziC,EAAAC,EACA,CAYA,SAAAwiC,EAAAxiC,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAG3C41B,EAAA51B,GAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAwiC,GAEAziC,EAAAC,EACA,CAYA,SAAA41B,EAAA51B,CAAA,SACA,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACAyiC,GAEAziC,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACA0iC,GAEA1iC,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACA2iC,GAEA3iC,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACAyhC,GAEAzhC,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACA4iC,GAEQ,GAAAxN,GAAA90B,EAAA,EAAkBN,IAAAq5B,CAAAA,IAAAA,GAAAA,IAAAA,CAAA,GAC1Bv5B,EAAAgB,IAAA,iBACAhB,EAAA2F,KAAA,CAAA42B,GAAAwG,EAAAC,GAAA9iC,IAEAA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,iBACAgiC,EAAA9iC,KAEAF,EAAAe,OAAA,CAAAb,GACA41B,EACA,CAaA,SAAAkN,EAAA9iC,CAAA,EACA,OAAAF,EAAA2F,KAAA,CAAA62B,GAAAyG,EAAAF,GAAA7iC,EACA,CAaA,SAAA+iC,EAAA/iC,CAAA,EAIA,OAHAF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAkiC,CACA,CAaA,SAAAA,EAAAhjC,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,GAC3C8iC,EAAA9iC,IAEAF,EAAAc,KAAA,iBACAg1B,EAAA51B,GACA,CAYA,SAAAyiC,EAAAziC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAyhC,GAEA7L,EAAA51B,EACA,CAYA,SAAA0iC,EAAA1iC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAqhC,EAAA,GACA4B,GAEArN,EAAA51B,EACA,CAYA,SAAAijC,EAAAjjC,CAAA,EACA,GAAAA,KAAAA,EAAA,CACA,IAAAtR,EAAA2yC,EAAAnqC,WAAA,UACA,GAAsByH,QAAA,CAAAjQ,IACtBoR,EAAAe,OAAA,CAAAb,GACA2iC,GAEA/M,EAAA51B,EACA,OACA,CAAQ,EAAAo1B,GAAAsM,EAAA,EAAU1hC,IAAAqhC,EAAA3xC,MAAA,IAElBoQ,EAAAe,OAAA,CAAAb,GACAqhC,GAAAx/B,OAAAC,YAAA,CAAA9B,GACAijC,GAEArN,EAAA51B,EACA,CAYA,SAAA4iC,EAAA5iC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAyhC,GAEA7L,EAAA51B,EACA,CAoBA,SAAAyhC,EAAAzhC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2iC,GAIA3iC,KAAAA,GAAAq5B,IAAAA,GACAv5B,EAAAe,OAAA,CAAAb,GACAyhC,GAEA7L,EAAA51B,EACA,CAYA,SAAA2iC,EAAA3iC,CAAA,SACA,OAAAA,GAAyB,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,iBACA+hC,EAAA7iC,KAEAF,EAAAe,OAAA,CAAAb,GACA2iC,EACA,CAYA,SAAAE,EAAA7iC,CAAA,EAMA,OALAF,EAAAgB,IAAA,aAKArJ,EAAAuI,EACA,CACA,CA7wBA,EcsBA,GAAQ+7B,GACR,GAAQ3C,GACR,GAAQoD,GACR,IAASA,EACT,EAGa0G,GAAM,CACnB,GAAQxF,GACR,GAAQM,EACR,EAGamF,GAAI,CACjB,KAAQjF,GACR,KAAQA,GACR,KAAQA,GACR,GAAQ6B,GACR,GAAQrC,GACR,GAAQsC,GACR,ILpDO,CACPtxC,KAAA,WACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAArH,EAAA,EACA,OAcA,SAAAsH,CAAA,EAMA,OALAF,EAAAc,KAAA,aACAd,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACAhB,EAAAc,KAAA,qBACAyT,CACA,EAcA,SAAAA,EAAArU,CAAA,QACA,CAAQ,EAAAo1B,GAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACAojC,GAEApjC,KAAAA,EACAD,EAAAC,GAEAqjC,EAAArjC,EACA,CAcA,SAAAojC,EAAApjC,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAqD,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IAEtEtH,EAAA,EACA4qC,SAiBAA,EAAAtjC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,EAAA,EACA6qC,GAIA,CAAAvjC,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAsD,GAAAo1B,GAAA0I,EAAA,EAAiB99B,EAAA,GAAAtH,IAAA,IACvEoH,EAAAe,OAAA,CAAAb,GACAsjC,IAEA5qC,EAAA,EACA2qC,EAAArjC,GACA,EA/BAA,IAEAqjC,EAAArjC,EACA,CAwCA,SAAAujC,EAAAvjC,CAAA,SACA,KAAAA,GACAF,EAAAgB,IAAA,qBACAhB,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACAhB,EAAAgB,IAAA,aACArJ,GAIAuI,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAAwF,EAAA,EAAY56B,GACnED,EAAAC,IAEAF,EAAAe,OAAA,CAAAb,GACAujC,EACA,CAYA,SAAAF,EAAArjC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAwjC,GAEQ,GAAApO,GAAAqO,EAAA,EAAUzjC,IAClBF,EAAAe,OAAA,CAAAb,GACAqjC,GAEAtjC,EAAAC,EACA,CAYA,SAAAwjC,EAAAxjC,CAAA,EACA,MAAW,GAAAo1B,GAAA0I,EAAA,EAAiB99B,GAAA0jC,SAa5BA,EAAA1jC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,EAAA,EACA8qC,GAEAxjC,KAAAA,GAEAF,EAAAgB,IAAA,qBAAAnO,IAAA,iBACAmN,EAAAc,KAAA,mBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,mBACAhB,EAAAgB,IAAA,aACArJ,GAEAksC,SAeAA,EAAA3jC,CAAA,EAEA,IAAAA,KAAAA,GAAwB,GAAAo1B,GAAA0I,EAAA,EAAiB99B,EAAA,GAAAtH,IAAA,IACzC,IAAA+7B,EAAAz0B,KAAAA,EAAA2jC,EAAAD,EAEA,OADA5jC,EAAAe,OAAA,CAAAb,GACAy0B,CACA,CACA,OAAA10B,EAAAC,EACA,EAvBAA,EACA,EA7B4BA,GAAAD,EAAAC,EAC5B,CAmDA,CA1NA,ECDO,CACPtR,KAAA,WACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAGAs5B,EAEA55B,EAEAmkC,EANA,IAAAnO,EAAA,KAOA,OAYA,SAAAz1B,CAAA,EAIA,OAHAF,EAAAc,KAAA,aACAd,EAAAc,KAAA,iBACAd,EAAAe,OAAA,CAAAb,GACAqU,CACA,EAgBA,SAAAA,EAAArU,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAuhC,GAEAvhC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAwhC,GAEAxhC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA6jC,GAIQ,GAAAzO,GAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACA8jC,GAEA/jC,EAAAC,EACA,CAgBA,SAAAuhC,EAAAvhC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2hC,GAEA3hC,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAP,EAAA,EACAmiC,GAEQ,GAAAxM,GAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACAjN,GAEAgN,EAAAC,EACA,CAYA,SAAA2hC,EAAA3hC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA+jC,GAEAhkC,EAAAC,EACA,CAYA,SAAA3N,EAAA2N,CAAA,SACA,OAAAA,EACAD,EAAAC,GAEAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAgkC,GAEQ,GAAA5O,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAvxC,EACA4xC,EAAAjkC,KAEAF,EAAAe,OAAA,CAAAb,GACA3N,EACA,CAYA,SAAA2xC,EAAAhkC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA+jC,GAEA1xC,EAAA2N,EACA,CAYA,SAAA+jC,EAAA/jC,CAAA,EACA,OAAAA,KAAAA,EAAA7O,EAAA6O,GAAAA,KAAAA,EAAAgkC,EAAAhkC,GAAA3N,EAAA2N,EACA,CAYA,SAAA4hC,EAAA5hC,CAAA,EACA,IAAAnR,EAAA,gBACA,IAAAA,EAAAoqC,UAAA,CAAAx5B,MACAK,EAAAe,OAAA,CAAAb,GACAP,IAAA5Q,EAAAa,MAAA,CAAAw0C,EAAAtC,GAEA7hC,EAAAC,EACA,CAYA,SAAAkkC,EAAAlkC,CAAA,SACA,OAAAA,EACAD,EAAAC,GAEAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAmkC,GAEQ,GAAA/O,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAM,EACAD,EAAAjkC,KAEAF,EAAAe,OAAA,CAAAb,GACAkkC,EACA,CAYA,SAAAC,EAAAnkC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAokC,GAEAF,EAAAlkC,EACA,CAYA,SAAAokC,EAAApkC,CAAA,SACA,KAAAA,EACA7O,EAAA6O,GAEAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAokC,GAEAF,EAAAlkC,EACA,CAYA,SAAAjN,EAAAiN,CAAA,SACA,OAAAA,GAAAA,KAAAA,EACA7O,EAAA6O,GAEQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAA7wC,EACAkxC,EAAAjkC,KAEAF,EAAAe,OAAA,CAAAb,GACAjN,EACA,CAYA,SAAA8wC,EAAA7jC,CAAA,SACA,OAAAA,EACAD,EAAAC,GAEAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAqkC,GAEQ,GAAAjP,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAC,EACAI,EAAAjkC,KAEAF,EAAAe,OAAA,CAAAb,GACA6jC,EACA,CAYA,SAAAQ,EAAArkC,CAAA,EACA,OAAAA,KAAAA,EAAA7O,EAAA6O,GAAA6jC,EAAA7jC,EACA,CAYA,SAAAwhC,EAAAxhC,CAAA,QAEA,CAAQ,EAAAo1B,GAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACAskC,GAEAvkC,EAAAC,EACA,CAYA,SAAAskC,EAAAtkC,CAAA,SAEA,KAAAA,GAAuB,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IACxCF,EAAAe,OAAA,CAAAb,GACAskC,GAEAC,SAaAA,EAAAvkC,CAAA,QACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAW,EACAN,EAAAjkC,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAukC,GAEApzC,EAAA6O,EACA,EAvBAA,EACA,CAkCA,SAAA8jC,EAAA9jC,CAAA,SAEA,KAAAA,GAAuB,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IACxCF,EAAAe,OAAA,CAAAb,GACA8jC,GAEA9jC,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAC/DwkC,EAAAxkC,GAEAD,EAAAC,EACA,CAYA,SAAAwkC,EAAAxkC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA7O,GAIA6O,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAAsM,EAAA,EAAU1hC,IAChDF,EAAAe,OAAA,CAAAb,GACAykC,GAEQ,GAAArP,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAY,EACAP,EAAAjkC,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACAwkC,GAEArzC,EAAA6O,EACA,CAYA,SAAAykC,EAAAzkC,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAoE,GAAAo1B,GAAA0I,EAAA,EAAiB99B,IACrFF,EAAAe,OAAA,CAAAb,GACAykC,GAEAC,SAcAA,EAAA1kC,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2kC,GAEQ,GAAAvP,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAc,EACAT,EAAAjkC,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACA0kC,GAEAF,EAAAxkC,EACA,EA5BAA,EACA,CAwCA,SAAA2kC,EAAA3kC,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAD,EAAAC,GAEAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAq5B,EAAAr5B,EACA4kC,GAEQ,GAAAxP,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAe,EACAV,EAAAjkC,IAEQ,GAAAo1B,GAAAl1B,EAAA,EAAaF,IACrBF,EAAAe,OAAA,CAAAb,GACA2kC,IAEA7kC,EAAAe,OAAA,CAAAb,GACA6kC,EACA,CAYA,SAAAD,EAAA5kC,CAAA,SACA,IAAAq5B,GACAv5B,EAAAe,OAAA,CAAAb,GACAq5B,EAAA/9B,KAAAA,EACAwpC,GAEA9kC,OAAAA,EACAD,EAAAC,GAEQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1B4jC,EAAAgB,EACAX,EAAAjkC,KAEAF,EAAAe,OAAA,CAAAb,GACA4kC,EACA,CAYA,SAAAC,EAAA7kC,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAD,EAAAC,GAEAA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAC/DwkC,EAAAxkC,IAEAF,EAAAe,OAAA,CAAAb,GACA6kC,EACA,CAaA,SAAAC,EAAA9kC,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,GAAA9yB,EAAA,EAAyBtC,GAC/DwkC,EAAAxkC,GAEAD,EAAAC,EACA,CAYA,SAAA7O,EAAA6O,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,iBACAhB,EAAAgB,IAAA,aACArJ,GAEAsI,EAAAC,EACA,CAgBA,SAAAikC,EAAAjkC,CAAA,EAKA,OAJAF,EAAAgB,IAAA,iBACAhB,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAikC,CACA,CAgBA,SAAAA,EAAA/kC,CAAA,EAGA,MAAW,GAAAo1B,GAAAl1B,EAAA,EAAaF,GAAS,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAklC,EAAA,aAAAvP,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,GAAA0E,GAAAglC,EAAAhlC,EAC7C,CAgBA,SAAAglC,EAAAhlC,CAAA,EAEA,OADAF,EAAAc,KAAA,iBACAgjC,EAAA5jC,EACA,CACA,CArpBA,EI+C2B,CAC3B,GAAQ0gC,GACR,IFtDO,CACPhyC,KAAA,kBACAmR,SAQA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAaA,SAAAC,CAAA,EAGA,OAFAF,EAAAc,KAAA,oBACAd,EAAAe,OAAA,CAAAb,GACAK,CACA,EAaA,SAAAA,EAAAL,CAAA,QACA,CAAQ,EAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAgB,IAAA,oBACArJ,EAAAuI,IAEAD,EAAAC,EACA,CACA,CA7CA,EEmD0Bg+B,GAAe,CACzC,GAAQG,GACR,GAAQ6B,GACR,GDtDO,CACPtxC,KAAA,WACAmlC,SA2DA,SAAA7zB,CAAA,EAEA,OAAAA,KAAAA,GAAA,yBAAAuD,MAAA,MAAAA,MAAA,CAAA7T,MAAA,OAAAiD,IAAA,EA5DA8Q,QAMA,SAAAF,CAAA,EACA,IAGA9D,EAEAmB,EALAqkC,EAAA1hC,EAAA7T,MAAA,GACAw1C,EAAA,EAOA,IAAA3hC,eAAAA,CAAA,CAPA,EAOA,IAAA5Q,IAAA,EAAA4Q,UAAAA,CAAA,CAAA2hC,EAAA,IAAAvyC,IAAA,GAAA4Q,CAAAA,eAAAA,CAAA,CAAA0hC,EAAA,IAAAtyC,IAAA,EAAA4Q,UAAAA,CAAA,CAAA0hC,EAAA,IAAAtyC,IAAA,EAIA,KAHA8M,EAAAylC,EAGA,EAAAzlC,EAAAwlC,GACA,GAAA1hC,iBAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAEA4Q,CAAA,CAAA2hC,EAAA,IAAAvyC,IAAA,mBACA4Q,CAAA,CAAA0hC,EAAA,IAAAtyC,IAAA,mBACAuyC,GAAA,EACAD,GAAA,EACA,KACA,CACA,CAMA,IAFAxlC,EAAAylC,EAAA,EACAD,IACA,EAAAxlC,GAAAwlC,GACArkC,KAAAtF,IAAAsF,EACAnB,IAAAwlC,GAAA1hC,eAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACAiO,CAAAA,EAAAnB,CAAA,EAEMA,CAAAA,IAAAwlC,GAAA1hC,eAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,IACN4Q,CAAA,CAAA3C,EAAA,IAAAjO,IAAA,gBACA8M,IAAAmB,EAAA,IACA2C,CAAA,CAAA3C,EAAA,IAAAzP,GAAA,CAAAoS,CAAA,CAAA9D,EAAA,MAAAtO,GAAA,CACAoS,EAAAvE,MAAA,CAAA4B,EAAA,EAAAnB,EAAAmB,EAAA,GACAqkC,GAAAxlC,EAAAmB,EAAA,EACAnB,EAAAmB,EAAA,GAEAA,EAAAtF,KAAAA,GAGA,OAAAiI,CACA,EAlDA1D,SAmEA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EAEA,IAEArH,EAEAo7B,EAJA8I,EAAA,EAKA,OAcA,SAAA58B,CAAA,EAGA,OAFAF,EAAAc,KAAA,aACAd,EAAAc,KAAA,qBACAo8B,SAaAA,EAAAh9B,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA48B,IACAI,IAEAl9B,EAAAgB,IAAA,qBACAqkC,EAAAnlC,GACA,EArBAA,EACA,EAgCA,SAAAmlC,EAAAnlC,CAAA,SAEA,OAAAA,EACAD,EAAAC,GAMAA,KAAAA,GACAF,EAAAc,KAAA,UACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,UACAqkC,GAIAnlC,KAAAA,GACA8zB,EAAAh0B,EAAAc,KAAA,qBACAlI,EAAA,EACAikC,SA2CAA,EAAA38B,CAAA,SAEA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,IACAikC,GAIAjkC,IAAAkkC,GACA98B,EAAAgB,IAAA,qBACAhB,EAAAgB,IAAA,aACArJ,EAAAuI,KAIA8zB,EAAAnhC,IAAA,gBACA2Y,EAAAtL,GACA,EA7DAA,IAEQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BF,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAqkC,IAIArlC,EAAAc,KAAA,iBACA0K,EAAAtL,GACA,CAYA,SAAAsL,EAAAtL,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,GAAA90B,EAAA,EAAkBN,IACzEF,EAAAgB,IAAA,iBACAqkC,EAAAnlC,KAEAF,EAAAe,OAAA,CAAAb,GACAsL,EACA,CA+BA,CA7MA,CCkDA,EAGOszB,GAAA,CACPrH,KAAA,CAASyI,GAAW5H,GAAW,EAIxBoI,GAAA,CACPjJ,KAAA,SAIOD,GAAA,CACPC,KAAA,IGlEA6N,GAAA,cCHO,SAAAC,GAAAx2C,CAAA,CAAAy2C,CAAA,EACP,IAAAtlC,EAAAU,OAAA6kC,QAAA,CAAA12C,EAAAy2C,UACA,EAEA,GAAAtlC,KAAAA,GAAAA,EAAA,IAAAA,EAAA,IAEAA,EAAA,KAAAA,EAAA,KAEAA,EAAA,OAAAA,EAAA,OAEAA,EAAA,OAAAA,EAAA,OACA,CAAAA,MAAAA,CAAA,WAAAA,MAAAA,CAAA,UAEAA,EAAA,QACA,IAEA6B,OAAA2jC,aAAA,CAAAxlC,EACA,CC7BA,IAAAylC,GAAA,oEA4BA,SAAAC,GAAA3Z,CAAA,CAAA4Z,CAAA,CAAAC,CAAA,EACA,GAAAD,EAEA,OAAAA,EAKA,GAAA7rC,KADA8rC,EAAA3M,UAAA,IACA,CACA,IAAAn/B,EAAA8rC,EAAA3M,UAAA,IACA4M,EAAA/rC,MAAAA,GAAAA,KAAAA,EACA,OAAWurC,GAA+BO,EAAA3zC,KAAA,CAAA4zC,EAAA,KAAAA,EAAA,MAC1C,CACA,OAASpI,GAA6BmI,IAAA7Z,CACtC,CCIA,IAAM+Z,GAAG,GAAKv4C,cAAA,CAqhCd,SAASw4C,GAAKxyC,CAAA,EACd,OACAvC,KAAAuC,EAAAvC,IAAA,CACAP,OAAA8C,EAAA9C,MAAA,CACAs1B,OAAAxyB,EAAAwyB,MAAA,CAEA,CA8DA,SAAAigB,GAAAhtC,CAAA,CAAA+J,CAAA,EACA,GAAA/J,EACA,6BAAAA,EAAArG,IAAA,OAA2D05B,EAAiB,CAC5Et7B,MAAAiI,EAAAjI,KAAA,CACAI,IAAA6H,EAAA7H,GAAA,GACK,0BAAA4R,EAAApQ,IAAA,OAAqD05B,EAAiB,CAC3Et7B,MAAAgS,EAAAhS,KAAA,CACAI,IAAA4R,EAAA5R,GAAA,GACK,YAEL,iDAAA4R,EAAApQ,IAAA,OAA+E05B,EAAiB,CAChGt7B,MAAAgS,EAAAhS,KAAA,CACAI,IAAA4R,EAAA5R,GAAA,GACK,kBAEL,CCnoCe,SAAA80C,GAAAx3C,CAAA,EAGf,IAAAgnC,EAAA,KAEAA,EAAAvB,MAAA,CAKA,SAAAgS,CAAA,MD0COC,EAAA13C,MH5CP23C,EALA31C,EACA4wC,EAEAtwC,EIKA,MD0CA,iBADOo1C,ECzCgB,CACvB,GAAA1Q,EAAAnqB,IAAA,aACA,GAAA7c,CAAA,CAIAiU,WAAA+yB,EAAAnqB,IAAA,4BACA+6B,gBAAA5Q,EAAAnqB,IAAA,mCDoCA7c,EAAA03C,EACAA,EAAA7qC,KAAAA,GAEAgrC,CAQA,SAAA73C,CAAA,EAEA,IAAA83C,EAAA,CACAC,WAAA,GACAC,eAAA,uDACA7lC,MAAA,CACA8lC,SAAAC,EAAAnuB,GACAouB,iBAAAC,EACAC,cAAAD,EACAE,WAAAJ,EAAA1K,GACA9B,WAAAwM,EAy0BA,WACA,OACAh0C,KAAA,aACAyG,SAAA,GAEA,GA70BA4kC,gBAAA6I,EACAnJ,mBAAAmJ,EACArK,WAAAmK,EAAAK,GACAC,oBAAA5F,EACA6F,oBAAA7F,EACAzF,aAAA+K,EAAAK,EAAA3F,GACA8F,SAAAR,EAo1BA,WACA,OACAh0C,KAAA,aACA9D,MAAA,EACA,CACA,EAz1BAwyC,GACA+F,aAAAP,EACAv7B,KAAAu7B,EACAQ,cAAAR,EACAziC,WAAAuiC,EAw1BA,WACA,OACAh0C,KAAA,aACAiuC,WAAA,GACAhzB,MAAA,KACA6I,MAAA,KACAgX,IAAA,EACA,CACA,GA/1BA6Z,4BAAAjG,EACAkG,sBAAAlG,EACAmG,sBAAAnG,EACAoG,SAAAd,EA+1BA,WACA,OACAh0C,KAAA,WACAyG,SAAA,GAEA,GAn2BAsuC,gBAAAf,EAAAgB,GACAC,kBAAAjB,EAAAgB,GACAE,SAAAlB,EAAAt9B,EAAAg4B,GACAyG,aAAAjB,EACAkB,SAAApB,EAAAt9B,EAAAg4B,GACA2G,aAAAnB,EACAoB,MAAAtB,EAy3BA,WACA,OACAh0C,KAAA,QACA8jB,MAAA,KACAgX,IAAA,GACAnuB,IAAA,IACA,CACA,GA/3BAsO,MAAAyzB,EACA7oB,KAAAmuB,EAAAnuB,GACA0vB,SAAAvB,EA25BA,SAAA7S,CAAA,EACA,OACAnhC,KAAA,WACAw1C,OAAArU,EAAAsU,OAAA,CACAx9B,QAAA,KACAxR,SAAA,GAEA,GAj6BAivC,cA2XA,SAAAvU,CAAA,EACA,KAAAxoB,IAAA,CAAAg9B,2BAAA,GAEAC,IADA,CAAAlb,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAqB,KAAA,CAAA2P,OAAA6kC,QAAA,MAAAxN,cAAA,CAAAjE,GAAA,IACA,KAAAxoB,IAAA,CAAAg9B,2BAAA,CAAAhtC,KAAAA,EAEA,EAhYAktC,YAAA7B,EAAA5kC,EAkXA,WACA,KAAAuJ,IAAA,CAAAg9B,2BAAA,GACA,GAnXAG,cAAA9B,EAAA5kC,GACAm6B,UAAAyK,EAi6BA,WACA,OACAh0C,KAAA,YACAyG,SAAA,GAEA,GAr6BAsvC,UAwtBA,WACA,KAAAp9B,IAAA,CAAAq9B,aAAA,YACA,EAztBAC,gBAAAvH,EACAwH,0BAAAxH,EACAyH,oBAAAzH,EACA0H,cAAApC,EAAA1K,GACA+M,OAAArC,EAm6BA,WACA,OACAh0C,KAAA,SACAyG,SAAA,GAEA,GAv6BAggC,cAAAuN,EAk7BA,WACA,OACAh0C,KAAA,eACA,CACA,EAr7BA,EACAmO,KAAA,CACAimC,WAAAkC,IACAC,mBA4cA,SAAApV,CAAA,EACA,IAAA7iC,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA,IAAAuB,EAAAk4C,KAAA,EACA,IAAAA,EAAA,KAAApR,cAAA,CAAAjE,GAAApkC,MAAA,CACAuB,EAAAk4C,KAAA,CAAAA,CACA,CACA,EAjdAzC,SAAAuC,IACAnC,cAoxBA,SAAAhT,CAAA,EACAsV,EAAAp7C,IAAA,MAAA8lC,GAEA7iC,IADA,CAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+9B,GAAA,gBAAAsK,cAAA,CAAAjE,EACA,EAvxBA8S,iBAywBA,SAAA9S,CAAA,EACAsV,EAAAp7C,IAAA,MAAA8lC,GAEA7iC,IADA,CAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+9B,GAAA,MAAAsK,cAAA,CAAAjE,EACA,EA5wBAqG,WAAA8O,IACAI,qBAAAD,EACAE,oCAAAC,EACAC,gCAAAD,EACAE,wBAuuBA,SAAA3V,CAAA,MAIAjlC,EAHA,IAAAyc,EAAA,KAAAysB,cAAA,CAAAjE,GACAnhC,EAAA,KAAA2Y,IAAA,CAAAo+B,sBAAA,CAGA/2C,GACA9D,EAAcw2C,GAA+B/5B,EAAA3Y,oCAAAA,EAAA,OAC7C,KAAA2Y,IAAA,CAAAo+B,sBAAA,CAAApuC,KAAAA,GAGAzM,EADqB4uC,GAA6BnyB,GAGlD,IAAAwsB,EAAA,KAAAzK,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAooC,EAAAjpC,KAAA,EAAAA,CACA,EApvBA6uC,mBA0vBA,SAAA5J,CAAA,EAEAgE,IADA,CAAAzK,KAAA,CAAA8C,GAAA,GACAr/B,QAAA,CAAAK,GAAA,CAAwB40C,GAAKjS,EAAA3iC,GAAA,CAC7B,EA5vBAqrC,WAAAyM,EA8YA,WACA,IAAA39B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,KAAA,CAAAyc,EAAAhb,OAAA,gCACA,KAAAgb,IAAA,CAAAs+B,cAAA,CAAAtuC,KAAAA,CACA,GAlZAuuC,gBAkYA,WAEA,KAAAv+B,IAAA,CAAAs+B,cAAA,GACA,KAAAvI,MAAA,GACA,KAAA/1B,IAAA,CAAAs+B,cAAA,IACA,EAtYA3C,oBA6WA,WACA,IAAA37B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAme,IAAA,CAAAvC,CACA,EAhXA47B,oBAsXA,WACA,IAAA57B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA0tC,IAAA,CAAA9xB,CACA,EAzXA+7B,cAAA+B,EACAxN,aAAAqN,EAoZA,WACA,IAAA39B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,KAAA,CAAAyc,EAAAhb,OAAA,mBACA,GAvZA62C,SAAA8B,EAujBA,WACA,IAAA39B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,KAAA,CAAAyc,CACA,GA1jBA87B,aAAAgC,EACA99B,KAAA89B,EACAhlC,WAAA6kC,IACA3B,4BA8aA,WACA,IAAAh8B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+9B,GAAA,CAAAniB,CACA,EAjbAi8B,sBAwZA,SAAAzT,CAAA,EACA,IAAAlmB,EAAA,KAAA+7B,MAAA,GACA14C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAuB,EAAA2c,KAAA,CAAAA,EACA3c,EAAA2vC,UAAA,CAAsB,GAAA7B,GAAAxrC,CAAA,EAAmB,KAAAwkC,cAAA,CAAAjE,IAAA58B,WAAA,EACzC,EA5ZAswC,sBAkaA,WACA,IAAAl8B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+mB,KAAA,CAAAnL,CACA,EAraAm8B,SAAAwB,IACAvB,gBAAAuB,EAAAa,GACAlC,kBAAAqB,EAAAa,GACAjC,SAAAoB,EAuhBA,WACA,IAAA39B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,KAAA,CAAAyc,CACA,GA1hBAw8B,aAAAsB,EACArB,SAAAkB,EAgiBA,WACA,IAAA39B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,KAAA,CAAAyc,CACA,GAniBA08B,aAAAoB,EACAnB,MAAAgB,EAilBA,WACA,IAAAh4C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAKA,QAAA4b,IAAA,CAAAy+B,WAAA,EAEA,IAAApB,EAAA,KAAAr9B,IAAA,CAAAq9B,aAAA,YACA13C,CAAAA,EAAA0B,IAAA,cAEA1B,EAAA03C,aAAA,CAAAA,EAEA,OAAA13C,EAAAw8B,GAAA,CACA,OAAAx8B,EAAAwlB,KAAA,MAGA,OAAAxlB,EAAA2vC,UAAA,CAEA,OAAA3vC,EAAA2c,KAAA,CAEA,KAAAtC,IAAA,CAAAq9B,aAAA,CAAArtC,KAAAA,CACA,GAtmBAsS,MA4nBA,WACA,IAAAo8B,EAAA,KAAA3c,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAb,EAAA,KAAA86C,MAAA,GACA14C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAGA,GADA,KAAA4b,IAAA,CAAAy+B,WAAA,IACA94C,SAAAA,EAAA0B,IAAA,EAEA,IAAAyG,EAAA4wC,EAAA5wC,QAAA,CACAnI,EAAAmI,QAAA,CAAAA,CACA,MACAnI,EAAAqO,GAAA,CAAAzQ,CAEA,EAxoBAo7C,UA4mBA,SAAAnW,CAAA,EACA,IAAA9K,EAAA,KAAA+O,cAAA,CAAAjE,GACAyU,EAAA,KAAAlb,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAGA64C,EAAA36B,KAAA,CDxwBA/e,EAAAyB,OAAA,CAAAm1C,GAAAC,IC0wBA6C,EAAA3H,UAAA,CAA0B,GAAA7B,GAAAxrC,CAAA,EAAmBy1B,GAAA9xB,WAAA,EAC7C,EAnnBAgnC,WAmfA,SAAApK,CAAA,EACA,IAAAh5B,EAAA,KAAAuyB,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAEA,QAAA4b,IAAA,CAAA4+B,WAAA,EAEApS,EADA1+B,QAAA,CAAA0B,EAAA1B,QAAA,CAAA1J,MAAA,IACAoB,QAAA,CAAAK,GAAA,CAA0B40C,GAAKjS,EAAA3iC,GAAA,EAC/B,KAAAma,IAAA,CAAA4+B,WAAA,CAAA5uC,KAAAA,EACA,MACA,CACA,MAAAgQ,IAAA,CAAA6+B,4BAAA,EAAA5D,EAAAE,cAAA,CAAA9nC,QAAA,CAAA7D,EAAAnI,IAAA,IACAk0C,EAAA74C,IAAA,MAAA8lC,GACAsV,EAAAp7C,IAAA,MAAA8lC,GAEA,EA/fAtb,KAAAywB,EAgjBA,WACA,IAAAh4C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAKA,QAAA4b,IAAA,CAAAy+B,WAAA,EAEA,IAAApB,EAAA,KAAAr9B,IAAA,CAAAq9B,aAAA,YACA13C,CAAAA,EAAA0B,IAAA,cAEA1B,EAAA03C,aAAA,CAAAA,EAEA,OAAA13C,EAAAw8B,GAAA,CACA,OAAAx8B,EAAAwlB,KAAA,MAGA,OAAAxlB,EAAA2vC,UAAA,CAEA,OAAA3vC,EAAA2c,KAAA,CAEA,KAAAtC,IAAA,CAAAq9B,aAAA,CAAArtC,KAAAA,CACA,GArkBA4sC,SAAAe,IACAT,YAAAS,IACAR,cAAAQ,IACA/M,UAAA+M,IACAL,gBAgrBA,SAAA9U,CAAA,EACA,IAAAlmB,EAAA,KAAA+7B,MAAA,GACA14C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAGAuB,EAAA2c,KAAA,CAAAA,EAEA3c,EAAA2vC,UAAA,CAAsB,GAAA7B,GAAAxrC,CAAA,EAAmB,KAAAwkC,cAAA,CAAAjE,IAAA58B,WAAA,GACzC,KAAAoU,IAAA,CAAAq9B,aAAA,OACA,EAxrBAE,0BAuoBA,WACA,IAAAv9B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+9B,GAAA,CAAAniB,CACA,EA1oBAw9B,oBAipBA,WACA,IAAAx9B,EAAA,KAAAq+B,MAAA,EAEA14C,CADA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACA+mB,KAAA,CAAAnL,CACA,EAppBAyc,SA2pBA,WACA,KAAAzc,IAAA,CAAAy+B,WAAA,CAAAzuC,KAAAA,CACA,EA5pBAytC,cAAAE,EA8bA,WACA,KAAA39B,IAAA,CAAA6+B,4BAAA,CAAA7uC,KAAAA,CACA,GA/bA8uC,0BAobA,SAAAtW,CAAA,EAEA7iC,IADA,CAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACAy5C,KAAA,WAAApR,cAAA,CAAAjE,GAAAuW,WAAA,OACA,EAtbAC,kBA2aA,WACA,KAAAh/B,IAAA,CAAA6+B,4BAAA,GACA,EA5aAnB,OAAAC,IACA7P,cAAA6P,GACA,CACA,EACAsB,CAw5BA,SAAAA,EAAAC,CAAA,CAAA9nC,CAAA,EACA,IAAAjD,EAAA,GACA,OAAAA,EAAAiD,EAAAhT,MAAA,GACA,IAAAb,EAAA6T,CAAA,CAAAjD,EAAA,CACA1R,MAAAF,OAAA,CAAAgB,GACA07C,EAAAC,EAAA37C,GAEA+T,SAUA4nC,CAAA,CAAA5nC,CAAA,EAEA,IAAAzU,EACA,IAAAA,KAAAyU,EACA,GAAQkjC,GAAG93C,IAAA,CAAA4U,EAAAzU,GACX,OAAAA,GACA,qBACA,CACA,IAAA4U,EAAAH,CAAA,CAAAzU,EAAA,CACA4U,GACAynC,CAAA,CAAAr8C,EAAA,CAAA0D,IAAA,IAAAkR,GAEA,KACA,CACA,iBACA,CACA,IAAAA,EAAAH,CAAA,CAAAzU,EAAA,CACA4U,GACAynC,CAAA,CAAAr8C,EAAA,CAAA0D,IAAA,IAAAkR,GAEA,KACA,CACA,YACA,WACA,CACA,IAAAA,EAAAH,CAAA,CAAAzU,EAAA,CACA4U,GACA1V,OAAAgX,MAAA,CAAAmmC,CAAA,CAAAr8C,EAAA,CAAA4U,EAGA,CAEA,CAGA,EA7CAynC,EAAA37C,EAEA,CACA,GAl6BA03C,EAAA,CAAA93C,GAAA,IAAkC43C,eAAA,MAGlC,IAAA/6B,EAAA,GACA,OAUA,SAAA/H,CAAA,EAEA,IAAAknC,EAAA,CACA93C,KAAA,OACAyG,SAAA,IAGA0B,EAAA,CACAuyB,MAAA,CAAAod,EAAA,CACAC,WAAA,GACAnE,OAAAA,EACA3lC,MAAAA,EACAE,KAAAA,EACAugC,OAAAA,EACAsI,OAAAA,EACAr+B,KAAAA,CACA,EAEAq/B,EAAA,GACAlrC,EAAA,GACA,OAAAA,EAAA8D,EAAA7T,MAAA,EAGA6T,CAAAA,gBAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA4Q,kBAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,IACA4Q,UAAAA,CAAA,CAAA9D,EAAA,IACAkrC,EAAA94C,IAAA,CAAA4N,GAGAA,EAAAmrC,SAiDArnC,CAAA,CAAAxS,CAAA,CAAArB,CAAA,EACA,IAIAw4C,EAEAjV,EAEA4X,EAEAhR,EAVAp6B,EAAA1O,EAAA,EACA+5C,EAAA,GACAC,EAAA,GASA,OAAAtrC,GAAA/P,GAAA,CACA,IAAAwoB,EAAA3U,CAAA,CAAA9D,EAAA,CACA,OAAAyY,CAAA,IAAAvlB,IAAA,EACA,oBACA,kBACA,iBAEAulB,UAAAA,CAAA,IACA4yB,IAEAA,IAEAjR,EAAAv+B,KAAAA,EACA,KAEA,uBAEA,UAAA4c,CAAA,OACAgwB,GAAArO,GAAAiR,GAAAD,GACAA,CAAAA,EAAAprC,CAAA,EAEAo6B,EAAAv+B,KAAAA,GAEA,KAEA,kBACA,oBACA,qBACA,qBACA,+BAIA,KAEA,SAEAu+B,EAAAv+B,KAAAA,CAEA,CACA,IAAAwvC,GAAA5yB,UAAAA,CAAA,KAAAA,mBAAAA,CAAA,IAAAvlB,IAAA,EAAAm4C,KAAAA,GAAA5yB,SAAAA,CAAA,KAAAA,CAAAA,kBAAAA,CAAA,IAAAvlB,IAAA,EAAAulB,gBAAAA,CAAA,IAAAvlB,IAAA,GACA,GAAAu1C,EAAA,CACA,IAAA8C,EAAAvrC,EAEA,IADAwzB,EAAA33B,KAAAA,EACA0vC,KAAA,CACA,IAAAC,EAAA1nC,CAAA,CAAAynC,EAAA,CACA,GAAAC,eAAAA,CAAA,IAAAt4C,IAAA,EAAAs4C,oBAAAA,CAAA,IAAAt4C,IAAA,EACA,GAAAs4C,SAAAA,CAAA,aACAhY,IACA1vB,CAAA,CAAA0vB,EAAA,IAAAtgC,IAAA,mBACAo4C,EAAA,IAEAE,CAAA,IAAAt4C,IAAA,cACAsgC,EAAA+X,CACA,MAAc,GAAAC,eAAAA,CAAA,IAAAt4C,IAAA,EAAAs4C,qBAAAA,CAAA,IAAAt4C,IAAA,EAAAs4C,+BAAAA,CAAA,IAAAt4C,IAAA,EAAAs4C,qBAAAA,CAAA,IAAAt4C,IAAA,EAAAs4C,mBAAAA,CAAA,IAAAt4C,IAAA,OAGd,KAEA,CACAk4C,GAAA,EAAA5X,GAAA4X,EAAA5X,CAAA,GACAiV,CAAAA,EAAAE,OAAA,KAIAF,EAAA/2C,GAAA,CAAA9D,OAAAgX,MAAA,IAAyC4uB,EAAA1vB,CAAA,CAAA0vB,EAAA,IAAAliC,KAAA,CAAAmnB,CAAA,IAAA/mB,GAAA,EACzCoS,EAAAvE,MAAA,CAAAi0B,GAAAxzB,EAAA,UAAAyoC,EAAAhwB,CAAA,MACAzY,IACA/P,GACA,CAGA,GAAAwoB,mBAAAA,CAAA,IAAAvlB,IAAA,EAEA,IAAAggC,EAAA,CACAhgC,KAAA,WACAy1C,QAAA,GACAr3C,MAAA1D,OAAAgX,MAAA,IAAmC6T,CAAA,IAAAnnB,KAAA,EAEnCI,IAAAmK,KAAAA,CACA,EACA4sC,EAAAvV,EACApvB,EAAAvE,MAAA,CAAAS,EAAA,WAAAkzB,EAAAza,CAAA,MACAzY,IACA/P,IACAm7C,EAAAvvC,KAAAA,EACAu+B,EAAA,EACA,CACA,CACA,CAEA,OADAt2B,CAAA,CAAAxS,EAAA,IAAAq3C,OAAA,CAAA2C,EACAr7C,CACA,EAzJA6T,EADAonC,EAAAxa,GAAA,GACA1wB,IAKA,IADAA,EAAA,GACA,EAAAA,EAAA8D,EAAA7T,MAAA,GACA,IAAAm0B,EAAA0iB,CAAA,CAAAhjC,CAAA,CAAA9D,EAAA,KACUqmC,GAAG93C,IAAA,CAAA61B,EAAAtgB,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,GACbkxB,CAAA,CAAAtgB,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA3E,IAAA,CAAAX,OAAAgX,MAAA,EACA0zB,eAAAx0B,CAAA,CAAA9D,EAAA,IAAAs4B,cAAA,EACSj9B,GAAAyI,CAAA,CAAA9D,EAAA,IAET,CAGA,GAAA3E,EAAA4vC,UAAA,CAAAh7C,MAAA,IACA,IAAAooC,EAAAh9B,EAAA4vC,UAAA,CAAA5vC,EAAA4vC,UAAA,CAAAh7C,MAAA,IAEAm0B,CADAiU,CAAA,KAAAkO,EAAA,EACAh4C,IAAA,CAAA8M,EAAAQ,KAAAA,EAAAw8B,CAAA,IACA,CAkBA,IAfA2S,EAAA35C,QAAA,EACAC,MAAag1C,GAAKxiC,EAAA7T,MAAA,GAAA6T,CAAA,OAAAxS,KAAA,EAClBC,KAAA,EACAP,OAAA,EACAs1B,OAAA,CACA,GACA50B,IAAW40C,GAAKxiC,EAAA7T,MAAA,GAAA6T,CAAA,CAAAA,EAAA7T,MAAA,OAAAyB,GAAA,EAChBH,KAAA,EACAP,OAAA,EACAs1B,OAAA,CACA,EACA,EAGAtmB,EAAA,GACA,EAAAA,EAAA8mC,EAAAC,UAAA,CAAA92C,MAAA,EACA+6C,EAAAlE,EAAAC,UAAA,CAAA/mC,EAAA,CAAAgrC,IAAAA,EAEA,OAAAA,CACA,EA4HA,SAAA9D,EAAAjhC,CAAA,CAAAwlC,CAAA,EACA,OAOA,SAAApX,CAAA,EACAlzB,EAAA5S,IAAA,MAAA0X,EAAAouB,GAAAA,GACAoX,GAAAA,EAAAl9C,IAAA,MAAA8lC,EACA,CACA,CAKA,SAAAuN,IACA,KAAAhU,KAAA,CAAAx7B,IAAA,EACAc,KAAA,WACAyG,SAAA,IAEA,CAKA,SAAAwH,EAAA3P,CAAA,CAAA6iC,CAAA,CAAAqX,CAAA,EAIAC,IAHA,CAAA/d,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAEA0J,QAAA,CACAvH,IAAA,CAAAZ,GACA,KAAAo8B,KAAA,CAAAx7B,IAAA,CAAAZ,GACA,KAAAy5C,UAAA,CAAA74C,IAAA,EAAAiiC,EAAAqX,GAAA7vC,KAAAA,EAAA,EACArK,EAAAH,QAAA,EACAC,MAAag1C,GAAKjS,EAAA/iC,KAAA,EAElBI,IAAAmK,KAAAA,CACA,CACA,CAUA,SAAA2tC,EAAAiC,CAAA,EACA,OAOA,SAAApX,CAAA,EACAoX,GAAAA,EAAAl9C,IAAA,MAAA8lC,GACAhzB,EAAA9S,IAAA,MAAA8lC,EACA,CACA,CAKA,SAAAhzB,EAAAgzB,CAAA,CAAAuX,CAAA,EACA,IAAAp6C,EAAA,KAAAo8B,KAAA,CAAA8C,GAAA,GACA9b,EAAA,KAAAq2B,UAAA,CAAAva,GAAA,GACA,GAAA9b,EAKMA,CAAA,IAAA1hB,IAAA,GAAAmhC,EAAAnhC,IAAA,GACN04C,EACAA,EAAAr9C,IAAA,MAAA8lC,EAAAzf,CAAA,KAGAwP,CADAxP,CAAA,KAAA2xB,EAAA,EACAh4C,IAAA,MAAA8lC,EAAAzf,CAAA,WATA,6BAAAyf,EAAAnhC,IAAA,OAA8D05B,EAAiB,CAC/Et7B,MAAA+iC,EAAA/iC,KAAA,CACAI,IAAA2iC,EAAA3iC,GAAA,GACO,mBASPF,CAAAA,EAAAH,QAAA,CAAAK,GAAA,CAAwB40C,GAAKjS,EAAA3iC,GAAA,CAC7B,CAKA,SAAAw4C,IACA,MAAW,GAAA2B,GAAAC,CAAA,EAAQ,KAAAle,KAAA,CAAA8C,GAAA,GACnB,CAuJA,SAAA0W,EAAA/S,CAAA,EAGA,IAAAsX,EAAAn6C,IAFA,CAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAEA0J,QAAA,CACA0+B,EAAAsT,CAAA,CAAAA,EAAA17C,MAAA,IACAooC,GAAAA,SAAAA,EAAAnlC,IAAA,GAGAmlC,CADAA,EA8aA,CACAnlC,KAAA,OACA9D,MAAA,EACA,CAjbA,EACAiC,QAAA,EACAC,MAAeg1C,GAAKjS,EAAA/iC,KAAA,EAEpBI,IAAAmK,KAAAA,CACA,EACA8vC,EAAAv5C,IAAA,CAAAimC,IAEA,KAAAzK,KAAA,CAAAx7B,IAAA,CAAAimC,EACA,CAOA,SAAAsR,EAAAtV,CAAA,EACA,IAAAgE,EAAA,KAAAzK,KAAA,CAAA8C,GAAA,EACA2H,CAAAA,EAAAjpC,KAAA,OAAAkpC,cAAA,CAAAjE,GACAgE,EAAAhnC,QAAA,CAAAK,GAAA,CAAwB40C,GAAKjS,EAAA3iC,GAAA,CAC7B,CA2BA,SAAA24C,IACA,KAAAx+B,IAAA,CAAA4+B,WAAA,GACA,CA6LA,SAAAX,EAAAzV,CAAA,EACA,KAAAxoB,IAAA,CAAAo+B,sBAAA,CAAA5V,EAAAnhC,IAAA,CAiEA,SAAAq0C,IACA,OACAr0C,KAAA,OACAkb,KAAA,KACAuvB,KAAA,KACAvuC,MAAA,EACA,CACA,CA8BA,SAAAotC,IACA,OACAtpC,KAAA,UAEAw2C,MAAA,EACA/vC,SAAA,GAEA,CAGA,SAAAuuC,IACA,OACAh1C,KAAA,OACA,CACA,CAGA,SAAA0W,IACA,OACA1W,KAAA,OACA9D,MAAA,EACA,CACA,CAaA,SAAA2pB,IACA,OACA7lB,KAAA,OACA8jB,MAAA,KACAgX,IAAA,GACAr0B,SAAA,GAEA,CAMA,SAAA2I,EAAA+xB,CAAA,EACA,OACAnhC,KAAA,OACA64C,QAAA1X,gBAAAA,EAAAnhC,IAAA,CACA5B,MAAA,KACAo3C,OAAArU,EAAAsU,OAAA,CACAhvC,SAAA,GAEA,CA6CA,GA7+BA3K,GAA2Bg9C,StClEpBloC,CAAA,EACP,MAAUwvB,GAAWxvB,KAGrB,OAAAA,CACA,EsC6DuCmoC,CJtDhC,SAAcj9C,CAAA,EAMrB,IAAAylC,EAAA,CACAlxB,WAJE,GAAA2oC,GAAAC,CAAA,EAAiB,CAAEC,KAAiB3sC,CAFtCzQ,GAAA,IAEsCiU,UAAA,OAKtCrR,QAAAqU,EAAoBrU,IACpBwT,QAAA,GACAjL,SAAA8L,EAAqB2vB,IACrB2B,KAAAtxB,EAAiBsxB,IACjBH,KAAA,GACA7N,OAAAtjB,EAAmBsjB,IACnBtP,KAAAhU,EAAiB6yB,GACjB,EACA,OAAArE,EAQA,SAAAxuB,EAAArL,CAAA,EACA,OAEA,SAAAmE,CAAA,EACA,OAAastC,SDQN5X,CAAA,CAAA6X,CAAA,CAAAvtC,CAAA,EAEP,IAAA2tB,EAAA,CACA+M,aAAA,GACAC,OAAA,EACAnoC,KAAAwN,GAAAA,EAAAxN,IAAA,IACAP,OAAA+N,GAAAA,EAAA/N,MAAA,IACAs1B,OAAAvnB,GAAAA,EAAAunB,MAAA,GACA,EAEAimB,EAAA,GAEAC,EAAA,GAEAnT,EAAA,GAEAzL,EAAA,GASAvtB,EAAA,CACAk1B,QAAAkX,EAoNA,SAAAC,CAAA,CAAArmC,CAAA,EACAsmC,EAAAD,EAAArmC,EAAAtH,IAAA,CACA,GArNAiH,MAAAymC,EAAAG,GACAxrC,QAsJA,SAAAb,CAAA,EACQ,GAAAo1B,GAAA90B,EAAA,EAAkBN,IAC1BmsB,EAAAn7B,IAAA,GACAm7B,EAAA17B,MAAA,GACA07B,EAAApG,MAAA,EAAA/lB,KAAAA,EAAA,IACAssC,KACM,KAAAtsC,IACNmsB,EAAA17B,MAAA,GACA07B,EAAApG,MAAA,IAIAoG,EAAA+M,YAAA,GACA/M,EAAAgN,MAAA,IAEAhN,EAAA+M,YAAA,GAGA/M,EAAA+M,YAAA,GAIAJ,CAAA,CAAA3M,EAAAgN,MAAA,EAAAzpC,MAAA,GACAy8B,EAAA+M,YAAA,IACA/M,EAAAgN,MAAA,KAKAr+B,EAAA+4B,QAAA,CAAA7zB,CAIA,EAtLAY,MAyLA,SAAAjO,CAAA,CAAA45C,CAAA,EAGA,IAAAzY,EAAAyY,GAAA,GAKA,OAJAzY,EAAAnhC,IAAA,CAAAA,EACAmhC,EAAA/iC,KAAA,CAAA+lC,IACAh8B,EAAAyI,MAAA,CAAA1R,IAAA,UAAAiiC,EAAAh5B,EAAA,EACAuyB,EAAAx7B,IAAA,CAAAiiC,GACAA,CACA,EAjMAhzB,KAoMA,SAAAnO,CAAA,EACA,IAAAmhC,EAAAzG,EAAA8C,GAAA,GAGA,OAFA2D,EAAA3iC,GAAA,CAAA2lC,IACAh8B,EAAAyI,MAAA,CAAA1R,IAAA,SAAAiiC,EAAAh5B,EAAA,EACAg5B,CACA,EAxMA0C,UAAA0V,EAAAG,EAAA,CACA7V,UAAA,EACA,EACA,EAOA17B,EAAA,CACAkF,KAAA,KACA21B,eAAA,GACAjB,WA8EA,SAAA7lC,CAAA,EACAm9C,CAAA,CAAAn9C,EAAAmC,IAAA,EAAAnC,EAAA4B,MAAA,CACA67C,GACA,EAhFA/oC,OAAA,GACAuzB,IAAAA,EACA5C,OAAAA,EACAL,SAAA,KACAkE,eA4CA,SAAAjE,CAAA,CAAA0Y,CAAA,EACA,OAAAC,SAuZA3T,CAAA,CAAA0T,CAAA,EACA,IAIAE,EAJAjtC,EAAA,GAEAD,EAAA,GAGA,OAAAC,EAAAq5B,EAAAppC,MAAA,OAGAb,EAFA,IAAAmqC,EAAAF,CAAA,CAAAr5B,EAAA,CAGA,oBAAAu5B,EACAnqC,EAAAmqC,OACM,OAAAA,GACN,QAEAnqC,EAAA,KACA,KAEA,SAEAA,EAAA,KACA,KAEA,SAEAA,EAAA,OACA,KAEA,SAEAA,EAAA29C,EAAA,QACA,KAEA,SAEA,IAAAA,GAAAE,EAAA,SACA79C,EAAA,IACA,KAEA,SAGAA,EAAAgT,OAAAC,YAAA,CAAAk3B,EAEA,CACA0T,EAAA1T,KAAAA,EACAx5B,EAAA3N,IAAA,CAAAhD,EACA,CACA,OAAA2Q,EAAAE,IAAA,IACA,EAxcA80B,EAAAV,GAAA0Y,EACA,EA7CAhY,YAAAA,EACAI,MAsBA,SAAA3iC,CAAA,QAKA,CAJA6mC,EAAa,GAAAhE,GAAA2J,CAAA,EAAI3F,EAAA7mC,GACjB06C,WAqEA,IAAAC,EACA,KAAAzgB,EAAAgN,MAAA,CAAAL,EAAAppC,MAAA,GACA,IAAAspC,EAAAF,CAAA,CAAA3M,EAAAgN,MAAA,EAGA,oBAAAH,EAKA,IAJA4T,EAAAzgB,EAAAgN,MAAA,CACAhN,EAAA+M,YAAA,IACA/M,CAAAA,EAAA+M,YAAA,IAEA/M,EAAAgN,MAAA,GAAAyT,GAAAzgB,EAAA+M,YAAA,CAAAF,EAAAtpC,MAAA,EACAm9C,KAgBA7sC,EAAAA,EAhBAg5B,EAAAC,UAAA,CAAA9M,EAAA+M,YAAA,EAmBAjL,EAAAA,EAAAjuB,EAnBA,MAmBAiuB,EAAAA,EAhBA+K,EAEA,CACA,IAnFAF,OAAAA,CAAA,CAAAA,EAAAppC,MAAA,KACA,IAEA08C,EAAAL,EAAA,GAGAjxC,EAAAyI,MAAA,CAAqB,GAAAm7B,GAAAC,CAAA,EAAUsN,EAAAnxC,EAAAyI,MAAA,CAAAzI,GAC/BA,EAAAyI,MAAA,CACA,CAlCA,EAOA0qB,EAAA8d,EAAAlsC,QAAA,CAAA7R,IAAA,CAAA8M,EAAAgF,GAWA,OAHAisC,EAAAzoC,UAAA,EACA2oC,EAAAp6C,IAAA,CAAAk6C,GAEAjxC,EA4BA,SAAA05B,EAAAV,CAAA,EACA,OAAAgZ,SA2WAhU,CAAA,CAAAhF,CAAA,MAMAiZ,EALA,IAAAC,EAAAlZ,EAAA/iC,KAAA,CAAAooC,MAAA,CACA8T,EAAAnZ,EAAA/iC,KAAA,CAAAmoC,YAAA,CACAgU,EAAApZ,EAAA3iC,GAAA,CAAAgoC,MAAA,CACAgU,EAAArZ,EAAA3iC,GAAA,CAAA+nC,YAAA,CAGA,GAAA8T,IAAAE,EAEAH,EAAA,CAAAjU,CAAA,CAAAkU,EAAA,CAAA/6C,KAAA,CAAAg7C,EAAAE,GAAA,KACI,CAEJ,GADAJ,EAAAjU,EAAA7mC,KAAA,CAAA+6C,EAAAE,GACAD,EAAA,IACA,IAAAnzC,EAAAizC,CAAA,IACA,iBAAAjzC,EACAizC,CAAA,IAAAjzC,EAAA7H,KAAA,CAAAg7C,GAGAF,EAAA7a,KAAA,EAEA,CACAib,EAAA,GAEAJ,EAAAl7C,IAAA,CAAAinC,CAAA,CAAAoU,EAAA,CAAAj7C,KAAA,GAAAk7C,GAEA,CACA,OAAAJ,CACA,EAtYAjU,EAAAhF,EACA,CAGA,SAAAgD,IAEA,IACAoC,aAAAA,CAAA,CACAC,OAAAA,CAAA,CACAnoC,KAAAA,CAAA,CACAP,OAAAA,CAAA,CACAs1B,OAAAA,CAAA,CACA,CAAMoG,EACN,OACA+M,aAAAA,EACAC,OAAAA,EACAnoC,KAAAA,EACAP,OAAAA,EACAs1B,OAAAA,CACA,CACA,CAgIA,SAAAsmB,EAAA9wC,CAAA,CAAAuK,CAAA,EACAA,EAAAsnC,OAAA,EACA,CAUA,SAAAlB,EAAAmB,CAAA,CAAAd,CAAA,EACA,OAeA,SAAAvpC,CAAA,CAAA4gC,CAAA,CAAA0J,CAAA,EAEA,IAAAC,EAEAC,EAEAnX,EAEAvwB,EACA,OAAA/X,MAAAF,OAAA,CAAAmV,GACAyqC,EAAAzqC,GAAA,aAAAA,EAEAyqC,EAAA,CAAqDzqC,EAAA,EAcrD,SAAAhD,CAAA,EACA,IAAAhH,EAAAgH,OAAAA,GAAAnC,CAAA,CAAAmC,EAAA,CACAT,EAAAS,OAAAA,GAAAnC,EAAA05B,IAAA,CAKA,OAAAkW,EAJA,IAGA1/C,MAAAF,OAAA,CAAAmL,GAAAA,EAAAA,EAAA,CAAAA,EAAA,OAAAjL,MAAAF,OAAA,CAAA0R,GAAAA,EAAAA,EAAA,CAAAA,EAAA,MACAS,EACA,EAWA,SAAAytC,EAAA1rC,CAAA,QAGA,CAFAwrC,EAAAxrC,EACAyrC,EAAA,EACAzrC,IAAAA,EAAArS,MAAA,EACA49C,EAEAI,EAAA3rC,CAAA,CAAAyrC,EAAA,CACA,CAUA,SAAAE,EAAAvB,CAAA,EACA,OAGA,SAAAnsC,CAAA,QAaA,CARA8F,EAAA6nC,WAiEA,IAAAC,EAAA9W,IACA+W,EAAA/yC,EAAA+4B,QAAA,CACAia,EAAAhzC,EAAAu7B,gBAAA,CACA0X,EAAAjzC,EAAAyI,MAAA,CAAA7T,MAAA,CACAs+C,EAAAjgD,MAAAyQ,IAAA,CAAA6uB,GACA,OACA7uB,KAAAuvC,EACAX,QASA,WACAjhB,EAAAyhB,EACA9yC,EAAA+4B,QAAA,CAAAga,EACA/yC,EAAAu7B,gBAAA,CAAAyX,EACAhzC,EAAAyI,MAAA,CAAA7T,MAAA,CAAAq+C,EACA1gB,EAAA2gB,EACA1B,GACA,CAfA,CAgBA,IAxFAjW,EAAA8V,EACAA,EAAAvsC,OAAA,EACA9E,CAAAA,EAAAu7B,gBAAA,CAAA8V,CAAA,EAKAA,EAAAz9C,IAAA,EAAAoM,EAAAo5B,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,CAAAwtC,EAAAz9C,IAAA,GACAqR,EAAAC,GAEAmsC,EAAAtsC,QAAA,CAAA7R,IAAA,CAIAu+C,EAAAl/C,OAAAgX,MAAA,CAAAhX,OAAAqY,MAAA,CAAA5K,GAAAyxC,GAAAzxC,EAAAgF,EAAArI,EAAAsI,GAAAC,EACA,CACA,CAGA,SAAAvI,EAAAuI,CAAA,EAGA,OADAqtC,EAAAhX,EAAAvwB,GACA89B,CACA,CAGA,SAAA7jC,EAAAC,CAAA,QAGA,CADA8F,EAAAsnC,OAAA,GACA,EAAAI,EAAAD,EAAA79C,MAAA,EACAg+C,EAAAH,CAAA,CAAAC,EAAA,EAEAF,CACA,CACA,CACA,CAUA,SAAAlB,EAAAD,CAAA,CAAA3tC,CAAA,EACA2tC,EAAA7oC,UAAA,GAAA2oC,EAAAttC,QAAA,CAAAwtC,IACAF,EAAAp6C,IAAA,CAAAs6C,GAEAA,EAAA1oC,OAAA,EACM,GAAAqxB,GAAAvhC,CAAA,EAAMuH,EAAAyI,MAAA,CAAA/E,EAAA1D,EAAAyI,MAAA,CAAA7T,MAAA,CAAA8O,EAAA2tC,EAAA1oC,OAAA,CAAA3I,EAAAyI,MAAA,CAAAtR,KAAA,CAAAuM,GAAA1D,IAEZqxC,EAAAnQ,SAAA,EACAlhC,CAAAA,EAAAyI,MAAA,CAAA4oC,EAAAnQ,SAAA,CAAAlhC,EAAAyI,MAAA,CAAAzI,EAAA,CAEA,CA0CA,SAAAwxC,IACAngB,EAAAn7B,IAAA,IAAAg7C,GAAA7f,EAAA17B,MAAA,KACA07B,EAAA17B,MAAA,CAAAu7C,CAAA,CAAA7f,EAAAn7B,IAAA,EACAm7B,EAAApG,MAAA,EAAAimB,CAAA,CAAA7f,EAAAn7B,IAAA,IAEA,CACA,EC1c4BkjC,EAAA75B,EAAAmE,EAC5B,CACA,CACA,GIuB4C/P,GAAAmL,QAAA,GAAAg7B,KAAA,CAA2BqZ,CHtDvEx9C,EAAA,EACA4wC,EAAA,GAEAtwC,EAAA,GAOA,SAAAlC,CAAA,CAAAs3C,CAAA,CAAAh1C,CAAA,MAIAP,EAEA6jC,EAEAV,EAEAma,EAEAluC,EAVA,IAAA84B,EAAA,GAqBA,IAVAjqC,EAAAwyC,EAAA,kBAAAxyC,EAAAA,EAAApB,QAAA,OAAA0gD,YAAAhI,GAAA7qC,KAAAA,GAAAoqC,MAAA,CAAA72C,EAAA,EACAklC,EAAA,EACAsN,EAAA,GACAtwC,IAEA,QAAAlC,EAAAoqC,UAAA,KACAlF,IAEAhjC,EAAAuK,KAAAA,GAEAy4B,EAAAllC,EAAAa,MAAA,GAKA,GAJA01C,GAAAgJ,SAAA,CAAAra,EAEAma,EAAAt9C,CADAA,EAAAw0C,GAAApzC,IAAA,CAAAnD,EAAA,GACA+B,KAAA0K,IAAA1K,EAAA6O,KAAA,CAAA7O,EAAA6O,KAAA,CAAA5Q,EAAAa,MAAA,CACAsQ,EAAAnR,EAAAoqC,UAAA,CAAAiV,GACA,CAAAt9C,EAAA,CACAywC,EAAAxyC,EAAAoD,KAAA,CAAA8hC,GACA,KACA,CACA,GAAA/zB,KAAAA,GAAA+zB,IAAAma,GAAA9H,EACAtN,EAAAjnC,IAAA,KACAu0C,EAAA9qC,KAAAA,OAUA,OARA8qC,IACAtN,EAAAjnC,IAAA,KACAu0C,EAAA9qC,KAAAA,GAEAy4B,EAAAma,IACApV,EAAAjnC,IAAA,CAAAhD,EAAAoD,KAAA,CAAA8hC,EAAAma,IACAz9C,GAAAy9C,EAAAna,GAEA/zB,GACA,OAEA84B,EAAAjnC,IAAA,QACApB,IACA,KAEA,QAIA,IAFAgkC,EAAAlC,EAAAA,KAAA8b,IAAA,CAAA59C,EAAA,GACAqoC,EAAAjnC,IAAA,KACApB,IAAAgkC,GAAAqE,EAAAjnC,IAAA,KACA,KAEA,SAEAinC,EAAAjnC,IAAA,KACApB,EAAA,EACA,KAEA,SAEA21C,EAAA,GACA31C,EAAA,CAEA,CAEAsjC,EAAAma,EAAA,CACA,CAMA,OALA/8C,IACAi1C,GAAAtN,EAAAjnC,IAAA,KACAwvC,GAAAvI,EAAAjnC,IAAA,CAAAwvC,GACAvI,EAAAjnC,IAAA,QAEAinC,CACA,GIjFuBoN,ED8C0DC,EAAA,MCrCjF,CACA,CEnCA,IAAAmI,GAAA,iBAAA7Y,KAAAA,KAAA8Y,WAEAC,GAAA,CAAAC,EAAAlzC,KACA,IAAA4O,EAAA,CAAAukC,EAAAjvC,KACAgvC,EAAAxzC,GAAA,CAAAwE,EAAAivC,GACAA,GAGAC,EAAAlvC,IACA,GAAAgvC,EAAAvwC,GAAA,CAAAuB,GACA,OAAAgvC,EAAArwC,GAAA,CAAAqB,GAEA,IAAA9M,EAAA9D,EAAA,CAAA0M,CAAA,CAAAkE,EAAA,CACA,OAAA9M,GACA,KDpBO,ECqBP,KDtBO,GCuBP,OAAAwX,EAAAtb,EAAA4Q,EACA,MDtBO,ECsBS,CAChB,IAAA3R,EAAAqc,EAAA,GAAA1K,GACA,QAAAA,KAAA5Q,EACAf,EAAA+D,IAAA,CAAA88C,EAAAlvC,IACA,OAAA3R,CACA,CACA,KD3BO,EC2BU,CACjB,IAAAmrB,EAAA9O,EAAA,GAA4B1K,GAC5B,QAAAtR,EAAAsR,EAAA,GAAA5Q,EACAoqB,CAAA,CAAA01B,EAAAxgD,GAAA,CAAAwgD,EAAAlvC,GACA,OAAAwZ,CACA,CACA,KDhCO,ECiCP,OAAA9O,EAAA,IAAAykC,KAAA//C,GAAA4Q,EACA,MDjCO,ECiCU,CACjB,IAAerO,OAAAA,CAAA,CAAAy9C,MAAAA,CAAA,EAAehgD,EAC9B,OAAAsb,EAAA,IAAA2kC,OAAA19C,EAAAy9C,GAAApvC,EACA,CACA,KDpCO,ECoCO,CACd,IAAA5B,EAAAsM,EAAA,IAAAvO,IAAA6D,GACA,QAAAtR,EAAAsR,EAAA,GAAA5Q,EACAgP,EAAA5C,GAAA,CAAA0zC,EAAAxgD,GAAAwgD,EAAAlvC,IACA,OAAA5B,CACA,CACA,KDzCO,ECyCO,CACd,IAAA5C,EAAAkP,EAAA,IAAA2jB,IAAAruB,GACA,QAAAA,KAAA5Q,EACAoM,EAAAkI,GAAA,CAAAwrC,EAAAlvC,IACA,OAAAxE,CACA,CACA,KD9CO,EC8CS,CAChB,IAAevM,KAAAA,CAAA,CAAAs+B,QAAAA,CAAA,EAAen+B,EAC9B,OAAAsb,EAAA,IAAAmkC,EAAA,CAAA5/C,EAAA,CAAAs+B,GAAAvtB,EACA,CACA,KDjDO,ECkDP,OAAA0K,EAAA4kC,OAAAlgD,GAAA4Q,EACA,cACA,OAAA0K,EAAA9c,OAAA0hD,OAAAlgD,IAAA4Q,EACA,mBACA,OAAA0K,EAAA,IAAA6kC,WAAAngD,GAAAwyC,MAAA,CAAAxyC,EACA,iBACA,IAAgBwyC,OAAAA,CAAA,EAAS,IAAA2N,WAAAngD,GACzB,OAAAsb,EAAA,IAAA8kC,SAAA5N,GAAAxyC,EACA,CACA,CACA,OAAAsb,EAAA,IAAAmkC,EAAA,CAAA37C,EAAA,CAAA9D,GAAA4Q,EACA,EAEA,OAAAkvC,CACA,EAWOO,GAAAC,GAAAX,GAAA,IAAA5yC,IAAAuzC,GAAA,GC3EP,CAAO1hD,SAAQ2hD,EAAA,EAAE,GACjB,CAAO3wC,KAAAA,EAAA,EAAMpR,OAEbmyB,GAAA3wB,IACA,IAAA8D,EAAA,OAAA9D,EACA,GAAA8D,WAAAA,GAAA,CAAA9D,EACA,OFdO,EEcc8D,EAAA,CAErB,IAAA08C,EAAmBD,GAAQphD,IAAA,CAAAa,GAAAoD,KAAA,OAC3B,OAAAo9C,GACA,YACA,OFlBO,EEKP,GAamB,KACnB,SACA,OFnBO,EEIP,GAeoB,KACpB,OACA,OFpBO,EEGP,GAiBkB,KAClB,SACA,OFrBO,EEEP,GAmBoB,KACpB,MACA,OFtBO,EECP,GAqBiB,KACjB,MACA,OFvBO,EEAP,GAuBiB,KACjB,WACA,OF9BO,EE8BYA,EAAA,QAGnB,EAAA1wC,QAAA,UACA,CFlCO,EEkCU0wC,EAAA,CAEjBA,EAAA1wC,QAAA,UACA,CF/BO,EE+BU0wC,EAAA,CAEjB,CFtCO,EEsCSA,EAAA,EAGhBC,GAAA,EAAAC,EAAA58C,EAAA,GACA48C,IAAAA,GACA58C,CAAAA,aAAAA,GAAAA,WAAAA,CAAA,EAGA68C,GAAA,CAAAC,EAAAC,EAAAjB,EAAAlzC,KAEA,IAAA4O,EAAA,CAAAukC,EAAA7/C,KACA,IAAA4Q,EAAAlE,EAAA1J,IAAA,CAAA68C,GAAA,EAEA,OADAD,EAAAxzC,GAAA,CAAApM,EAAA4Q,GACAA,CACA,EAEAkwC,EAAA9gD,IACA,GAAA4/C,EAAAvwC,GAAA,CAAArP,GACA,OAAA4/C,EAAArwC,GAAA,CAAAvP,GAEA,IAAA0gD,EAAA58C,EAAA,CAAA6sB,GAAA3wB,GACA,OAAA0gD,GACA,KF9DO,EE8Da,CACpB,IAAAlY,EAAAxoC,EACA,OAAA8D,GACA,aACA48C,EF1DO,EE2DPlY,EAAAxoC,EAAApB,QAAA,GACA,KACA,gBACA,aACA,GAAAgiD,EACA,uCAAA98C,GACA0kC,EAAA,KACA,KACA,iBACA,OAAAltB,EAAA,CF7EO,GE6EoB,CAAAtb,EAC3B,CACA,OAAAsb,EAAA,CAAAolC,EAAAlY,EAAA,CAAAxoC,EACA,CACA,KF/EO,EE+ES,CAChB,GAAA8D,EAAA,CACA,IAAAw1C,EAAAt5C,EAOA,MANA8D,aAAAA,EACAw1C,EAAA,IAAA6G,WAAAngD,EAAAwyC,MAAA,EAEA,gBAAA1uC,GACAw1C,CAAAA,EAAA,IAAA6G,WAAAngD,EAAA,EAEAsb,EAAA,CAAAxX,EAAA,IAAAw1C,EAAA,EAAAt5C,EACA,CAEA,IAAAf,EAAA,GACA2R,EAAA0K,EAAA,CAAAolC,EAAAzhD,EAAA,CAAAe,GACA,QAAAwoC,KAAAxoC,EACAf,EAAA+D,IAAA,CAAA89C,EAAAtY,IACA,OAAA53B,CACA,CACA,KFhGO,EEgGU,CACjB,GAAA9M,EACA,OAAAA,GACA,aACA,OAAAwX,EAAA,CAAAxX,EAAA9D,EAAApB,QAAA,IAAAoB,EACA,eACA,aACA,aACA,OAAAsb,EAAA,CAAAxX,EAAA9D,EAAA+gD,OAAA,IAAA/gD,EACA,CAGA,GAAA6gD,GAAA,WAAA7gD,EACA,OAAA8gD,EAAA9gD,EAAAghD,MAAA,IAEA,IAAAhqC,EAAA,GACApG,EAAA0K,EAAA,CAAAolC,EAAA1pC,EAAA,CAAAhX,GACA,QAAAV,KAAAsQ,GAAA5P,GACA4gD,CAAAA,GAAA,CAAAH,GAAA9vB,GAAA3wB,CAAA,CAAAV,EAAA,KACA0X,EAAAhU,IAAA,EAAA89C,EAAAxhD,GAAAwhD,EAAA9gD,CAAA,CAAAV,EAAA,IAEA,OAAAsR,CACA,CACA,KFtHO,EEuHP,OAAA0K,EAAA,CAAAolC,EAAA1gD,EAAAihD,WAAA,IAAAjhD,EACA,MFvHO,EEuHU,CACjB,IAAeuC,OAAAA,CAAA,CAAAy9C,MAAAA,CAAA,EAAehgD,EAC9B,OAAAsb,EAAA,CAAAolC,EAAA,CAA0Bn+C,OAAAA,EAAAy9C,MAAAA,CAAA,EAAc,CAAAhgD,EACxC,CACA,KF1HO,EE0HO,CACd,IAAAgX,EAAA,GACApG,EAAA0K,EAAA,CAAAolC,EAAA1pC,EAAA,CAAAhX,GACA,QAAAV,EAAAkpC,EAAA,GAAAxoC,EACA4gD,CAAAA,GAAA,CAAAH,CAAAA,GAAA9vB,GAAArxB,KAAAmhD,GAAA9vB,GAAA6X,GAAA,IACAxxB,EAAAhU,IAAA,EAAA89C,EAAAxhD,GAAAwhD,EAAAtY,GAAA,EAEA,OAAA53B,CACA,CACA,KFlIO,EEkIO,CACd,IAAAoG,EAAA,GACApG,EAAA0K,EAAA,CAAAolC,EAAA1pC,EAAA,CAAAhX,GACA,QAAAwoC,KAAAxoC,EACA4gD,CAAAA,GAAA,CAAAH,GAAA9vB,GAAA6X,GAAA,GACAxxB,EAAAhU,IAAA,CAAA89C,EAAAtY,IAEA,OAAA53B,CACA,CACA,CAEA,IAAWutB,QAAAA,CAAA,EAASn+B,EACpB,OAAAsb,EAAA,CAAAolC,EAAA,CAAsB7gD,KAAAiE,EAAAq6B,QAAAA,CAAA,EAAoB,CAAAn+B,EAC1C,EAEA,OAAA8gD,CACA,EAcQI,GAAA,CAAAlhD,EAAA,CAA2B6gD,KAAAA,CAAA,CAAAM,MAAAA,CAAA,EAAa,EAAI,IACpD,IAAAz0C,EAAA,GACA,OAAAi0C,GAAA,CAAAE,CAAAA,GAAAM,CAAA,IAAAN,EAAA,IAAA9zC,IAAAL,GAAA1M,GAAA0M,CACA,EC3JA,IAAA00C,GAAe,mBAAAC,gBAEf,CAAAC,EAAA1hD,IACAA,GAAA,UAAAA,GAAA,UAAAA,CAAA,EACMygD,GAAYa,GAASI,EAAA1hD,IAAAyhD,gBAAAC,GAE3B,CAAAA,EAAA1hD,IAAoBygD,GAAYa,GAASI,EAAA1hD,ICmClC,SAAA2hD,GAAAvhD,CAAA,EAEP,IAAA2Q,EAAA,GACAC,EAAA,GACA1O,EAAA,EACAs/C,EAAA,EACA,OAAA5wC,EAAA5Q,EAAAa,MAAA,GACA,IAAAsQ,EAAAnR,EAAAoqC,UAAA,CAAAx5B,GAEAnP,EAAA,GAGA,GAAA0P,KAAAA,GAAuB,GAAAo1B,GAAA0I,EAAA,EAAiBjvC,EAAAoqC,UAAA,CAAAx5B,EAAA,KAAiC,GAAA21B,GAAA0I,EAAA,EAAiBjvC,EAAAoqC,UAAA,CAAAx5B,EAAA,IAC1F4wC,EAAA,OAGA,GAAArwC,EAAA,IACA,oBAAmB/I,IAAA,CAAA4K,OAAAC,YAAA,CAAA9B,KACnB1P,CAAAA,EAAAuR,OAAAC,YAAA,CAAA9B,EAAA,OAIA,GAAAA,EAAA,OAAAA,EAAA,OACA,IAAAy0B,EAAA5lC,EAAAoqC,UAAA,CAAAx5B,EAAA,EAGAO,CAAAA,EAAA,OAAAy0B,EAAA,OAAAA,EAAA,OACAnkC,EAAAuR,OAAAC,YAAA,CAAA9B,EAAAy0B,GACA4b,EAAA,GAIA//C,EAAA,GAEA,MAGAA,EAAAuR,OAAAC,YAAA,CAAA9B,GAEA1P,IACAkP,EAAA3N,IAAA,CAAAhD,EAAAoD,KAAA,CAAAlB,EAAA0O,GAAA6wC,mBAAAhgD,IACAS,EAAA0O,EAAA4wC,EAAA,EACA//C,EAAA,IAEA+/C,IACA5wC,GAAA4wC,EACAA,EAAA,EAEA,CACA,OAAA7wC,EAAAE,IAAA,KAAA7Q,EAAAoD,KAAA,CAAAlB,EACA,CC1BO,SAAAw/C,GAAAh1C,CAAA,CAAAi1C,CAAA,EAEP,IAAAhxC,EAAA,EAAmB7M,KAAA,OAAA9D,MAAA,KAAyB,CAW5C,OATA2hD,EAAA,GACAhxC,EAAA3N,IAAA,EACAc,KAAA,UACA07B,QAAA,MACA1oB,WAAA,GACAvM,SAAA,EAAkBzG,KAAA,OAAA9D,MAAAgT,OAAA2uC,EAAA,EAA8C,GAIhEhxC,CACA,CAaO,SAAAixC,GAAAC,CAAA,CAAAF,CAAA,EACP,MACA,qBACAE,CAAAA,EAAA,GACAF,CAAAA,EAAA,MAAAA,EAAA,GAEA,gBS3FO,SAAAG,GAAA1iB,CAAA,CAAAh9B,CAAA,EACP,IAAA2/C,EAAA3/C,EAAA03C,aAAA,CACAkI,EAAA,IAQA,GANAD,cAAAA,EACAC,GAAA,KACI,SAAAD,GACJC,CAAAA,GAAA,IAAA5/C,CAAAA,EAAA2c,KAAA,EAAA3c,EAAA2vC,UAAA,OAGA3vC,mBAAAA,EAAA0B,IAAA,CACA,QAAaA,KAAA,OAAA9D,MAAA,KAAAoC,EAAAqO,GAAA,CAAAuxC,CAAA,EAA8C,CAG3D,IAAAC,EAAA7iB,EAAA1uB,GAAA,CAAAtO,GACA6I,EAAAg3C,CAAA,IAEAh3C,GAAAA,SAAAA,EAAAnH,IAAA,CACAmH,EAAAjL,KAAA,KAAAiL,EAAAjL,KAAA,CAEAiiD,EAAA1uC,OAAA,EAAsBzP,KAAA,OAAA9D,MAAA,MAGtB,IAAAipC,EAAAgZ,CAAA,CAAAA,EAAAphD,MAAA,IAQA,OANAooC,GAAAA,SAAAA,EAAAnlC,IAAA,CACAmlC,EAAAjpC,KAAA,EAAAgiD,EAEAC,EAAAj/C,IAAA,EAAmBc,KAAA,OAAA9D,MAAAgiD,CAAA,GAGnBC,CACA,CMgEA,SAAAC,GAAA9/C,CAAA,EACA,IAAAk3C,EAAAl3C,EAAAk3C,MAAA,CAEA,OAAAA,MAAAA,EACAl3C,EAAAmI,QAAA,CAAA1J,MAAA,GACAy4C,CACA,CQ/EA,SAAA6I,GAAAniD,CAAA,CAAAkC,CAAA,CAAAI,CAAA,EACA,IAAA67C,EAAA,EACAE,EAAAr+C,EAAAa,MAAA,CAEA,GAAAqB,EAAA,CACA,IAAAiP,EAAAnR,EAAAw7C,WAAA,CAAA2C,GAEA,KAAAhtC,IAAAA,GAAAA,KAAAA,GACAgtC,IACAhtC,EAAAnR,EAAAw7C,WAAA,CAAA2C,EAEA,CAEA,GAAA77C,EAAA,CACA,IAAA6O,EAAAnR,EAAAw7C,WAAA,CAAA6C,EAAA,GAEA,KAAAltC,IAAAA,GAAAA,KAAAA,GACAktC,IACAltC,EAAAnR,EAAAw7C,WAAA,CAAA6C,EAAA,EAEA,CAEA,OAAAA,EAAAF,EAAAn+C,EAAAoD,KAAA,CAAA+6C,EAAAE,GAAA,EACA,CGvCO,IAAM+D,GAAQ,CACrBC,WzBXO,SAAAjjB,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,aACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,CAAAoX,EAAA1uB,GAAA,CAAAtO,GAAA,GACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EyBEA6xC,MxBXO,SAAApjB,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CAAkB7M,KAAA,UAAA07B,QAAA,KAAA1oB,WAAA,GAA8CvM,SAAA,IAEhE,OADA60B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACA,CAAAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,GAAA,CAA0C7M,KAAA,OAAA9D,MAAA,MAA0B,EwBQpEmR,KvBZO,SAAAiuB,CAAA,CAAAh9B,CAAA,EACP,IAAApC,EAAAoC,EAAApC,KAAA,CAAAoC,EAAApC,KAAA,SAEA8W,EAAA,EAEA1U,CAAAA,EAAA4c,IAAA,EACAlI,CAAAA,EAAAmF,SAAA,cAAA7Z,EAAA4c,IAAA,GAKA,IAAArO,EAAA,CACA7M,KAAA,UACA07B,QAAA,OACA1oB,WAAAA,EACAvM,SAAA,EAAgBzG,KAAA,OAAA9D,MAAAA,CAAA,EAAoB,EAapC,OAVAoC,EAAAmsC,IAAA,EACA59B,CAAAA,EAAA8L,IAAA,EAAmB8xB,KAAAnsC,EAAAmsC,IAAA,GAGnBnP,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GAIAA,EAAA,CAAY7M,KAAA,UAAA07B,QAAA,MAAA1oB,WAAA,GAA+CvM,SAAA,CAH3DoG,EAAAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,GAG2D,EAC3DyuB,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAA,CACA,EuBhBAnE,OtBdO,SAAA4yB,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,MACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EsBKAioC,SrBfO,SAAAxZ,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,KACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EqBMA8xC,kBpBjBO,SAAArjB,CAAA,CAAAh9B,CAAA,MASPsgD,EARA,IAAAC,EACA,iBAAAvjB,EAAAx/B,OAAA,CAAA+iD,aAAA,CACAvjB,EAAAx/B,OAAA,CAAA+iD,aAAA,CACA,gBACAl4C,EAAAuI,OAAA5Q,EAAA2vC,UAAA,EAAA/pC,WAAA,GACA46C,EAAiBrB,GAAY92C,EAAApC,WAAA,IAC7BuI,EAAAwuB,EAAAyjB,aAAA,CAAAzzC,OAAA,CAAA3E,GAIAq4C,EAAA1jB,EAAA2jB,cAAA,CAAAxzC,GAAA,CAAA9E,EAEAq4C,MAAAr2C,IAAAq2C,GACAA,EAAA,EACA1jB,EAAAyjB,aAAA,CAAA7/C,IAAA,CAAAyH,GACAi4C,EAAAtjB,EAAAyjB,aAAA,CAAAhiD,MAAA,EAEA6hD,EAAA9xC,EAAA,EAGAkyC,GAAA,EACA1jB,EAAA2jB,cAAA,CAAA32C,GAAA,CAAA3B,EAAAq4C,GAGA,IAAAn5B,EAAA,CACA7lB,KAAA,UACA07B,QAAA,IACA1oB,WAAA,CACAgH,KAAA,IAAA6kC,EAAA,MAAAC,EACAn4C,GACAk4C,EACA,SACAC,EACAE,CAAAA,EAAA,MAAAA,EAAA,IACAE,gBAAA,GACAjrC,gBAAA,oBAEAxN,SAAA,EAAgBzG,KAAA,OAAA9D,MAAAgT,OAAA0vC,EAAA,EAAqC,EAErDtjB,EAAAkjB,KAAA,CAAAlgD,EAAAunB,GAGA,IAAAs5B,EAAA,CACAn/C,KAAA,UACA07B,QAAA,MACA1oB,WAAA,GACAvM,SAAA,CAAAof,EAAA,EAGA,OADAyV,EAAAkjB,KAAA,CAAAlgD,EAAA6gD,GACA7jB,EAAAmjB,SAAA,CAAAngD,EAAA6gD,EACA,EoBjCA7V,QnBjBO,SAAAhO,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,IAAAp9B,EAAAk4C,KAAA,CACAxjC,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EmBQA6J,KlBhBO,SAAa4kB,CAAA,CAAAh9B,CAAA,EACpB,GAAAg9B,EAAAx/B,OAAA,CAAAsjD,kBAAA,EAEA,IAAAvyC,EAAA,CAAoB7M,KAAA,MAAA9D,MAAAoC,EAAApC,KAAA,EAEpB,OADAo/B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,CAGA,EkBQAwyC,ehBjBO,SAAA/jB,CAAA,CAAAh9B,CAAA,EACP,IAAAqI,EAAAuI,OAAA5Q,EAAA2vC,UAAA,EAAA/pC,WAAA,GACAuN,EAAA6pB,EAAAgkB,cAAA,CAAA7zC,GAAA,CAAA9E,GAEA,IAAA8K,EACA,OAAWusC,GAAM1iB,EAAAh9B,GAIjB,IAAA0U,EAAA,CAAsBvW,IAAKghD,GAAYhsC,EAAAqpB,GAAA,MAAAnuB,IAAArO,EAAAqO,GAAA,CAEvC,QAAA8E,EAAAqS,KAAA,EAAArS,KAAA9I,IAAA8I,EAAAqS,KAAA,EACA9Q,CAAAA,EAAA8Q,KAAA,CAAArS,EAAAqS,KAAA,EAIA,IAAAjX,EAAA,CAAkB7M,KAAA,UAAA07B,QAAA,MAAA1oB,WAAAA,EAAAvM,SAAA,IAElB,OADA60B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EgBDAyoC,MfpBO,SAAcha,CAAA,CAAAh9B,CAAA,EAErB,IAAA0U,EAAA,CAAsBvW,IAAKghD,GAAYn/C,EAAAw8B,GAAA,EAEvC,QAAAx8B,EAAAqO,GAAA,EAAArO,KAAAqK,IAAArK,EAAAqO,GAAA,EACAqG,CAAAA,EAAArG,GAAA,CAAArO,EAAAqO,GAAA,EAGA,OAAArO,EAAAwlB,KAAA,EAAAxlB,KAAAqK,IAAArK,EAAAwlB,KAAA,EACA9Q,CAAAA,EAAA8Q,KAAA,CAAAxlB,EAAAwlB,KAAA,EAIA,IAAAjX,EAAA,CAAkB7M,KAAA,UAAA07B,QAAA,MAAA1oB,WAAAA,EAAAvM,SAAA,IAElB,OADA60B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EeKA0yC,WdpBO,SAAAjkB,CAAA,CAAAh9B,CAAA,EAEP,IAAAyoB,EAAA,CAAgB/mB,KAAA,OAAA9D,MAAAoC,EAAApC,KAAA,CAAAyB,OAAA,mBAChB29B,EAAAkjB,KAAA,CAAAlgD,EAAAyoB,GAGA,IAAAla,EAAA,CACA7M,KAAA,UACA07B,QAAA,OACA1oB,WAAA,GACAvM,SAAA,CAAAsgB,EAAA,EAGA,OADAuU,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EcOA2yC,cbpBO,SAAAlkB,CAAA,CAAAh9B,CAAA,EACP,IAAAqI,EAAAuI,OAAA5Q,EAAA2vC,UAAA,EAAA/pC,WAAA,GACAuN,EAAA6pB,EAAAgkB,cAAA,CAAA7zC,GAAA,CAAA9E,GAEA,IAAA8K,EACA,OAAWusC,GAAM1iB,EAAAh9B,GAIjB,IAAA0U,EAAA,CAAsBgH,KAAMyjC,GAAYhsC,EAAAqpB,GAAA,MAExC,QAAArpB,EAAAqS,KAAA,EAAArS,KAAA9I,IAAA8I,EAAAqS,KAAA,EACA9Q,CAAAA,EAAA8Q,KAAA,CAAArS,EAAAqS,KAAA,EAIA,IAAAjX,EAAA,CACA7M,KAAA,UACA07B,QAAA,IACA1oB,WAAAA,EACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EaHAgZ,KZvBO,SAAayV,CAAA,CAAAh9B,CAAA,EAEpB,IAAA0U,EAAA,CAAsBgH,KAAMyjC,GAAYn/C,EAAAw8B,GAAA,EAExC,QAAAx8B,EAAAwlB,KAAA,EAAAxlB,KAAAqK,IAAArK,EAAAwlB,KAAA,EACA9Q,CAAAA,EAAA8Q,KAAA,CAAAxlB,EAAAwlB,KAAA,EAIA,IAAAjX,EAAA,CACA7M,KAAA,UACA07B,QAAA,IACA1oB,WAAAA,EACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EYOA0oC,SXnBO,SAAAja,CAAA,CAAAh9B,CAAA,CAAAi8B,CAAA,EACP,IAAA5S,EAAA2T,EAAA1uB,GAAA,CAAAtO,GACAmhD,EAAAllB,EAAAmlB,SAyEAphD,CAAA,EACA,IAAAmhD,EAAA,GACA,GAAAnhD,SAAAA,EAAA0B,IAAA,EACAy/C,EAAAnhD,EAAAk3C,MAAA,KACA,IAAA/uC,EAAAnI,EAAAmI,QAAA,CACAqG,EAAA,GAEA,MAAA2yC,GAAA,EAAA3yC,EAAArG,EAAA1J,MAAA,EACA0iD,EAAArB,GAAA33C,CAAA,CAAAqG,EAAA,CAEA,CAEA,OAAA2yC,CACA,EAtFAllB,GAAA6jB,GAAA9/C,GAEA0U,EAAA,GAEAvM,EAAA,GAEA,qBAAAnI,EAAA2Z,OAAA,MAGAsxB,EAFA,IAAApiC,EAAAwgB,CAAA,IAIAxgB,GAAAA,YAAAA,EAAAnH,IAAA,EAAAmH,MAAAA,EAAAu0B,OAAA,CACA6N,EAAApiC,GAEAoiC,EAAA,CAAmBvpC,KAAA,UAAA07B,QAAA,IAAA1oB,WAAA,GAA6CvM,SAAA,IAChEkhB,EAAAlY,OAAA,CAAA85B,IAGAA,EAAA9iC,QAAA,CAAA1J,MAAA,IACAwsC,EAAA9iC,QAAA,CAAAgJ,OAAA,EAAkCzP,KAAA,OAAA9D,MAAA,MAGlCqtC,EAAA9iC,QAAA,CAAAgJ,OAAA,EACAzP,KAAA,UACA07B,QAAA,QACA1oB,WAAA,CAAmBhT,KAAA,WAAAiY,QAAA3Z,EAAA2Z,OAAA,CAAAgB,SAAA,IACnBxS,SAAA,KAKAuM,EAAAmF,SAAA,oBAGA,IAAArL,EAAA,GAEA,OAAAA,EAAA6a,EAAA5qB,MAAA,GACA,IAAAoM,EAAAwe,CAAA,CAAA7a,EAAA,CAIA2yC,CAAAA,GACA3yC,IAAAA,GACA3D,YAAAA,EAAAnJ,IAAA,EACAmJ,MAAAA,EAAAuyB,OAAA,GAEAj1B,EAAAvH,IAAA,EAAqBc,KAAA,OAAA9D,MAAA,OAGrBiN,YAAAA,EAAAnJ,IAAA,EAAAmJ,MAAAA,EAAAuyB,OAAA,EAAA+jB,EAGAh5C,EAAAvH,IAAA,CAAAiK,GAFA1C,EAAAvH,IAAA,IAAAiK,EAAA1C,QAAA,CAIA,CAEA,IAAA0+B,EAAAxd,CAAA,CAAAA,EAAA5qB,MAAA,IAGAooC,GAAAsa,CAAAA,GAAAta,YAAAA,EAAAnlC,IAAA,EAAAmlC,MAAAA,EAAAzJ,OAAA,GACAj1B,EAAAvH,IAAA,EAAmBc,KAAA,OAAA9D,MAAA,OAInB,IAAA2Q,EAAA,CAAkB7M,KAAA,UAAA07B,QAAA,KAAA1oB,WAAAA,EAAAvM,SAAAA,CAAA,EAElB,OADA60B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EWjDAuC,KVxBO,SAAaksB,CAAA,CAAAh9B,CAAA,EAEpB,IAAA0U,EAAA,GACA2U,EAAA2T,EAAA1uB,GAAA,CAAAtO,GACAwO,EAAA,GAOA,IALA,iBAAAxO,EAAAF,KAAA,EAAAE,IAAAA,EAAAF,KAAA,EACA4U,CAAAA,EAAA5U,KAAA,CAAAE,EAAAF,KAAA,EAIA,EAAA0O,EAAA6a,EAAA5qB,MAAA,GACA,IAAAoM,EAAAwe,CAAA,CAAA7a,EAAA,CAEA,GACA3D,YAAAA,EAAAnJ,IAAA,EACAmJ,OAAAA,EAAAuyB,OAAA,EACAvyB,EAAA6J,UAAA,EACA5X,MAAAF,OAAA,CAAAiO,EAAA6J,UAAA,CAAAmF,SAAA,GACAhP,EAAA6J,UAAA,CAAAmF,SAAA,CAAAnM,QAAA,mBACA,CACAgH,EAAAmF,SAAA,wBACA,KACA,CACA,CAGA,IAAAtL,EAAA,CACA7M,KAAA,UACA07B,QAAAp9B,EAAAu6C,OAAA,WACA7lC,WAAAA,EACAvM,SAAA60B,EAAApX,IAAA,CAAAyD,EAAA,GACA,EAEA,OADA2T,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EUVA08B,UT1BO,SAAAjO,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,IACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,ESkBA2xB,KR3BO,SAAalD,CAAA,CAAAh9B,CAAA,EAEpB,IAAAuO,EAAA,CAAkB7M,KAAA,OAAAyG,SAAA60B,EAAApX,IAAA,CAAAoX,EAAA1uB,GAAA,CAAAtO,GAAA,EAElB,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EQuBAwpC,OP7BO,SAAA/a,CAAA,CAAAh9B,CAAA,EAEP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,SACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EOoBA8yC,MN/BO,SAAArkB,CAAA,CAAAh9B,CAAA,EACP,IAAAokB,EAAA4Y,EAAA1uB,GAAA,CAAAtO,GACAshD,EAAAl9B,EAAA6c,KAAA,GAEAsgB,EAAA,GAEA,GAAAD,EAAA,CAEA,IAAAz4C,EAAA,CACAnH,KAAA,UACA07B,QAAA,QACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,EAAA07B,EAAA,IACA,EACAtkB,EAAAkjB,KAAA,CAAAlgD,EAAAmI,QAAA,IAAAU,GACA04C,EAAA3gD,IAAA,CAAAiI,EACA,CAEA,GAAAub,EAAA3lB,MAAA,IAEA,IAAA+gC,EAAA,CACA99B,KAAA,UACA07B,QAAA,QACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,CAAAxB,EAAA,GACA,EAEAtkB,EAAkBq7B,EAAUn7B,EAAAmI,QAAA,KAC5BjI,EAAgB+6B,EAAQj7B,EAAAmI,QAAA,CAAAnI,EAAAmI,QAAA,CAAA1J,MAAA,KACxBqB,GAAAI,GAAAs/B,CAAAA,EAAA3/B,QAAA,EAAuCC,MAAAA,EAAAI,IAAAA,CAAA,GACvCqhD,EAAA3gD,IAAA,CAAA4+B,EACA,CAGA,IAAAjxB,EAAA,CACA7M,KAAA,UACA07B,QAAA,QACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,CAAA27B,EAAA,GACA,EAEA,OADAvkB,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EMVAizC,UJ/BO,SAAAxkB,CAAA,CAAAh9B,CAAA,EAIP,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,KACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAEA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EIoBAkzC,SL3BO,SAAAzkB,CAAA,CAAAh9B,CAAA,CAAAi8B,CAAA,EACP,IAAAke,EAAAle,EAAAA,EAAA9zB,QAAA,CAAAkC,KAAAA,EAGA+yB,EAAAskB,IADAvH,CAAAA,EAAAA,EAAAntC,OAAA,CAAAhN,GAAA,GACA,UAEA8lB,EAAAmW,GAAAA,UAAAA,EAAAv6B,IAAA,CAAAu6B,EAAAnW,KAAA,CAAAzb,KAAAA,EACA5L,EAAAqnB,EAAAA,EAAArnB,MAAA,CAAAuB,EAAAmI,QAAA,CAAA1J,MAAA,CACAkjD,EAAA,GAEAC,EAAA,GAEA,OAAAD,EAAAljD,GAAA,CAEA,IAAAojD,EAAA7hD,EAAAmI,QAAA,CAAAw5C,EAAA,CAEAjtC,EAAA,GACA6oB,EAAAzX,EAAAA,CAAA,CAAA67B,EAAA,CAAAt3C,KAAAA,EAEAkzB,GACA7oB,CAAAA,EAAAoR,KAAA,CAAAyX,CAAA,EAIA,IAAAhvB,EAAA,CAAkB7M,KAAA,UAAA07B,QAAAA,EAAA1oB,WAAAA,EAAAvM,SAAA,IAElB05C,IACAtzC,EAAApG,QAAA,CAAA60B,EAAA1uB,GAAA,CAAAuzC,GACA7kB,EAAAkjB,KAAA,CAAA2B,EAAAtzC,GACAA,EAAAyuB,EAAAmjB,SAAA,CAAA0B,EAAAtzC,IAGAqzC,EAAAhhD,IAAA,CAAA2N,EACA,CAGA,IAAAA,EAAA,CACA7M,KAAA,UACA07B,QAAA,KACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,CAAAg8B,EAAA,GACA,EAEA,OADA5kB,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EKhBAka,KFjCO,SAAauU,CAAA,CAAAh9B,CAAA,EAEpB,IAAAuO,EAAA,CAAkB7M,KAAA,OAAA9D,MAAqBkkD,SDThClkD,CAAA,EACP,IAAAuC,EAAAyQ,OAAAhT,GACAu2C,EAAA,YACAx0C,EAAAw0C,EAAApzC,IAAA,CAAAZ,GACA4hD,EAAA,EAEAriD,EAAA,GAEA,KAAAC,GACAD,EAAAkB,IAAA,CACAm/C,GAAA5/C,EAAAa,KAAA,CAAA+gD,EAAApiD,EAAA6O,KAAA,EAAAuzC,EAAA,MACApiD,CAAA,KAGAoiD,EAAApiD,EAAA6O,KAAA,CAAA7O,CAAA,IAAAlB,MAAA,CACAkB,EAAAw0C,EAAApzC,IAAA,CAAAZ,GAKA,OAFAT,EAAAkB,IAAA,CAAAm/C,GAAA5/C,EAAAa,KAAA,CAAA+gD,GAAAA,EAAA,OAEAriD,EAAA+O,IAAA,IACA,ECZgDmC,OAAA5Q,EAAApC,KAAA,IAEhD,OADAo/B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,EE6BA45B,cDlCO,SAAsBnL,CAAA,CAAAh9B,CAAA,EAE7B,IAAAuO,EAAA,CACA7M,KAAA,UACA07B,QAAA,KACA1oB,WAAA,GACAvM,SAAA,IAGA,OADA60B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,ECyBAyzC,KAAAC,GACAC,KAAAD,GACA9uC,WAAA8uC,GACAE,mBAAAF,EACA,EAGA,SAAAA,KAEA,CCoHA,IAAMG,GAAG,GAAK9lD,cAAA,CAGR+lD,GAAY,GAsJlB,SAAAnC,GAAA3yC,CAAA,CAAAsrB,CAAA,EACAtrB,EAAA1N,QAAA,EAAAg5B,CAAAA,EAAAh5B,QAAA,CAAmCA,S/EtP5BG,CAAA,EACP,IAAAF,EAAAq7B,EAAAn7B,GACAE,EAAA+6B,EAAAj7B,GAEA,GAAAF,GAAAI,EACA,OAAYJ,MAAAA,EAAAI,IAAAA,CAAA,CAEZ,E+E+O2CqN,EAAA,CAC3C,CAcA,SAAA4yC,GAAA5yC,CAAA,CAAAsrB,CAAA,EAEA,IAAAtqB,EAAAsqB,EAGA,GAAAtrB,GAAAA,EAAA8M,IAAA,EACA,IAAAioC,EAAA/0C,EAAA8M,IAAA,CAAAioC,KAAA,CACAC,EAAAh1C,EAAA8M,IAAA,CAAAkoC,SAAA,CACAC,EAAAj1C,EAAA8M,IAAA,CAAAmoC,WAAA,CAEA,iBAAAF,IAGA/zC,YAAAA,EAAA7M,IAAA,CACA6M,EAAA6uB,OAAA,CAAAklB,EAUA/zC,EAAA,CAAkB7M,KAAA,UAAA07B,QAAAklB,EAAA5tC,WAAA,GAA+CvM,SADjE,aAAAoG,EAAAA,EAAApG,QAAA,EAAAoG,EAAA,GAKA,YAAAA,EAAA7M,IAAA,EAAA8gD,GACApmD,OAAAgX,MAAA,CAAA7E,EAAAmG,UAAA,CAAuCsqC,GAAewD,IAItD,aAAAj0C,GACAA,EAAApG,QAAA,EAEAo6C,MADAA,GAGAh0C,CAAAA,EAAApG,QAAA,CAAAo6C,CAAA,CAEA,CAEA,OAAAh0C,CACA,CA0CO,SAAAqX,GAAA68B,CAAA,CAAAtB,CAAA,EAEP,IAAA5yC,EAAA,GACAC,EAAA,GAMA,IAJA2yC,GACA5yC,EAAA3N,IAAA,EAAiBc,KAAA,OAAA9D,MAAA,OAGjB,EAAA4Q,EAAAi0C,EAAAhkD,MAAA,EACA+P,GAAAD,EAAA3N,IAAA,EAA4Bc,KAAA,OAAA9D,MAAA,OAC5B2Q,EAAA3N,IAAA,CAAA6hD,CAAA,CAAAj0C,EAAA,EAOA,OAJA2yC,GAAAsB,EAAAhkD,MAAA,IACA8P,EAAA3N,IAAA,EAAiBc,KAAA,OAAA9D,MAAA,OAGjB2Q,CACA,CAUA,SAAAm0C,GAAA9kD,CAAA,EACA,IAAA4Q,EAAA,EACAO,EAAAnR,EAAAoqC,UAAA,CAAAx5B,GAEA,KAAAO,IAAAA,GAAAA,KAAAA,GACAP,IACAO,EAAAnR,EAAAoqC,UAAA,CAAAx5B,GAGA,OAAA5Q,EAAAoD,KAAA,CAAAwN,EACA,CCjYO,SAAAm0C,GAAAnJ,CAAA,CAAAh8C,CAAA,EACP,IAAAw/B,EAAgB4lB,SD0GTpJ,CAAA,CAAAh8C,CAAA,EACP,IAAAyQ,EAAAzQ,GAA8B6kD,GAE9BrB,EAAA,IAAAr2C,IAEAk4C,EAAA,IAAAl4C,IASAqyB,EAAA,CACA1uB,IA0EA,SAAA2tB,CAAA,EAEA,IAAA/xB,EAAA,GAEA,gBAAA+xB,EAAA,CACA,IAAAwmB,EAAAxmB,EAAA9zB,QAAA,CACAqG,EAAA,GACA,OAAAA,EAAAi0C,EAAAhkD,MAAA,GACA,IAAA8P,EAAAyuB,EAAA9uB,GAAA,CAAAu0C,CAAA,CAAAj0C,EAAA,CAAAytB,GAGA,GAAA1tB,EAAA,CACA,GAAAC,GAAAi0C,UAAAA,CAAA,CAAAj0C,EAAA,GAAA9M,IAAA,GACA5E,MAAAF,OAAA,CAAA2R,IAAAA,SAAAA,EAAA7M,IAAA,EACA6M,CAAAA,EAAA3Q,KAAA,CAAA8kD,GAAAn0C,EAAA3Q,KAAA,GAGA,CAAAd,MAAAF,OAAA,CAAA2R,IAAAA,YAAAA,EAAA7M,IAAA,GACA,IAAAmH,EAAA0F,EAAApG,QAAA,IAEAU,GAAAA,SAAAA,EAAAnH,IAAA,EACAmH,CAAAA,EAAAjL,KAAA,CAAA8kD,GAAA75C,EAAAjL,KAAA,EAEA,CAGAd,MAAAF,OAAA,CAAA2R,GACArE,EAAAtJ,IAAA,IAAA2N,GAEArE,EAAAtJ,IAAA,CAAA2N,EAEA,CACA,CACA,CAEA,OAAArE,CACA,EA7GAi2C,UAAAA,GACAa,eAAAA,EACA6B,aAAAA,EACAlC,eAZA,IAAAh2C,IAaA81C,cAAA,GACAqC,SAVA,CAAoB,GAAG9C,EAAe,IAAA/xC,EAAA60C,QAAA,EAWtC50C,IAgCA,SAAAlO,CAAA,CAAAi8B,CAAA,EACA,IAAAv6B,EAAA1B,EAAA0B,IAAA,CACAqhD,EAAA/lB,EAAA8lB,QAAA,CAAAphD,EAAA,CAEA,GAAQ0gD,GAAGrlD,IAAA,CAAAigC,EAAA8lB,QAAA,CAAAphD,IAAAqhD,EACX,OAAAA,EAAA/lB,EAAAh9B,EAAAi8B,GAGA,GAAAe,EAAAx/B,OAAA,CAAAwlD,WAAA,EAAAhmB,EAAAx/B,OAAA,CAAAwlD,WAAA,CAAAt1C,QAAA,CAAAhM,GAAA,CACA,gBAAA1B,EAAA,CACA,IAAemI,SAAAA,CAAA,IAAA86C,EAAA,CAAsBjjD,EACrCuO,EAAuBywC,GAAeiE,GAItC,OAFA10C,EAAApG,QAAA,CAAA60B,EAAA1uB,GAAA,CAAAtO,GAEAuO,CACA,CAGA,OAAaywC,GAAeh/C,EAC5B,CAIA,MAAAkjD,CAFAlmB,EAAAx/B,OAAA,CAAA2lD,cAAA,EAqIA,SAAAnmB,CAAA,CAAAh9B,CAAA,EACA,IAAAqa,EAAAra,EAAAqa,IAAA,KAEA9L,EACA,UAAAvO,GACA,CAAMoiD,CAAAA,GAAGrlD,IAAA,CAAAsd,EAAA,gBAA8B+nC,GAAGrlD,IAAA,CAAAsd,EAAA,cAC1C,CAAS3Y,KAAA,OAAA9D,MAAAoC,EAAApC,KAAA,EACT,CACA8D,KAAA,UACA07B,QAAA,MACA1oB,WAAA,GACAvM,SAAA60B,EAAA1uB,GAAA,CAAAtO,EACA,EAGA,OADAg9B,EAAAkjB,KAAA,CAAAlgD,EAAAuO,GACAyuB,EAAAmjB,SAAA,CAAAngD,EAAAuO,EACA,CArJA,EAEAyuB,EAAAh9B,EAAAi8B,EACA,EAxDAz+B,QAAAyQ,EACAiyC,MAAAA,GACAt6B,KAAAA,EACA,EAgBA,MAdE,GAAAw9B,GAAAC,EAAA,EAAK7J,EAAA,SAAAx5C,CAAA,EACP,GAAAA,eAAAA,EAAA0B,IAAA,EAAA1B,uBAAAA,EAAA0B,IAAA,EACA,IAAAkL,EAAA5M,eAAAA,EAAA0B,IAAA,CAAAs/C,EAAA6B,EACAx6C,EAAAuI,OAAA5Q,EAAA2vC,UAAA,EAAA/pC,WAAA,GAIAgH,EAAAK,GAAA,CAAA5E,IAEAuE,EAAA5C,GAAA,CAAA3B,EAAArI,EAEA,CACA,GAEAg9B,CAoFA,ECxO2Bwc,EAAAh8C,GAC3BwC,EAAAg9B,EAAA9uB,GAAA,CAAAsrC,EAAAnvC,KAAAA,GACAi5C,EAAeC,S5BkCRvmB,CAAA,EACP,IAAAujB,EACA,iBAAAvjB,EAAAx/B,OAAA,CAAA+iD,aAAA,CACAvjB,EAAAx/B,OAAA,CAAA+iD,aAAA,CACA,gBACAiD,EACAxmB,EAAAx/B,OAAA,CAAAgmD,mBAAA,EAAAlE,GACAmE,EACAzmB,EAAAx/B,OAAA,CAAAimD,iBAAA,EAAAjE,GACAkE,EAAA1mB,EAAAx/B,OAAA,CAAAkmD,aAAA,cACAC,EAAA3mB,EAAAx/B,OAAA,CAAAmmD,oBAAA,OACAC,EAAA5mB,EAAAx/B,OAAA,CAAAomD,uBAAA,GACA/pC,UAAA,aAGAgqC,EAAA,GACApE,EAAA,GAEA,OAAAA,EAAAziB,EAAAyjB,aAAA,CAAAhiD,MAAA,GACA,IAAA0U,EAAA6pB,EAAA6lB,YAAA,CAAA11C,GAAA,CACA6vB,EAAAyjB,aAAA,CAAAhB,EAAA,EAGA,IAAAtsC,EACA,SAGA,IAAA/S,EAAA48B,EAAA1uB,GAAA,CAAA6E,GACA9K,EAAAuI,OAAAuC,EAAAw8B,UAAA,EAAA/pC,WAAA,GACA46C,EAAmBrB,GAAY92C,EAAApC,WAAA,IAC/Bs5C,EAAA,EAEAuE,EAAA,GACAC,EAAA/mB,EAAA2jB,cAAA,CAAAxzC,GAAA,CAAA9E,GAGA,KAAA07C,KAAA15C,IAAA05C,GAAA,EAAAxE,GAAAwE,GAAA,CACAD,EAAArlD,MAAA,IACAqlD,EAAAljD,IAAA,EAA6Bc,KAAA,OAAA9D,MAAA,MAG7B,IAAAuK,EACA,iBAAAq7C,EACAA,EACAA,EAAA/D,EAAAF,EAEA,kBAAAp3C,GACAA,CAAAA,EAAA,CAAoBzG,KAAA,OAAA9D,MAAAuK,CAAA,GAGpB27C,EAAAljD,IAAA,EACAc,KAAA,UACA07B,QAAA,IACA1oB,WAAA,CACAgH,KACA,IACA6kC,EACA,SACAC,EACAjB,CAAAA,EAAA,MAAAA,EAAA,IACAyE,oBAAA,GACAztC,UACA,iBAAAktC,EACAA,EACAA,EAAAhE,EAAAF,GACA1lC,UAAA,2BAEA1R,SAAArL,MAAAF,OAAA,CAAAuL,GAAAA,EAAA,CAAAA,EAAA,EAEA,CAEA,IAAA0+B,EAAAzmC,CAAA,CAAAA,EAAA3B,MAAA,IAEA,GAAAooC,GAAAA,YAAAA,EAAAnlC,IAAA,EAAAmlC,MAAAA,EAAAzJ,OAAA,EACA,IAAA6mB,EAAApd,EAAA1+B,QAAA,CAAA0+B,EAAA1+B,QAAA,CAAA1J,MAAA,IACAwlD,GAAAA,SAAAA,EAAAviD,IAAA,CACAuiD,EAAArmD,KAAA,MAEAipC,EAAA1+B,QAAA,CAAAvH,IAAA,EAA4Bc,KAAA,OAAA9D,MAAA,MAG5BipC,EAAA1+B,QAAA,CAAAvH,IAAA,IAAAkjD,EACA,MACA1jD,EAAAQ,IAAA,IAAAkjD,GAIA,IAAA7M,EAAA,CACAv1C,KAAA,UACA07B,QAAA,KACA1oB,WAAA,CAAmBrM,GAAAk4C,EAAA,MAAAC,CAAA,EACnBr4C,SAAA60B,EAAApX,IAAA,CAAAxlB,EAAA,GACA,EAEA48B,EAAAkjB,KAAA,CAAA/sC,EAAA8jC,GAEA4M,EAAAjjD,IAAA,CAAAq2C,EACA,CAEA,GAAA4M,IAAAA,EAAAplD,MAAA,CAIA,OACAiD,KAAA,UACA07B,QAAA,UACA1oB,WAAA,CAAiBwvC,cAAA,GAAArqC,UAAA,eACjB1R,SAAA,CACA,CACAzG,KAAA,UACA07B,QAAAumB,EACAjvC,WAAA,CACA,GAAasqC,GAAe4E,EAAA,CAC5Bv7C,GAAA,gBACA,EACAF,SAAA,EAAoBzG,KAAA,OAAA9D,MAAA8lD,CAAA,EAAmC,EAEvD,CAAOhiD,KAAA,OAAA9D,MAAA,MACP,CACA8D,KAAA,UACA07B,QAAA,KACA1oB,WAAA,GACAvM,SAAA60B,EAAApX,IAAA,CAAAi+B,EAAA,GACA,EACA,CAAOniD,KAAA,OAAA9D,MAAA,MACP,CAEA,E4BjKqBo/B,GAErBzuB,EAAAzR,MAAAF,OAAA,CAAAoD,GACA,CAAO0B,KAAA,OAAAyG,SAAAnI,CAAA,EACPA,GAAA,CAAe0B,KAAA,OAAAyG,SAAA,IAUf,OARAm7C,IAII,GAAA7jB,EAAAj5B,EAAA,EAAM,aAAA+H,GACVA,EAAApG,QAAA,CAAAvH,IAAA,EAA0Bc,KAAA,OAAA9D,MAAA,MAA0B0lD,IAGpD/0C,CACA,CC0Ce,SAAA41C,GAAAC,CAAA,CAAA5mD,CAAA,SACf,WAAA4mD,EAIA,eAAA5K,CAAA,CAAArd,CAAA,EAEA,IAAAkoB,EACQ1B,GAAMnJ,EAAA,CAAQrd,KAAAA,EAAA,GAAA3+B,CAAA,EAEtB,OAAA4mD,EAAAE,GAAA,CAAAD,EAAAloB,EACA,EAMA,SAAAqd,CAAA,CAAArd,CAAA,EAMA,OACMwmB,GAAMnJ,EAAA,CAAQrd,KAAAA,EAAA,GAAAioB,GAAA5mD,CAAA,EAEpB,CACA,CCvKO,SAAA+mD,GAAAjkD,CAAA,EACP,GAAAA,EACA,MAAAA,CAEA,gBCXe,SAAAtD,GAAAY,CAAA,EACf,oBAAAA,GAAAA,OAAAA,EACA,SAGA,IAAAvB,EAAAD,OAAAooD,cAAA,CAAA5mD,GACA,OAAAvB,OAAAA,GAAAA,IAAAD,OAAAC,SAAA,EAAAD,OAAAA,OAAAooD,cAAA,CAAAnoD,EAAA,IAAAooD,CAAAA,OAAAC,WAAA,IAAA9mD,CAAA,IAAA6mD,CAAAA,OAAAt+C,QAAA,IAAAvI,CAAA,CACA,CE4CO,IAAA+mD,GAAA,CAAiBC,SAcxB,SAAArvB,CAAA,CAAAsvB,CAAA,MAUAC,EATA,GAAAD,KAAAx6C,IAAAw6C,GAAA,iBAAAA,EACA,mDAGAE,GAAAxvB,GACA,IAAAz1B,EAAA,EACAI,EAAA,GACAsO,EAAA+mB,EAAA92B,MAAA,CAIA,GACAomD,KAAAx6C,IAAAw6C,GACAA,IAAAA,EAAApmD,MAAA,EACAomD,EAAApmD,MAAA,CAAA82B,EAAA92B,MAAA,CACA,CACA,KAAA+P,KACA,GAAA+mB,KAAAA,EAAA6jB,WAAA,CAAA5qC,GAGA,IAAAs2C,EAAA,CACAhlD,EAAA0O,EAAA,EACA,KACA,OACQtO,EAAA,IAGR4kD,EAAA,GACA5kD,EAAAsO,EAAA,GAIA,OAAAtO,EAAA,KAAAq1B,EAAAv0B,KAAA,CAAAlB,EAAAI,EACA,CAEA,GAAA2kD,IAAAtvB,EACA,SAGA,IAAAyvB,EAAA,GACAC,EAAAJ,EAAApmD,MAAA,GAEA,KAAA+P,KACA,GAAA+mB,KAAAA,EAAA6jB,WAAA,CAAA5qC,GAGA,IAAAs2C,EAAA,CACAhlD,EAAA0O,EAAA,EACA,KACA,OAEAw2C,EAAA,IAGAF,EAAA,GACAE,EAAAx2C,EAAA,GAGAy2C,EAAA,KAEA1vB,EAAA6jB,WAAA,CAAA5qC,KAAAq2C,EAAAzL,WAAA,CAAA6L,KACAA,EAAA,GAGA/kD,CAAAA,EAAAsO,CAAA,GAKAy2C,EAAA,GACA/kD,EAAA8kD,IAYA,OANAllD,IAAAI,EACAA,EAAA8kD,EACI9kD,EAAA,GACJA,CAAAA,EAAAq1B,EAAA92B,MAAA,EAGA82B,EAAAv0B,KAAA,CAAAlB,EAAAI,EACA,EAlGwBglD,QA4GxB,SAAA3vB,CAAA,MAUA4vB,EAPA,GAFAJ,GAAAxvB,GAEAA,IAAAA,EAAA92B,MAAA,CACA,UAGA,IAAAyB,EAAA,GACAsO,EAAA+mB,EAAA92B,MAAA,CAKA,OAAA+P,GACA,GAAA+mB,KAAAA,EAAA6jB,WAAA,CAAA5qC,GACA,IAAA22C,EAAA,CACAjlD,EAAAsO,EACA,KACA,OACM22C,GAENA,CAAAA,EAAA,IAIA,OAAAjlD,EAAA,EACAq1B,KAAAA,EAAA6jB,WAAA,IACA,IACA,IACAl5C,IAAAA,GAAAq1B,KAAAA,EAAA6jB,WAAA,IACA,KACA7jB,EAAAv0B,KAAA,GAAAd,EACA,EA5IwB2kD,QAsJxB,SAAAtvB,CAAA,MAYA4vB,EAXAJ,GAAAxvB,GAEA,IAAA/mB,EAAA+mB,EAAA92B,MAAA,CAEAyB,EAAA,GACAklD,EAAA,EACAC,EAAA,GAGAC,EAAA,EAIA,KAAA92C,KAAA,CACA,IAAAO,EAAAwmB,EAAA6jB,WAAA,CAAA5qC,GAEA,GAAAO,KAAAA,EAAA,CAGA,GAAAo2C,EAAA,CACAC,EAAA52C,EAAA,EACA,KACA,CAEA,QACA,CAEAtO,EAAA,IAGAilD,EAAA,GACAjlD,EAAAsO,EAAA,GAGAO,KAAAA,EAEAs2C,EAAA,EACAA,EAAA72C,EACQ,IAAA82C,GACRA,CAAAA,EAAA,GAEMD,EAAA,IAGNC,CAAAA,EAAA,GAEA,QAEA,EACA,GACAplD,EAAA,GAEAolD,IAAAA,GAEAA,IAAAA,GAAAD,IAAAnlD,EAAA,GAAAmlD,IAAAD,EAAA,EAEA,GAGA7vB,EAAAv0B,KAAA,CAAAqkD,EAAAnlD,EACA,EAnNwBuO,KA6NxB,YAAA82C,CAAA,EACA,IAEAC,EAFAh3C,EAAA,GAIA,OAAAA,EAAA+2C,EAAA9mD,MAAA,EACAsmD,GAAAQ,CAAA,CAAA/2C,EAAA,EAEA+2C,CAAA,CAAA/2C,EAAA,EACAg3C,CAAAA,EACAA,KAAAn7C,IAAAm7C,EAAAD,CAAA,CAAA/2C,EAAA,CAAAg3C,EAAA,IAAAD,CAAA,CAAA/2C,EAAA,EAIA,OAAAg3C,KAAAn7C,IAAAm7C,EAAA,IAAsCC,SAapBlwB,CAAA,EAClBwvB,GAAAxvB,GAEA,IAAAmwB,EAAAnwB,KAAAA,EAAA6jB,WAAA,IAGAx7C,EAAA+nD,SAuBApwB,CAAA,CAAAqwB,CAAA,EACA,IAMA72C,EAEA82C,EARAt3C,EAAA,GACAu3C,EAAA,EACAC,EAAA,GACAC,EAAA,EACAx3C,EAAA,GAMA,OAAAA,GAAA+mB,EAAA92B,MAAA,GACA,GAAA+P,EAAA+mB,EAAA92B,MAAA,CACAsQ,EAAAwmB,EAAA6jB,WAAA,CAAA5qC,QACM,GAAAO,KAAAA,EACN,WAEAA,EAAA,GAGA,GAAAA,KAAAA,EAAA,CACA,GAAAg3C,IAAAv3C,EAAA,GAAAw3C,IAAAA,QAEQ,GAAAD,IAAAv3C,EAAA,GAAAw3C,IAAAA,EAAA,CACR,GACAz3C,EAAA9P,MAAA,IACAqnD,IAAAA,GACAv3C,KAAAA,EAAA6qC,WAAA,CAAA7qC,EAAA9P,MAAA,KACA8P,KAAAA,EAAA6qC,WAAA,CAAA7qC,EAAA9P,MAAA,KAEA,GAAA8P,EAAA9P,MAAA,GAGA,IAAAonD,CAFAA,EAAAt3C,EAAA3O,WAAA,SAEA2O,EAAA9P,MAAA,IACAonD,EAAA,GACAt3C,EAAA,GACAu3C,EAAA,GAGAA,EAAAv3C,CADAA,EAAAA,EAAAvN,KAAA,GAAA6kD,EAAA,EACApnD,MAAA,GAAA8P,EAAA3O,WAAA,MAGAmmD,EAAAv3C,EACAw3C,EAAA,EACA,QACA,OACY,GAAAz3C,EAAA9P,MAAA,IACZ8P,EAAA,GACAu3C,EAAA,EACAC,EAAAv3C,EACAw3C,EAAA,EACA,QACA,EAGAJ,IACAr3C,EAAAA,EAAA9P,MAAA,GAAA8P,EAAA,WACAu3C,EAAA,EAEA,MACAv3C,EAAA9P,MAAA,GACA8P,GAAA,IAAAgnB,EAAAv0B,KAAA,CAAA+kD,EAAA,EAAAv3C,GAEAD,EAAAgnB,EAAAv0B,KAAA,CAAA+kD,EAAA,EAAAv3C,GAGAs3C,EAAAt3C,EAAAu3C,EAAA,EAGAA,EAAAv3C,EACAw3C,EAAA,CACA,MAAMj3C,KAAAA,GAAAi3C,EAAA,GACNA,IAEAA,EAAA,EAEA,CAEA,OAAAz3C,CACA,EAtGAgnB,EAAA,CAAAmwB,GAUA,OARA,IAAA9nD,EAAAa,MAAA,EAAAinD,GACA9nD,CAAAA,EAAA,KAGAA,EAAAa,MAAA,IAAA82B,KAAAA,EAAA6jB,WAAA,CAAA7jB,EAAA92B,MAAA,KACAb,CAAAA,GAAA,KAGA8nD,EAAA,IAAA9nD,EAAAA,CACA,EA9B+C4nD,EAC/C,EA5OwBS,IAAA,KA8WxB,SAAAlB,GAAAxvB,CAAA,EACA,oBAAAA,EACA,gBACA,mCAAA2wB,KAAApoB,SAAA,CAAAvI,GAGA,CCpaO,IAAA4wB,GAAA,CAAiBC,IAExB,WACA,SACA,CAJwB,ECgBjB,SAAAC,GAAAC,CAAA,EACP,MAAA3lB,CAAAA,CACA2lB,CAAAA,OAAAA,GACA,iBAAAA,GACA,SAAAA,GACAA,EAAA5qC,IAAA,EACA,aAAA4qC,GACAA,EAAAC,QAAA,EAEAD,KAAAj8C,IAAAi8C,EAAAE,IAAA,CAEA,CEVA,IAAAvxB,GAAgC,CAChC,UACA,OACA,WACA,OACA,UACA,UACA,OAEOwxB,GAuBPppD,YAAAO,CAAA,MAEAJ,EA2GA+pC,EAtGA/pC,EAHAI,EAEeyoD,GAAKzoD,GACpB,CAAiB23B,KAAA33B,CAAA,EACX,iBAAAA,GAikBNA,GACA,iBAlkBMA,GAmkBN,eAnkBMA,GAokBN,eApkBMA,EACN,CAAiBA,MAAAA,CAAA,EAEjBA,EANA,GAkBA,KAAAwoD,GAAA,SAAA5oD,EAAA,GAAuC2oD,GAAOC,GAAA,GAU9C,KAAA/rC,IAAA,IASA,KAAAqsC,OAAA,IAOA,KAAAC,QAAA,IAOA,KAAA/oD,KAAA,CAYA,KAAAgP,GAAA,CAUA,KAAA2B,MAAA,CASA,KAAAq4C,MAAA,CAIA,IAAAp4C,EAAA,GAEA,OAAAA,EAAAymB,GAAAx2B,MAAA,GACA,IAAA8oC,EAAAtS,EAAA,CAAAzmB,EAAA,CAKA+4B,KAAA/pC,GACAA,KAAA6M,IAAA7M,CAAA,CAAA+pC,EAAA,EACA/pC,OAAAA,CAAA,CAAA+pC,EAAA,EAGA,MAAAA,EAAA,CAAAA,YAAAA,EAAA,IAAA/pC,CAAA,CAAA+pC,EAAA,EAAA/pC,CAAA,CAAA+pC,EAAA,CAEA,CAMA,IAAAA,KAAA/pC,EAEAy3B,GAAAvnB,QAAA,CAAA65B,IAEA,MAAAA,EAAA,CAAA/pC,CAAA,CAAA+pC,EAAA,CAGA,CAQA,IAAAqd,UAAA,CACA,4BAAArvB,IAAA,CACQovB,GAAOC,QAAA,MAAArvB,IAAA,EACflrB,KAAAA,CACA,CAcA,IAAAu6C,SAAAA,CAAA,EACAiC,GAAAjC,EAAA,YACAkC,GAAAlC,EAAA,YACA,KAAArvB,IAAA,CAAgBovB,GAAOl2C,IAAA,MAAAy2C,OAAA,KAAAN,EACvB,CAQA,IAAAM,SAAA,CACA,4BAAA3vB,IAAA,CACQovB,GAAOO,OAAA,MAAA3vB,IAAA,EACflrB,KAAAA,CACA,CAYA,IAAA66C,QAAAA,CAAA,EACI6B,GAAU,KAAAnC,QAAA,YACd,KAAArvB,IAAA,CAAgBovB,GAAOl2C,IAAA,CAAAy2C,GAAA,QAAAN,QAAA,CACvB,CAQA,IAAAC,SAAA,CACA,4BAAAtvB,IAAA,CACQovB,GAAOE,OAAA,MAAAtvB,IAAA,EACflrB,KAAAA,CACA,CAcA,IAAAw6C,QAAAA,CAAA,EAIA,GAHAiC,GAAAjC,EAAA,WACIkC,GAAU,KAAA7B,OAAA,YAEdL,EAAA,CACA,GAAAA,KAAAA,EAAAzL,WAAA,IACA,6CAGA,GAAAyL,EAAAn3C,QAAA,QACA,qDAEA,CAEA,KAAA6nB,IAAA,CAAgBovB,GAAOl2C,IAAA,MAAAy2C,OAAA,MAAA8B,IAAA,CAAAnC,CAAAA,GAAA,IACvB,CAQA,IAAAtvB,MAAA,CACA,YAAAmxB,OAAA,MAAAA,OAAA,CAAAjoD,MAAA,IAeA,IAAA82B,KAAAA,CAAA,EACQ8wB,GAAK9wB,IACbA,CAAAA,EAAa0xB,SD3RN1xB,CAAA,EACP,oBAAAA,EACAA,EAAA,IAAA2xB,IAAA3xB,QACI,IAAU8wB,GAAK9wB,GAAA,CAEnB,IAAAj1B,EAAA,UACA,+EACAi1B,EACA,IAGA,OADAj1B,EAAAyO,IAAA,wBACAzO,CACA,CAEA,GAAAi1B,UAAAA,EAAAgxB,QAAA,EAEA,IAAAjmD,EAAA,2CAEA,OADAA,EAAAyO,IAAA,0BACAzO,CACA,CAEA,OAAA6mD,SAWA3qB,CAAA,EACA,GAAAA,KAAAA,EAAA4qB,QAAA,EAEA,IAAA9mD,EAAA,UACA,uDAGA,OADAA,EAAAyO,IAAA,6BACAzO,CACA,CAEA,IAAA+mD,EAAA7qB,EAAA6qB,QAAA,CACA74C,EAAA,GAEA,OAAAA,EAAA64C,EAAA5oD,MAAA,EACA,GACA4oD,KAAAA,EAAAjO,WAAA,CAAA5qC,IACA64C,KAAAA,EAAAjO,WAAA,CAAA5qC,EAAA,GACA,CACA,IAAA84C,EAAAD,EAAAjO,WAAA,CAAA5qC,EAAA,GACA,GAAA84C,KAAAA,GAAAA,MAAAA,EAAA,CAEA,IAAAhnD,EAAA,UACA,sDAGA,OADAA,EAAAyO,IAAA,6BACAzO,CACA,CACA,CAGA,OAAAinD,mBAAAF,EACA,EA1CA9xB,EACA,ECqQsBA,EAAA,EAGtBsxB,GAAAtxB,EAAA,QAEA,KAAAA,IAAA,GAAAA,GACA,KAAAmxB,OAAA,CAAA9lD,IAAA,CAAA20B,EAEA,CAQA,IAAAyxB,MAAA,CACA,4BAAAzxB,IAAA,CACQovB,GAAOC,QAAA,MAAArvB,IAAA,MAAAsvB,OAAA,EACfx6C,KAAAA,CACA,CAcA,IAAA28C,KAAAA,CAAA,EACAH,GAAAG,EAAA,QACAF,GAAAE,EAAA,QACA,KAAAzxB,IAAA,CAAgBovB,GAAOl2C,IAAA,MAAAy2C,OAAA,KAAA8B,EAAA,MAAAnC,OAAA,MACvB,CA+DA2C,KAAA/rB,CAAA,CAAAC,CAAA,CAAAtG,CAAA,EAEA,IAAA2G,EAAA,KAAAA,OAAA,CAAAN,EAAAC,EAAAtG,EAIA,OAFA2G,EAAAG,KAAA,IAEAH,CACA,CA4DAlnB,KAAA4mB,CAAA,CAAAC,CAAA,CAAAtG,CAAA,EAEA,IAAA2G,EAAA,KAAAA,OAAA,CAAAN,EAAAC,EAAAtG,GAIA,OAFA2G,EAAAG,KAAA,CAAA7xB,KAAAA,EAEA0xB,CACA,CA4DAA,QAAAN,CAAA,CAAAC,CAAA,CAAAtG,CAAA,EACA,IAAA2G,EAAA,IAAwBR,EAExBE,EACAC,EACAtG,GAYA,OATA,KAAAG,IAAA,GACAwG,EAAAt+B,IAAA,MAAA83B,IAAA,KAAAwG,EAAAt+B,IAAA,CACAs+B,EAAAI,IAAA,MAAA5G,IAAA,EAGAwG,EAAAG,KAAA,IAEA,KAAAyqB,QAAA,CAAA/lD,IAAA,CAAAm7B,GAEAA,CACA,CAeAv/B,SAAA04C,CAAA,SACA,KAAA7qC,IAAA,KAAAzM,KAAA,CACA,GAGA,sBAAAA,KAAA,CACA,KAAAA,KAAA,CAIA6pD,IADAvK,YAAAhI,GAAA7qC,KAAAA,GACAoqC,MAAA,MAAA72C,KAAA,CACA,CACA,CAYA,SAAAkpD,GAAAY,CAAA,CAAAjqD,CAAA,EACA,GAAAiqD,GAAAA,EAAAh6C,QAAA,CAA4Bi3C,GAAOsB,GAAA,EACnC,YACA,IAAAxoD,EAAA,uCAA4DknD,GAAOsB,GAAA,KAGnE,CAYA,SAAAY,GAAAa,CAAA,CAAAjqD,CAAA,EACA,IAAAiqD,EACA,gBAAAjqD,EAAA,oBAEA,CAYA,SAASspD,GAAUxxB,CAAA,CAAA93B,CAAA,EACnB,IAAA83B,EACA,wBAAA93B,EAAA,kCAEA,CCjnBO,IAAAkqD,GAYP,SAAAzlD,CAAA,EAGA,IAAA0lD,EAGAC,IALA,CACAxqD,WAAA,CAIAhB,SAAA,CAEAuB,EAAAgqD,CAAA,CAAA1lD,EAAA,CAEA4lD,EAAA,WACA,OAAAlqD,EAAAkqD,KAAA,CAAAA,EAAAvpD,UACA,EAgBA,OAdAnC,OAAA2rD,cAAA,CAAAD,EAAAF,GAcAE,CACA,ECiUME,GAAG,GAAK1rD,cAAA,OAeP2rD,WAAwBN,GAI/BtqD,aAAA,CAEA,cAeA,KAAA6qD,QAAA,CAAA79C,KAAAA,EAYA,KAAA89C,MAAA,CAAA99C,KAAAA,EAaA,KAAA+9C,SAAA,IAaA,KAAA/S,QAAA,CAAAhrC,KAAAA,EASA,KAAAg+C,WAAA,IASA,KAAAC,MAAA,CAAAj+C,KAAAA,EASA,KAAAk+C,SAAA,IAUA,KAAAtlB,MAAA,CAAA54B,KAAAA,EASA,KAAAm+C,YAAA,CAAwBC,WP1bxB,IAAAC,EAAA,GAEAC,EAAA,CAAoBrE,IAKpB,YAAAp6C,CAAA,EACA,IAAA0+C,EAAA,GAEA59C,EAAAd,EAAAg1B,GAAA,GAEA,sBAAAl0B,EACA,2DAAAA,GAGAw4B,CAQA,SAAAA,EAAAljC,CAAA,IAAA4E,CAAA,EACA,IAAA2jD,EAAAH,CAAA,GAAAE,EAAA,CACAp6C,EAAA,GAEA,GAAAlO,EAAA,CACA0K,EAAA1K,GACA,MACA,CAGA,OAAAkO,EAAAtE,EAAAzL,MAAA,EACAyG,CAAAA,OAAAA,CAAA,CAAAsJ,EAAA,EAAAtJ,KAAAmF,IAAAnF,CAAA,CAAAsJ,EAAA,GACAtJ,CAAAA,CAAA,CAAAsJ,EAAA,CAAAtE,CAAA,CAAAsE,EAAA,EAKAtE,EAAAhF,EAGA2jD,EACQC,CAoDD,SAAaC,CAAA,CAAA/9C,CAAA,EAEpB,IAAAuH,EAEA,OAQA,YAAAtB,CAAA,MAGA1C,EAFA,IAAAy6C,EAAAD,EAAAtqD,MAAA,CAAAwS,EAAAxS,MAAA,CAIAuqD,GACA/3C,EAAArQ,IAAA,CAAAqoD,GAGA,IACA16C,EAAAw6C,EAAAjB,KAAA,MAAA72C,EACA,CAAM,MAAA3Q,EAAA,CAON,GAAA0oD,GAAAz2C,EACA,MAP0CjS,EAU1C,OAAA2oD,EAV0C3oD,EAW1C,CAEA0oD,IACAz6C,GAAAA,EAAA26C,IAAA,qBAAA36C,EAAA26C,IAAA,CACA36C,EAAA26C,IAAA,CAAAA,EAAAD,GACQ16C,aAAAitB,MACRytB,EAAA16C,GAEA26C,EAAA36C,GAGA,EAOA,SAAA06C,EAAA3oD,CAAA,IAAA4E,CAAA,EACAqN,IACAA,EAAA,GACAvH,EAAA1K,KAAA4E,GAEA,CAOA,SAAAgkD,EAAAtrD,CAAA,EACAqrD,EAAA,KAAArrD,EACA,CACA,GAxHYirD,EAAArlB,MAAAt+B,GAEZ8F,EAAA,QAAA9F,EAEA,GAjCA,QAAAgF,EAkCA,EAhDoBglC,IAmDpB,SAAAia,CAAA,EACA,sBAAAA,EACA,gBACA,+CAAAA,GAKA,OADAT,EAAA9nD,IAAA,CAAAuoD,GACAR,CACA,CA5DoB,EAEpB,OAAAA,CA2DA,GO4XA,CAaAvqD,MAAA,CAEA,IAAAgmD,EAEA,IAAA6D,GAEAz5C,EAAA,GAEA,OAAAA,EAAA,KAAA45C,SAAA,CAAA3pD,MAAA,GACA,IAAA2qD,EAAA,KAAAhB,SAAA,CAAA55C,EAAA,CACA41C,EAAAlV,GAAA,IAAAka,EACA,CAIA,OAFAhF,EAAA/pC,IAAA,CAAqBnc,GAAM,MAAS,KAAAqqD,SAAA,GAEpCnE,CACA,CA6DA/pC,KAAAnd,CAAA,CAAAU,CAAA,QACA,iBAAAV,EAEA,GAAAqB,UAAAE,MAAA,EACA4qD,GAAA,YAAAf,MAAA,EACA,KAAAC,SAAA,CAAArrD,EAAA,CAAAU,EACA,MAIA,GAAiBb,IAAA,MAAAwrD,SAAA,CAAArrD,IAAA,KAAAqrD,SAAA,CAAArrD,EAAA,EAAAmN,KAAAA,EAIjB,GACAg/C,GAAA,YAAAf,MAAA,EACA,KAAAC,SAAA,CAAArrD,EACA,MAIA,KAAAqrD,SAAA,CAoBAe,QAAA,CACA,QAAAhB,MAAA,CACA,YAQA,YAAAD,WAAA,MAAAD,SAAA,CAAA3pD,MAAA,GACA,IAAA2qD,EAAA,GAAA5rD,EAAA,MAAA4qD,SAAA,MAAAC,WAAA,EAEA,GAAA7qD,CAAA,IAAAA,CAAA,IACA,QAGA,MAAAA,CAAA,KACAA,CAAAA,CAAA,IAAA6M,KAAAA,CAAA,EAGA,IAAAk/C,EAAAH,EAAArsD,IAAA,CAb+D,QAa/DS,EAEA,oBAAA+rD,GACA,KAAAf,YAAA,CAAAtZ,GAAA,CAAAqa,EAEA,CAKA,OAHA,KAAAjB,MAAA,IACA,KAAAD,WAAA,CAAA54C,OAAAC,iBAAA,CAEA,KAiBA85C,MAAArtB,CAAA,EACA,KAAAmtB,MAAA,GACA,IAAAG,EAAAC,GAAAvtB,GACA8G,EAAA,KAAAA,MAAA,OAAAklB,MAAA,CAEA,OADAwB,GAAA,QAAA1mB,GACAA,EAAAryB,OAAA64C,GAAAA,EACA,CA4CAG,QAAAztB,CAAA,CAAA8sB,CAAA,EACA,IAAAzkB,EAAA,KAMA,OAJA,KAAA8kB,MAAA,GACAK,GAAA,eAAA1mB,MAAA,OAAAklB,MAAA,EACA0B,GAAA,eAAAxU,QAAA,OAAA6S,QAAA,EAEAe,EAAAa,EAAAz/C,KAAAA,EAAA4+C,GAAA,IAAAc,QAAAD,GAQA,SAAAA,EAAAt3C,CAAA,CAAAw3C,CAAA,EACA,IAAAP,EAAAC,GAAAvtB,GAGA8tB,EAE8BzlB,EAAAglB,KAAA,CAAAC,GA+B9B,SAAAS,EAAA5pD,CAAA,CAAA67B,CAAA,EACA77B,GAAA,CAAA67B,EACA6tB,EAAA1pD,GACUkS,EACVA,EAAA2pB,IAEU,GAAAsD,EAAAj5B,EAAA,EAAMyiD,EAAA,yCAChBA,EAAA5+C,KAAAA,EAAA8xB,GAEA,CArCAqI,EAAA8f,GAAA,CAAA2F,EAAAR,EAAA,SAAAnpD,CAAA,CAAAk5C,CAAA,CAAArd,CAAA,EACA,GAAA77B,GAAA,CAAAk5C,GAAA,CAAArd,EACA,OAAA+tB,EAAA5pD,GAUA,IAAA6pD,EAAA3lB,EAAA1G,SAAA,CAHgC0b,EAGhCrd,EA4iBA,kBA1iBAguB,GAujBAvsD,GACA,iBAxjBAusD,GAyjBA,eAzjBAA,GA0jBA,eA1jBAA,EACAhuB,EAAAv+B,KAAA,CAAAusD,EAEAhuB,EAAA5tB,MAAA,CAAA47C,EAGAD,EAAA5pD,EAAmE67B,EACnE,EAiBA,CACA,CAiCAiuB,YAAAjuB,CAAA,EAEA,IAEA5tB,EAFA87C,EAAA,GAYA,OARA,KAAAf,MAAA,GACAK,GAAA,mBAAA1mB,MAAA,OAAAklB,MAAA,EACA0B,GAAA,mBAAAxU,QAAA,OAAA6S,QAAA,EAEA,KAAA0B,OAAA,CAAAztB,EASA,SAAA77B,CAAA,CAAA67B,CAAA,EACAkuB,EAAA,GACM9F,GAAIjkD,GACViO,EAAA4tB,CACA,GAZAmuB,GAAA,wBAAAD,GACI,GAAA5qB,EAAAj5B,EAAA,EAAM+H,EAAA,+CAEVA,CAUA,CAwCA+1C,IAAA9K,CAAA,CAAArd,CAAA,CAAA8sB,CAAA,EACAsB,GAAA/Q,GACA,KAAA8P,MAAA,GAEA,IAAAd,EAAA,KAAAA,YAAA,CAOA,OALAS,GAAA,mBAAA9sB,IACA8sB,EAAA9sB,EACAA,EAAA9xB,KAAAA,GAGA4+C,EAAAa,EAAAz/C,KAAAA,EAAA4+C,GAAA,IAAAc,QAAAD,GAWA,SAAAA,EAAAt3C,CAAA,CAAAw3C,CAAA,EACM,GAAAvqB,EAAAj5B,EAAA,EACN,mBAAA21B,EACA,gDAEA,IAAAstB,EAAAC,GAAAvtB,GACAqsB,EAAAlE,GAAA,CAAA9K,EAAAiQ,EAQA,SAAAnpD,CAAA,CAAAkqD,CAAA,CAAAruB,CAAA,EACA,IAAAsuB,EAEAD,GAAAhR,EAGAl5C,EACA0pD,EAAA1pD,GACUkS,EACVA,EAAAi4C,IAEU,GAAAhrB,EAAAj5B,EAAA,EAAMyiD,EAAA,yCAChBA,EAAA5+C,KAAAA,EAAAogD,EAAAtuB,GAEA,EACA,CACA,CAmBAuuB,QAAAlR,CAAA,CAAArd,CAAA,EAEA,IAEA5tB,EAFA87C,EAAA,GAQA,OAJA,KAAA/F,GAAA,CAAA9K,EAAArd,EASA,SAAA77B,CAAA,CAAAk5C,CAAA,EACM+K,GAAIjkD,GACViO,EAAAirC,EACA6Q,EAAA,EACA,GAXAC,GAAA,gBAAAD,GACI,GAAA5qB,EAAAj5B,EAAA,EAAM+H,EAAA,+CACVA,CAUA,CA+BAuvB,UAAA0b,CAAA,CAAArd,CAAA,EACA,KAAAmtB,MAAA,GACA,IAAAG,EAAAC,GAAAvtB,GACAkZ,EAAA,KAAAA,QAAA,OAAA6S,QAAA,CAIA,OAHA2B,GAAA,YAAAxU,GACAkV,GAAA/Q,GAEAnE,EAAAmE,EAAAiQ,EACA,CA2DAva,IAAAtxC,CAAA,IAAAqT,CAAA,EACA,IAAAm3C,EAAA,KAAAA,SAAA,CACAG,EAAA,KAAAA,SAAA,CAIA,GAFAc,GAAA,WAAAf,MAAA,EAEA1qD,MAAAA,QAEM,sBAAAA,EACN+sD,EAAA/sD,EAAAqT,QACM,oBAAArT,EACNd,MAAAF,OAAA,CAAAgB,GACAgtD,EAAAhtD,GAEAitD,EAAAjtD,QAGA,+CAAAA,EAAA,KAGA,YA0BA,SAAAitD,EAAAt8C,CAAA,EACA,iBAAAA,CAAA,kBAAAA,CAAA,EACA,YACA,8KAIAq8C,EAAAr8C,EAAAu8C,OAAA,EAEAv8C,EAAAN,QAAA,EACAs6C,CAAAA,EAAAt6C,QAAA,CAA6B/P,GAAM,GAAAqqD,EAAAt6C,QAAA,CAAAM,EAAAN,QAAA,EAEnC,CAMA,SAAA28C,EAAAE,CAAA,EACA,IAAAt8C,EAAA,GAEA,GAAAs8C,MAAAA,QAEQ,GAAAhuD,MAAAF,OAAA,CAAAkuD,GACR,OAAAt8C,EAAAs8C,EAAArsD,MAAA,GAEAyT,SA9CAtU,CAAA,EACA,sBAAAA,EACA+sD,EAAA/sD,EAAA,SACQ,oBAAAA,GACR,GAAAd,MAAAF,OAAA,CAAAgB,GAAA,CACA,IAAAmtD,EAAA,GAAA95C,EAAA,CACoDrT,EACpD+sD,EAAAI,EAAA95C,EACA,MACA45C,EAAAjtD,QAGA,+CAAAA,EAAA,IAEA,EA+BAktD,CAAA,CAAAt8C,EAAA,OAIA,oDAAAs8C,EAAA,IAEA,CAOA,SAAAH,EAAAI,CAAA,CAAA95C,CAAA,EACA,IAAAzC,EAAA,GACAw8C,EAAA,GAEA,OAAAx8C,EAAA45C,EAAA3pD,MAAA,EACA,GAAA2pD,CAAA,CAAA55C,EAAA,MAAAu8C,EAAA,CACAC,EAAAx8C,EACA,KACA,CAGA,GAAAw8C,KAAAA,EACA5C,EAAAxnD,IAAA,EAAAmqD,KAAA95C,EAAA,OAIA,GAAAA,EAAAxS,MAAA,IACA,IAAAwsD,EAAA,GAAAttB,EAAA,CAAA1sB,EACAi6C,EAAA9C,CAAA,CAAA4C,EAAA,IACYhuD,GAAUkuD,IAAoBluD,GAAUiuD,IACpDA,CAAAA,EAAoB/sD,GAAM,GAAAgtD,EAAAD,EAAA,EAG1B7C,CAAA,CAAA4C,EAAA,EAAAD,EAAAE,KAAAttB,EAAA,CAEA,CACA,CACA,CA8BO,IAAAwtB,GAAA,IAAAlD,KAAAqB,MAAA,GASP,SAAAK,GAAAlsD,CAAA,CAAAG,CAAA,EACA,sBAAAA,EACA,2BAAAH,EAAA,qBAEA,CASA,SAAAosD,GAAApsD,CAAA,CAAAG,CAAA,EACA,sBAAAA,EACA,2BAAAH,EAAA,uBAEA,CASA,SAAA4rD,GAAA5rD,CAAA,CAAA6qD,CAAA,EACA,GAAAA,EACA,YACA,gBACA7qD,EACA,mHAGA,CAQA,SAAA8sD,GAAAvqD,CAAA,EAGA,IAAOhD,GAAUgD,IAAA,iBAAAA,EAAA0B,IAAA,CACjB,uCAAA1B,EAAA,IAGA,CAUA,SAAAsqD,GAAA7sD,CAAA,CAAA2tD,CAAA,CAAAf,CAAA,EACA,IAAAA,EACA,YACA,IAAA5sD,EAAA,0BAAA2tD,EAAA,YAGA,CAMA,SAAA1B,GAAA9rD,CAAA,EACA,OAAAytD,GAUA,iBAVAztD,GAWA,YAXAA,GAYA,aAZAA,EAAAA,EAAA,IAA8C6oD,GAAK7oD,EACnD,CCvpCA,IAAA0tD,GAAA,GAEAC,GAAA,CAAkCzK,mBAAA,IAClC0K,GAAA,gCAIAC,GAAA,CACA,CAAGl+C,KAAA,aAAAlF,GAAA,wCACH,CAAGkF,KAAA,qBAAAlF,GAAA,wCACH,CACAkF,KAAA,YACAlF,GAAA,qDACAwwB,GAAA,cACA,EACA,CACAtrB,KAAA,eACAlF,GAAA,qDACAwwB,GAAA,iBACA,EACA,CACAtrB,KAAA,kBACAlF,GAAA,qDACAwwB,GAAA,oBACA,EACA,CAAGtrB,KAAA,aAAAlF,GAAA,wCACH,CAAGkF,KAAA,sBAAAlF,GAAA,+BACH,CACAkF,KAAA,mBACAlF,GAAA,gDACA,EACA,CAAGkF,KAAA,aAAAlF,GAAA,qBACH,CAAGkF,KAAA,UAAAlF,GAAA,kCAAAwwB,GAAA,iBACH,CAAGtrB,KAAA,eAAAlF,GAAA,wBACH,CAAGkF,KAAA,YAAAlF,GAAA,iCAAAwwB,GAAA,cACH,CAAGtrB,KAAA,SAAAlF,GAAA,4BAAAwwB,GAAA,YACH,CAAGtrB,KAAA,YAAAlF,GAAA,qBACH,CAAGkF,KAAA,oBAAAlF,GAAA,oBAAAwwB,GAAA,gBACH,CAAGtrB,KAAA,mBAAAlF,GAAA,oBAAAwwB,GAAA,gBACH,CAcO,SAAA6yB,GAAAluD,CAAA,EACP,IAAAmuD,EAAAC,SA6EApuD,CAAA,EACA,IAAAquD,EAAAruD,EAAAquD,aAAA,EAAAP,GACAQ,EAAAtuD,EAAAsuD,aAAA,EAAAR,GACAS,EAAAvuD,EAAAuuD,mBAAA,CACA,CAAO,GAAAvuD,EAAAuuD,mBAAA,IAAAR,EAAA,EACPA,GAQA,OANoBJ,KACpBjc,GAAA,CAAS8F,IACT9F,GAAA,CAAA4c,GACA5c,GAAA,CAASiV,GAAY4H,GACrB7c,GAAA,CAAA2c,EAGA,EA3FAruD,GACA2+B,EAAA6vB,SAoGAxuD,CAAA,EACA,IAAA2K,EAAA3K,EAAA2K,QAAA,KACAg0B,EAAA,IAAmBsqB,GAYnB,MAVA,iBAAAt+C,EACAg0B,EAAAv+B,KAAA,CAAAuK,EAEI,GAAAs3B,EAAAwsB,EAAA,EACJ,qBACA9jD,EACA,4CAIAg0B,CACA,EAnHA3+B,GACA,OAAA0uD,SA8HA1S,CAAA,CAAAh8C,CAAA,EACA,IAAA2uD,EAAA3uD,EAAA2uD,eAAA,CACAC,EAAA5uD,EAAA4uD,YAAA,CACAvrB,EAAArjC,EAAAqjC,UAAA,CACAwrB,EAAA7uD,EAAA6uD,kBAAA,CACAC,EAAA9uD,EAAA8uD,QAAA,CACAC,EAAA/uD,EAAA+uD,gBAAA,CACAC,EAAAhvD,EAAAgvD,YAAA,EAAAC,GAEA,QAAAC,KAAAjB,GACArvD,OAAAD,MAAA,CAAAqB,EAAAkvD,EAAAn/C,IAAA,GACM,GAAAkyB,EAAAwsB,EAAA,EACN,eACAS,EAAAn/C,IAAA,CACA,WACAm/C,CAAAA,EAAA7zB,EAAA,CACA,QAAA6zB,EAAA7zB,EAAA,aACA,aALA,4EASA6zB,EAAArkD,EAAA,CACA,oBA0BA,OArBA8jD,GAAAE,GACI,GAAA5sB,EAAAwsB,EAAA,EACJ,6FAKAzuD,EAAAqc,SAAA,EACA2/B,CAAAA,EAAA,CACA93C,KAAA,UACA07B,QAAA,MACA1oB,WAAA,CAAmBmF,UAAArc,EAAAqc,SAAA,EAEnB1R,SACAqxC,SAAAA,EAAA93C,IAAA,CAAA83C,EAAArxC,QAAA,EAAAqxC,EAAA,CAEA,EAGE,GAAA4J,GAAAC,EAAA,EAAK7J,EAgBP,SAAAx5C,CAAA,CAAAwO,CAAA,CAAAytB,CAAA,EACA,GAAAj8B,QAAAA,EAAA0B,IAAA,EAAAu6B,GAAA,iBAAAztB,EAOA,OANA89C,EACArwB,EAAA9zB,QAAA,CAAA4F,MAAA,CAAAS,EAAA,GAEAytB,EAAA9zB,QAAA,CAAAqG,EAAA,EAAkC9M,KAAA,OAAA9D,MAAAoC,EAAApC,KAAA,EAGlC4Q,EAGA,GAAAxO,YAAAA,EAAA0B,IAAA,EAEA,IAAAxE,EAEA,IAAAA,KAAkB4jC,GAClB,GACA1kC,OAAAD,MAAA,CAAwB2kC,GAAa5jC,IACrCd,OAAAD,MAAA,CAAA6D,EAAA0U,UAAA,CAAAxX,GACA,CACA,IAAAU,EAAAoC,EAAA0U,UAAA,CAAAxX,EAAA,CACA8I,EAAuB86B,EAAa,CAAA5jC,EAAA,CACpC8I,CAAAA,OAAAA,GAAAA,EAAA0H,QAAA,CAAA1N,EAAAo9B,OAAA,IACAp9B,CAAAA,EAAA0U,UAAA,CAAAxX,EAAA,CAAAsvD,EAAA57C,OAAAhT,GAAA,IAAAV,EAAA8C,EAAA,CAEA,CAEA,CAEA,GAAAA,YAAAA,EAAA0B,IAAA,EACA,IAAAqP,EAAAo7C,EACA,CAAAA,EAAAz+C,QAAA,CAAA1N,EAAAo9B,OAAA,EACAivB,EAAAA,GACAA,EAAA3+C,QAAA,CAAA1N,EAAAo9B,OAAA,EAOA,GAJA,CAAArsB,GAAAq7C,GAAA,iBAAA59C,GACAuC,CAAAA,EAAA,CAAAq7C,EAAApsD,EAAAwO,EAAAytB,EAAA,EAGAlrB,GAAAkrB,GAAA,iBAAAztB,EAOA,OANA+9C,GAAAvsD,EAAAmI,QAAA,CACA8zB,EAAA9zB,QAAA,CAAA4F,MAAA,CAAAS,EAAA,KAAAxO,EAAAmI,QAAA,EAEA8zB,EAAA9zB,QAAA,CAAA4F,MAAA,CAAAS,EAAA,GAGAA,CAEA,CACA,GAhESm+C,SzFzRFnT,CAAA,CAAAh8C,CAAA,MA8UPovD,EAnBAh6C,EAAAi6C,MApTAp4C,EANA,IAAAjX,GAAAA,KAAA6M,IAAA7M,EAAAmP,QAAA,CACA,kDAGA,IAAA0xB,EAAA7gC,EAAA6gC,QAAA,EAAAh0B,KAAAA,EAIA,GAAA7M,EAAAsvD,WAAA,EACA,sBAAAtvD,EAAAovD,MAAA,CACA,gBACA,yDAkUAA,EA9TApvD,EAAAovD,MAAA,CAAAn4C,EAiUA,SAAAzU,CAAA,CAAA0B,CAAA,CAAA4F,CAAA,CAAApK,CAAA,EAEA,IAAA6vD,EAAAjwD,MAAAF,OAAA,CAAA0K,EAAAa,QAAA,EACA+yB,EAAkBC,EAAUn7B,GAC5B,OAAA4sD,EACAlrD,EACA4F,EACApK,EACA6vD,EACA,CACAC,aAAA9xB,EAAAA,EAAA17B,MAAA,GAAA6K,KAAAA,EACA4iD,SA5UA5uB,EA6UA6uB,WAAAhyB,EAAAA,EAAAn7B,IAAA,CAAAsK,KAAAA,CACA,EACAA,KAAAA,EAEA,CAhVA,KAAI,CACJ,sBAAA7M,EAAAoV,GAAA,CACA,wDAGA,sBAAApV,EAAAqvD,IAAA,CACA,yDAoSAj6C,EAjSApV,EAAAoV,GAAA,CAiSAi6C,EAjSArvD,EAAAqvD,IAAA,CAAAp4C,EAoSA,SAAAnK,CAAA,CAAA5I,CAAA,CAAA4F,CAAA,CAAApK,CAAA,EAGA,IAAA2rD,EAAAkE,MADAnwD,OAAA,CAAA0K,EAAAa,QAAA,EACA0kD,EAAAj6C,EACA,OAAA1V,EAAA2rD,EAAAnnD,EAAA4F,EAAApK,GAAA2rD,EAAAnnD,EAAA4F,EACA,CAxSA,CAGA,IAAA01B,EAAA,CACArwB,SAAAnP,EAAAmP,QAAA,CACAkvB,UAAA,GACAgF,WAAArjC,EAAAqjC,UAAA,KACApsB,OAAAA,EACAmqB,yBAAAphC,EAAAohC,wBAAA,UACAS,UAAA7hC,EAAA2vD,eAAA,CAAA3vD,EAAA2vD,eAAA,GAAA9iD,KAAAA,EACAg0B,SAAAA,EACAD,mBAAA5gC,EAAA4gC,kBAAA,KACAiC,SAAA7iC,CAAA,IAAAA,EAAA6iC,QAAA,CACAF,SAAA3iC,EAAA2iC,QAAA,KACAhD,OAAA3/B,QAAAA,EAAAwV,KAAA,CAAsCynB,EAAMD,EAC5C8D,sBAAA9gC,EAAA8gC,qBAAA,QACAO,sBAAArhC,CAAA,IAAAA,EAAAqhC,qBAAA,EAGAtwB,EAAAL,GAAA8uB,EAAAwc,EAAAnvC,KAAAA,UAGA,oBAAAkE,EACAA,EAIAyuB,EAAAvoB,MAAA,CACA+kC,EACAxc,EAAArwB,QAAA,CACA,CAAKxE,SAAAoG,GAAAlE,KAAAA,CAAA,EACLA,KAAAA,EAEA,EyF6NqBmvC,EAAA,CACrB7sC,SAAYygD,GAAAzgD,QAAA,CAIZk0B,WAAAA,EACAzC,mBAAA,GACAxrB,IAAOw6C,GAAAx6C,GAAA,CACPi6C,KAAQO,GAAAP,IAAA,CACRxsB,SAAA,GACAF,SAAA,EACA,EAsDA,EA/OAwrB,EAAAjB,OAAA,CAAAiB,EAAAnC,KAAA,CAAArtB,GAAAA,GAAA3+B,EACA,CAyPO,SAAAivD,GAAA7uD,CAAA,EAIP,IAAAyvD,EAAAzvD,EAAAoP,OAAA,MACAsgD,EAAA1vD,EAAAoP,OAAA,MACAugD,EAAA3vD,EAAAoP,OAAA,MACA4jC,EAAAhzC,EAAAoP,OAAA,aAEA,KAEAqgD,GAEAzc,KAAAA,GAAAyc,EAAAzc,GACA0c,KAAAA,GAAAD,EAAAC,GACAC,KAAAA,GAAAF,EAAAE,GAEA/B,GAAAxlD,IAAA,CAAApI,EAAAoD,KAAA,GAAAqsD,IAEAzvD,EAGA,EACA,oCC5aO,SAAA4vD,EAAA5vD,CAAA,CAAA+H,CAAA,EACP,IAAAxF,EAAAyQ,OAAAhT,GAEA,oBAAA+H,EACA,sCAGA,IAAA26B,EAAA,EACA9xB,EAAArO,EAAA6M,OAAA,CAAArH,GAEA,KAAA6I,KAAAA,GACA8xB,IACA9xB,EAAArO,EAAA6M,OAAA,CAAArH,EAAA6I,EAAA7I,EAAAlH,MAAA,EAGA,OAAA6hC,CACA,6EGbA,IAAAmtB,EAAA,WAEAC,EAAA,oCAkEA,SAAAC,EAAA9qB,CAAA,EACA,KAAAlzB,KAAA,EAAcjO,KAAA,OAAA8jB,MAAA,KAAAgX,IAAA,GAAAr0B,SAAA,IAAiD06B,EAC/D,CAMA,SAAA+qB,EAAA/qB,CAAA,EACA,KAAAyS,MAAA,CAAA3lC,KAAA,CAAAgmC,gBAAA,CAAA54C,IAAA,MAAA8lC,EACA,CAMA,SAAAgrB,EAAAhrB,CAAA,EACA,KAAAyS,MAAA,CAAAzlC,IAAA,CAAA8lC,gBAAA,CAAA54C,IAAA,MAAA8lC,EACA,CAMA,SAAAirB,EAAAjrB,CAAA,EACA,KAAAyS,MAAA,CAAAzlC,IAAA,CAAAwK,IAAA,CAAAtd,IAAA,MAAA8lC,GACA,IAAA7iC,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACE,GAAAghC,EAAAj5B,EAAA,EAAMxG,SAAAA,EAAA0B,IAAA,EACR1B,EAAAw8B,GAAA,gBAAAsK,cAAA,CAAAjE,EACA,CAMA,SAAAkrB,EAAAlrB,CAAA,EACA,KAAAyS,MAAA,CAAAzlC,IAAA,CAAAgmC,aAAA,CAAA94C,IAAA,MAAA8lC,EACA,CAMA,SAAAmrB,EAAAnrB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,EACA,CAGA,SAAAorB,EAAAzU,CAAA,GACE0U,SDrDK1U,CAAA,CAAA1oC,CAAA,CAAAtT,CAAA,EAEP,IAAA2wD,EAAkB,GAAAC,EAAA3jD,CAAA,EAAOwD,CADzBzQ,GAAA,IACyBykD,MAAA,MACzBoM,EAAAC,SAiIAC,CAAA,EAEA,IAAAhgD,EAAA,GAEA,IAAAzR,MAAAF,OAAA,CAAA2xD,GACA,qEAKA,IAAAz9C,EACA,CAAAy9C,CAAA,KAAAzxD,MAAAF,OAAA,CAAA2xD,CAAA,KACAA,EACA,CAAAA,EAAA,CAEA//C,EAAA,GAEA,OAAAA,EAAAsC,EAAArS,MAAA,OAgBAg/B,EAfA,IAAA+wB,EAAA19C,CAAA,CAAAtC,EAAA,CACAD,EAAA3N,IAAA,EAeA,iBADA68B,EAdA+wB,CAAA,KAeA,OAA+CC,SDnPhC12B,CAAA,EACf,oBAAAA,EACA,qCAKA,OAAAA,EACA14B,OAAA,uBAAkB,QAClBA,OAAA,cACA,ECyOqDo+B,GAAA,KAAAA,EAfrDixB,SA0BArvD,CAAA,EACA,yBAAAA,EACAA,EACA,WACA,OAAAA,CACA,CACA,EAhCAmvD,CAAA,MACA,CAEA,OAAAjgD,CACA,EAxJAuC,GACA69C,EAAA,GAEA,OAAAA,EAAAN,EAAA5vD,MAAA,EACI,GAAA47C,EAAAuU,EAAA,EAAYpV,EAAA,OAAAqV,GAIhB,SAAAA,EAAA7uD,CAAA,CAAA8uD,CAAA,EACA,IAEAC,EAFAvgD,EAAA,GAIA,OAAAA,EAAAsgD,EAAArwD,MAAA,GACA,IAAAw9B,EAAA6yB,CAAA,CAAAtgD,EAAA,CAEA2rC,EAAA4U,EAAAA,EAAA5mD,QAAA,CAAAkC,KAAAA,EAEA,GACA8jD,EACAlyB,EACAke,EAAAA,EAAAntC,OAAA,CAAAivB,GAAA5xB,KAAAA,EACA0kD,GAGA,OAGAA,EAAA9yB,CACA,CAEA,GAAA8yB,EACA,OAAAn8B,SAcA5yB,CAAA,CAAA8uD,CAAA,EACA,IAAA7yB,EAAA6yB,CAAA,CAAAA,EAAArwD,MAAA,IACAg/B,EAAA4wB,CAAA,CAAAM,EAAA,IACAtvD,EAAAgvD,CAAA,CAAAM,EAAA,IACA7uD,EAAA,EAGA0O,EAAA2rC,EADAhyC,QAAA,CACA6E,OAAA,CAAAhN,GACAgvD,EAAA,GAEAvM,EAAA,GAEAhlB,EAAA0f,SAAA,GAEA,IAAAx9C,EAAA89B,EAAA18B,IAAA,CAAAf,EAAApC,KAAA,EAEA,KAAA+B,GAAA,CACA,IAAAE,EAAAF,EAAA6O,KAAA,CAEAygD,EAAA,CACAzgD,MAAA7O,EAAA6O,KAAA,CACAuvB,MAAAp+B,EAAAo+B,KAAA,CACA3B,MAAA,IAAA0yB,EAAA9uD,EAAA,EAEApC,EAAAyB,KAAAM,EAAAsvD,GA8BA,GA5BA,iBAAArxD,GACAA,CAAAA,EAAAA,EAAAa,MAAA,IAAoCiD,KAAA,OAAA9D,MAAAA,CAAA,EAAqByM,KAAAA,CAAA,EAIzDzM,CAAA,IAAAA,EAIA6/B,EAAA0f,SAAA,CAAAt9C,EAAA,GAEAC,IAAAD,GACA4iD,EAAA7hD,IAAA,EACAc,KAAA,OACA9D,MAAAoC,EAAApC,KAAA,CAAAoD,KAAA,CAAAlB,EAAAD,EACA,GAGA/C,MAAAF,OAAA,CAAAgB,GACA6kD,EAAA7hD,IAAA,IAAAhD,GACUA,GACV6kD,EAAA7hD,IAAA,CAAAhD,GAGAkC,EAAAD,EAAAF,CAAA,IAAAlB,MAAA,CACAuwD,EAAA,IAGA,CAAAvxB,EAAAyxB,MAAA,CACA,MAGAvvD,EAAA89B,EAAA18B,IAAA,CAAAf,EAAApC,KAAA,CACA,CAYA,OAVAoxD,GACAlvD,EAAAE,EAAApC,KAAA,CAAAa,MAAA,EACAgkD,EAAA7hD,IAAA,EAAoBc,KAAA,OAAA9D,MAAAoC,EAAApC,KAAA,CAAAoD,KAAA,CAAAlB,EAAA,GAGpBm8B,EAAA9zB,QAAA,CAAA4F,MAAA,CAAAS,EAAA,KAAAi0C,IAEAA,EAAA,CAAAziD,EAAA,CAGAwO,EAAAi0C,EAAAhkD,MAAA,EArFAuB,EAAA8uD,EAEA,CAqFA,ECpEAtV,EACA,CACA,mDAAA2V,EAAA,CACA,2DAA4BC,EAAA,CAC5B,CACA,CAAKnN,OAAA,0BAEL,CAYA,SAAAkN,EAAA7kD,CAAA,CAAAi8C,CAAA,CAAA8I,CAAA,CAAA95B,CAAA,CAAA51B,CAAA,EACA,IAAAmG,EAAA,GAGA,IAAA88B,EAAAjjC,KAKA,MAAAqG,IAAA,CAAAugD,KACA8I,EAAA9I,EAAA8I,EACA9I,EAAA,GACAzgD,EAAA,WAGA,CAAAwpD,SAqDAD,CAAA,EACA,IAAAE,EAAAF,EAAA5uB,KAAA,aAGA8uB,CAAAA,EAAA9wD,MAAA,IACA8wD,CAAA,CAAAA,EAAA9wD,MAAA,KACA,KAAAuH,IAAA,CAAAupD,CAAA,CAAAA,EAAA9wD,MAAA,MACA,cAAAuH,IAAA,CAAAupD,CAAA,CAAAA,EAAA9wD,MAAA,OACA8wD,CAAA,CAAAA,EAAA9wD,MAAA,KACA,KAAAuH,IAAA,CAAAupD,CAAA,CAAAA,EAAA9wD,MAAA,MACA,cAAAuH,IAAA,CAAAupD,CAAA,CAAAA,EAAA9wD,MAAA,MAMA,EArEA4wD,IAVA,SAcA,IAAAE,EAAAC,SAuEAhzB,CAAA,EACA,IAAAizB,EAAA,sBAAqC1uD,IAAA,CAAAy7B,GAErC,IAAAizB,EACA,OAAAjzB,EAAAnyB,KAAAA,EAAA,CAGAmyB,EAAAA,EAAAx7B,KAAA,GAAAyuD,EAAAjhD,KAAA,EAEA,IAAAkhD,EAAAD,CAAA,IACAE,EAAAD,EAAA1iD,OAAA,MACA4iD,EAAwBpC,EAAMhxB,EAAA,KAC9BqzB,EAAsBrC,EAAMhxB,EAAA,KAE5B,KAAAmzB,KAAAA,GAAAC,EAAAC,GACArzB,GAAAkzB,EAAA1uD,KAAA,GAAA2uD,EAAA,GAEAA,EAAAD,CADAA,EAAAA,EAAA1uD,KAAA,CAAA2uD,EAAA,IACA3iD,OAAA,MACA6iD,IAGA,OAAArzB,EAAAkzB,EAAA,EA5FAL,EAAA95B,GAEA,IAAAg6B,CAAA,aAGA,IAAAhhD,EAAA,CACA7M,KAAA,OACA8jB,MAAA,KACAgX,IAAA12B,EAAAygD,EAAAgJ,CAAA,IACApnD,SAAA,EAAgBzG,KAAA,OAAA9D,MAAA2oD,EAAAgJ,CAAA,KAAyC,SAGzD,KACA,CAAAhhD,EAAA,CAAqB7M,KAAA,OAAA9D,MAAA2xD,CAAA,KAA8B,CAGnDhhD,CACA,CAUA,SAAA6gD,EAAA9kD,CAAA,CAAAwlD,CAAA,CAAAnzC,CAAA,CAAAhd,CAAA,QACA,CAEA,EAAAijC,EAAAjjC,EAAA,KAEA,UAAAqG,IAAA,CAAA2W,EAAA,GAKA,CACAjb,KAAA,OACA8jB,MAAA,KACAgX,IAAA,UAAAszB,EAAA,IAAAnzC,EACAxU,SAAA,EAAgBzG,KAAA,OAAA9D,MAAAkyD,EAAA,IAAAnzC,CAAA,EAAyC,CAEzD,CAyDA,SAAAimB,EAAAjjC,CAAA,CAAAowD,CAAA,EACA,IAAAhhD,EAAApP,EAAAo+B,KAAA,CAAAiK,UAAA,CAAAroC,EAAA6O,KAAA,IAEA,MACA,CAAA7O,IAAAA,EAAA6O,KAAA,EACM,GAAA21B,EAAA7yB,EAAA,EAAiBvC,IACjB,GAAAo1B,EAAA5yB,EAAA,EAAkBxC,EAAA,GAExB,EAAAghD,GAAAhhD,KAAAA,CAAA,CAEA,eC/PA,SAAAihD,IACA,KAAA5f,MAAA,EACA,CAMA,SAAA6f,EAAAptB,CAAA,EACA,KAAAlzB,KAAA,EAAcjO,KAAA,oBAAAiuC,WAAA,GAAAhzB,MAAA,IAAqDkmB,EACnE,CAMA,SAAAqtB,IACA,KAAA9f,MAAA,EACA,CAMA,SAAA+f,EAAAttB,CAAA,EACA,KAAAlzB,KAAA,CACA,CAAKjO,KAAA,qBAAAiuC,WAAA,GAAAhzB,MAAA,GAAAxU,SAAA,IACL06B,EAEA,CAMA,SAAAutB,EAAAvtB,CAAA,EACA,IAAAlmB,EAAA,KAAA+7B,MAAA,GACA14C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACE,GAAAghC,EAAAj5B,EAAA,EAAMxG,sBAAAA,EAAA0B,IAAA,EACR1B,EAAA2vC,UAAA,CAAoB,GAAA7B,EAAAxrC,CAAA,EACpB,KAAAwkC,cAAA,CAAAjE,IACA58B,WAAA,GACAjG,EAAA2c,KAAA,CAAAA,CACA,CAMA,SAAA0zC,EAAAxtB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,EACA,CAMA,SAAAytB,EAAAztB,CAAA,EACA,IAAAlmB,EAAA,KAAA+7B,MAAA,GACA14C,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACE,GAAAghC,EAAAj5B,EAAA,EAAMxG,uBAAAA,EAAA0B,IAAA,EACR1B,EAAA2vC,UAAA,CAAoB,GAAA7B,EAAAxrC,CAAA,EACpB,KAAAwkC,cAAA,CAAAjE,IACA58B,WAAA,GACAjG,EAAA2c,KAAA,CAAAA,CACA,CAMA,SAAA4zC,EAAA1tB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,EACA,CAWA,SAAAwd,EAAArgD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACA,IAAA27C,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,OACA7gD,EAAAmtB,EAAArtB,KAAA,sBACAghD,EAAA3zB,EAAArtB,KAAA,cAOA,OANA/R,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5zB,EAAA6zB,aAAA,CAAA7wD,GAAA,CAA2CoP,MAAA,IAAA6C,OAAArU,CAAA,IAE3C+yD,IACA9gD,IACAjS,GAAA4yD,EAAAE,IAAA,KAEA,CAoFA,SAAAI,EAAA/wD,CAAA,CAAAyO,CAAA,CAAAuiD,CAAA,EACA,OAAAviD,IAAAA,EAAAzO,EAAAixD,EAAAjxD,EAAAyO,EAAAuiD,EACA,CAGA,SAAAC,EAAAjxD,CAAA,CAAAyO,CAAA,CAAAuiD,CAAA,EACA,OAAAA,EAAA,WAAAhxD,CACA,CAjMAsgD,EAAA4Q,IAAA,CAkFA,WACA,SACA,EChFA,IAAAC,EAAA,CACA,WACA,qBACA,iBACA,YACA,aACA,kBACA,CA2CA,SAAAC,EAAAtuB,CAAA,EACA,KAAAlzB,KAAA,EAAcjO,KAAA,SAAAyG,SAAA,IAA6B06B,EAC3C,CAMA,SAAAuuB,EAAAvuB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,EACA,CAMA,SAAAwuB,EAAArxD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACA,IAAA27C,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAhF,EAAAmtB,EAAArtB,KAAA,kBACA/R,EAAA4yD,EAAAE,IAAA,OAQA,OAFA9yD,GALAo/B,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACA,GAAAwwD,EAAAxpD,OAAA,GACAiL,OAAArU,EACAwR,MAAA,GACA,GACAohD,EAAAE,IAAA,OACA7gD,IACAjS,CACA,CCqDA,SAAA2zD,EAAA3zD,CAAA,EACA,OAAAA,EAAAa,MAAA,CAoOA,SAAA+yD,EAAA5zD,CAAA,EACA,IAAAmR,EAAA,iBAAAnR,EAAAA,EAAAw7C,WAAA,MAEA,OAAArqC,KAAAA,GAAAA,KAAAA,EACA,GACAA,KAAAA,GAAAA,MAAAA,EACA,IACAA,KAAAA,GAAAA,MAAAA,EACA,IACA,CACA,CC9WA,SAAAnC,EAAA7M,CAAA,CAAAuK,CAAA,CAAAymD,CAAA,EACA,UAAAA,CAAAA,EAAA,QAAAhxD,CACA,CCNA,SAAA0xD,EAAAr1B,CAAA,CAAAtrB,CAAA,CAAA4gD,CAAA,EAKA,GAJA,iBAAA5gD,GACAA,CAAAA,EAAA,CAAAA,EAAA,EAGA,CAAAA,GAAAA,IAAAA,EAAArS,MAAA,CACA,OAAAizD,EAGA,IAAAljD,EAAA,GAEA,OAAAA,EAAAsC,EAAArS,MAAA,EACA,GAAA29B,EAAA1uB,QAAA,CAAAoD,CAAA,CAAAtC,EAAA,EACA,SAIA,QACA,CC1BO,SAAAkoC,EAAApsC,CAAA,CAAAqnD,CAAA,CAAA30B,CAAA,CAAAnoB,CAAA,EACP,IAAArG,EAAA,GAEA,OAAAA,EAAAwuB,EAAA40B,MAAA,CAAAnzD,MAAA,ODRO29B,EAAA9Y,ECWP,GACA0Z,OAAAA,EAAA40B,MAAA,CAAApjD,EAAA,CAAA7I,SAAA,EDVA8rD,EAFOr1B,ECaaY,EAAAZ,KAAA,CDXpB9Y,CAFOA,ECaa0Z,EAAA40B,MAAA,CAAApjD,EAAA,EDXpBi/C,WAAA,MACA,CAAAgE,EAAAr1B,EAAA9Y,EAAAoqC,cAAA,KCYA,cAAA1nD,IAAA,CAAA6O,EAAA5C,MAAA,QAEA,CAEA,YACA,CI2CA,SAAS4/C,EAAG9xD,CAAA,CAAAuK,CAAA,CAAAymD,CAAA,EACZ,OAAAA,EAAA,WAAAhxD,CACA,CClEO,SAAA+xD,EAAA90B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAAu0D,KAAA,MAEA,GAAA3pB,MAAAA,GAAAA,MAAAA,EACA,YACA,gCACAA,EACA,gDAIA,OAAAA,CACA,CGZO,SAAA4pB,EAAAjjD,CAAA,EACP,YAAAA,EAAAvS,QAAA,KAAAoJ,WAAA,MACA,CZqBAyrD,EAAAJ,IAAA,CAwEA,WACA,SACA,gBajEO,SAAAgB,EAAAC,CAAA,CAAArpB,CAAA,CAAAT,CAAA,EACP,IAAA+pB,EAAsB,GAAA3iB,EAAA9sC,CAAA,EAAiBwvD,GACvCE,EAAqB,GAAA5iB,EAAA9sC,CAAA,EAAiBmmC,UAGtC,KAAAx+B,IAAA8nD,EACAC,KAAA/nD,IAAA+nD,EAIAhqB,MAAAA,EACA,CAAWS,OAAA,GAAAqpB,QAAA,IACX,CAAWrpB,OAAA,GAAAqpB,QAAA,IACXE,IAAAA,EAEA,CAAWvpB,OAAA,GAAAqpB,QAAA,IAEX,CAAWrpB,OAAA,GAAAqpB,QAAA,IAIXC,IAAAA,EACAC,KAAA/nD,IAAA+nD,EAEA,CAASvpB,OAAA,GAAAqpB,QAAA,IACTE,IAAAA,EAEA,CAAWvpB,OAAA,GAAAqpB,QAAA,IAEX,CAAWrpB,OAAA,GAAAqpB,QAAA,IAIXE,KAAA/nD,IAAA+nD,EAEA,CAAOvpB,OAAA,GAAAqpB,QAAA,IACPE,IAAAA,EAEA,CAASvpB,OAAA,GAAAqpB,QAAA,IAET,CAASrpB,OAAA,GAAAqpB,QAAA,GACT,CC/DO,SAAA1b,EAAAx2C,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAuzB,EAAiBiqB,SHXVr1B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAAg5C,QAAA,MAEA,GAAApO,MAAAA,GAAAA,MAAAA,EACA,YACA,mCACAA,EACA,kDAIA,OAAAA,CACA,EGD8BpL,GAC9BntB,EAAAmtB,EAAArtB,KAAA,aACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACA5C,EAAAu+C,EAAAE,IAAA,CAAAtoB,GAEA8L,EAAAsc,EAAAE,IAAA,CACA1zB,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAoP,MAAAg5B,EACAn2B,OAAAA,EACA,GAAAu+C,EAAAxpD,OAAA,MAGAsrD,EAAApe,EAAAlM,UAAA,IACA5kB,EAAe6uC,EACfp9C,EAAA5C,MAAA,CAAA+1B,UAAA,CAAAnzB,EAAA5C,MAAA,CAAAxT,MAAA,IACA6zD,EACAlqB,EAGAhlB,CAAAA,EAAAylB,MAAA,EACAqL,CAAAA,EAAc8d,EAAwBM,GAAApe,EAAAlzC,KAAA,KAGtC,IAAAuxD,EAAAre,EAAAlM,UAAA,CAAAkM,EAAAz1C,MAAA,IACA2uC,EAAgB6kB,EAAUp9C,EAAAzF,KAAA,CAAA44B,UAAA,IAAAuqB,EAAAnqB,EAE1BgF,CAAAA,EAAAvE,MAAA,EACAqL,CAAAA,EAAAA,EAAAlzC,KAAA,OAAqCgxD,EAAwBO,EAAA,EAG7D,IAAAnjD,EAAAohD,EAAAE,IAAA,CAAAtoB,GAQA,OANAv4B,IAEAmtB,EAAAw1B,8BAAA,EACApjD,MAAAg+B,EAAA8kB,OAAA,CACAjgD,OAAAmR,EAAA8uC,OAAA,EAEAjgD,EAAAiiC,EAAA9kC,CACA,CAjDAonC,EAAAya,IAAA,CAyDA,SAAA3mD,CAAA,CAAAqnD,CAAA,CAAA30B,CAAA,EACA,OAAAA,EAAAx/B,OAAA,CAAAg5C,QAAA,KACA,0BG1DO,SAAAp+B,EAAApY,CAAA,EACP,OAAAA,EAAApC,KAAA,IACA,CCIO,SAAS60D,EAAKzyD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACrB,IAAAk9C,EAAgBD,EAAU90B,GAC1B4iB,EAAAmS,MAAAA,EAAA,qBACAliD,EAAAmtB,EAAArtB,KAAA,UACAghD,EAAA3zB,EAAArtB,KAAA,UACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,OAmDA,OA/CA9yD,GAHA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAqO,GAAA,EAA0B4D,OAAArU,EAAAwR,MAAA,OAAAohD,EAAAxpD,OAAA,MAE1BwpD,EAAAE,IAAA,OAEAC,IAIA,CAAA3wD,EAAAw8B,GAAA,EAAAx8B,EAAAwlB,KAAA,EAEA,eAAAxf,IAAA,CAAAhG,EAAAw8B,GAAA,GAEAm0B,EAAA3zB,EAAArtB,KAAA,uBACA/R,GAAA4yD,EAAAE,IAAA,MAIA9yD,GAHA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EAA4BvqB,OAAArU,EAAAwR,MAAA,OAAAohD,EAAAxpD,OAAA,MAE5BwpD,EAAAE,IAAA,QAGAC,EAAA3zB,EAAArtB,KAAA,mBACA/R,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EACAvqB,OAAArU,EACAwR,MAAApP,EAAAwlB,KAAA,SACA,GAAAgrC,EAAAxpD,OAAA,OAKA2pD,IAEA3wD,EAAAwlB,KAAA,GACAmrC,EAAA3zB,EAAArtB,KAAA,SAAkCiwC,EAAO,GACzChiD,GAAA4yD,EAAAE,IAAA,KAAAqB,GAQAn0D,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAwlB,KAAA,EACAvT,OAAArU,EACAwR,MAAA2iD,EACA,GAAAvB,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,CAAAqB,GACApB,KAGA/yD,GAAA4yD,EAAAE,IAAA,MACA7gD,IAEAjS,CACA,CC5DO,SAAAmjD,EAAA/gD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAnT,EAAA1B,EAAA03C,aAAA,CACA7nC,EAAAmtB,EAAArtB,KAAA,mBACAghD,EAAA3zB,EAAArtB,KAAA,UACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,OACAriD,EAAA2uB,EAAA4zB,IAAA,CAAA5wD,EAAAqO,GAAA,EACA4D,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,KAEApJ,GAAA4yD,EAAAE,IAAA,CAAAriD,EAAA,MAEAsiD,IAEA,IAAAv0B,EAAAY,EAAAZ,KAAA,CACAY,EAAAZ,KAAA,IACAu0B,EAAA3zB,EAAArtB,KAAA,cAKA,IAAA8nC,EAAAza,EAAA4zB,IAAA,CAAA5zB,EAAA6zB,aAAA,CAAA7wD,GAAA,CACAiS,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,KAeA,OAbA2pD,IACA3zB,EAAAZ,KAAA,CAAAA,EACAvsB,IAEAnO,SAAAA,GAAA2M,GAAAA,IAAAopC,EAEI/1C,aAAAA,EAEJ9D,EAAAA,EAAAoD,KAAA,OAEApD,GAAA4yD,EAAAE,IAAA,MALA9yD,GAAA4yD,EAAAE,IAAA,CAAAjZ,EAAA,KAQA75C,CACA,CC1CO,SAAAqjD,EAAAjhD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,EACP,IAAAp/B,EAAAoC,EAAApC,KAAA,KACAyqC,EAAA,IACA75B,EAAA,GAKA,uBAAA65B,EAAA,YAAAriC,IAAA,CAAApI,IACAyqC,GAAA,IAmBA,IAbA,WAAAriC,IAAA,CAAApI,IACA,YAAAoI,IAAA,CAAApI,IAAA,WAAAoI,IAAA,CAAApI,IAAA,QAAAoI,IAAA,CAAApI,EAAA,GAEAA,CAAAA,EAAA,IAAAA,EAAA,KAUA,EAAA4Q,EAAAwuB,EAAA40B,MAAA,CAAAnzD,MAAA,OAIAkB,EAHA,IAAA2jB,EAAA0Z,EAAA40B,MAAA,CAAApjD,EAAA,CACA8wB,EAAAtC,EAAA01B,cAAA,CAAApvC,GAOA,GAAAA,EAAAokB,OAAA,CAEA,KAAA/nC,EAAA2/B,EAAAv+B,IAAA,CAAAnD,IAAA,CACA,IAAAiC,EAAAF,EAAA6O,KAAA,CAIA,KAAA5Q,EAAAoqC,UAAA,CAAAnoC,IACAjC,KAAAA,EAAAoqC,UAAA,CAAAnoC,EAAA,IAEAA,IAGAjC,EAAAA,EAAAoD,KAAA,GAAAnB,GAAA,IAAAjC,EAAAoD,KAAA,CAAArB,EAAA6O,KAAA,GACA,CACA,CAEA,OAAA65B,EAAAzqC,EAAAyqC,CACA,CCxDO,SAAAsqB,EAAA3yD,CAAA,CAAAg9B,CAAA,EACP,IAAA4M,EAAc,GAAAgpB,EAAAtY,CAAA,EAAQt6C,GAEtB,MAAA2gC,CAAAA,CACA,EAAA3D,EAAAx/B,OAAA,CAAAq1D,YAAA,EAEA7yD,EAAAw8B,GAAA,EAEA,CAAAx8B,EAAAwlB,KAAA,EAEAxlB,EAAAmI,QAAA,EACAnI,IAAAA,EAAAmI,QAAA,CAAA1J,MAAA,EACAuB,SAAAA,EAAAmI,QAAA,IAAAzG,IAAA,EAEAkoC,CAAAA,IAAA5pC,EAAAw8B,GAAA,YAAAoN,IAAA5pC,EAAAw8B,GAAA,GAEA,oBAAAx2B,IAAA,CAAAhG,EAAAw8B,GAAA,GAGA,kBAAAx2B,IAAA,CAAAhG,EAAAw8B,GAAA,EAEA,CCfO,SAASs2B,GAAI9yD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,MAKpBhF,EAEA8gD,EANA,IAAAoB,EAAgBD,EAAU90B,GAC1B4iB,EAAAmS,MAAAA,EAAA,qBACAvB,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GAMA,GAAM89C,EAAoB3yD,EAAAg9B,GAAA,CAE1B,IAAAZ,EAAAY,EAAAZ,KAAA,CACAY,EAAAZ,KAAA,IACAvsB,EAAAmtB,EAAArtB,KAAA,aACA,IAAA/R,EAAA4yD,EAAAE,IAAA,MAWA,OAHA9yD,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAiS,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,MACA7gD,IACAmtB,EAAAZ,KAAA,CAAAA,EACAx+B,CACA,CAEAiS,EAAAmtB,EAAArtB,KAAA,SACAghD,EAAA3zB,EAAArtB,KAAA,UACA,IAAA/R,EAAA4yD,EAAAE,IAAA,MAsDA,OA9CA9yD,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAiS,OAAArU,EACAwR,MAAA,KACA,GAAAohD,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,OACAC,IAIA,CAAA3wD,EAAAw8B,GAAA,EAAAx8B,EAAAwlB,KAAA,EAEA,eAAAxf,IAAA,CAAAhG,EAAAw8B,GAAA,GAEAm0B,EAAA3zB,EAAArtB,KAAA,uBACA/R,GAAA4yD,EAAAE,IAAA,MAIA9yD,GAHA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EAA4BvqB,OAAArU,EAAAwR,MAAA,OAAAohD,EAAAxpD,OAAA,MAE5BwpD,EAAAE,IAAA,QAGAC,EAAA3zB,EAAArtB,KAAA,mBACA/R,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EACAvqB,OAAArU,EACAwR,MAAApP,EAAAwlB,KAAA,SACA,GAAAgrC,EAAAxpD,OAAA,OAKA2pD,IAEA3wD,EAAAwlB,KAAA,GACAmrC,EAAA3zB,EAAArtB,KAAA,SAAkCiwC,EAAO,GACzChiD,GAAA4yD,EAAAE,IAAA,KAAAqB,GAQAn0D,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAwlB,KAAA,EACAvT,OAAArU,EACAwR,MAAA2iD,EACA,GAAAvB,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,CAAAqB,GACApB,KAGA/yD,GAAA4yD,EAAAE,IAAA,MAEA7gD,IACAjS,CACA,CCzFO,SAAAsjD,GAAAlhD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAnT,EAAA1B,EAAA03C,aAAA,CACA7nC,EAAAmtB,EAAArtB,KAAA,kBACAghD,EAAA3zB,EAAArtB,KAAA,UACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,MACAjoC,EAAAuU,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAiS,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,KAEApJ,GAAA4yD,EAAAE,IAAA,CAAAjoC,EAAA,MAEAkoC,IAEA,IAAAv0B,EAAAY,EAAAZ,KAAA,CACAY,EAAAZ,KAAA,IACAu0B,EAAA3zB,EAAArtB,KAAA,cAKA,IAAA8nC,EAAAza,EAAA4zB,IAAA,CAAA5zB,EAAA6zB,aAAA,CAAA7wD,GAAA,CACAiS,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,KAeA,OAbA2pD,IACA3zB,EAAAZ,KAAA,CAAAA,EACAvsB,IAEAnO,SAAAA,GAAA+mB,GAAAA,IAAAgvB,EAEI/1C,aAAAA,EAEJ9D,EAAAA,EAAAoD,KAAA,OAEApD,GAAA4yD,EAAAE,IAAA,MALA9yD,GAAA4yD,EAAAE,IAAA,CAAAjZ,EAAA,KAQA75C,CACA,CC/CO,SAAAm1D,GAAA/1B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAAw1D,MAAA,MAEA,GAAA5qB,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EACA,YACA,gCACAA,EACA,qDAIA,OAAAA,CACA,CGZO,SAAA6qB,GAAAj2B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAA01D,IAAA,MAEA,GAAA9qB,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EACA,YACA,gCACAA,EACA,mDAIA,OAAAA,CACA,CVhBAhwB,EAAA64C,IAAA,CAaA,WACA,SACA,ECZAwB,EAAKxB,IAAA,CAwEL,WACA,SACA,EC5EAlQ,EAAAkQ,IAAA,CAuDA,WACA,SACA,ECzDAhQ,EAAAgQ,IAAA,CAoEA,WACA,SACA,EElEA6B,GAAI7B,IAAA,CAsGJ,SAAAjxD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,EACA,OAAS21B,EAAoB3yD,EAAAg9B,GAAA,OAC7B,EC5GAkkB,GAAA+P,IAAA,CAuDA,WACA,SACA,ES5CO,IAAAkC,GAGH,GAAA/E,EAAA3jD,CAAA,EAAO,CACX,QACA,SACA,WAEA,WACA,oBACA,QACA,iBACA,aAEA,aACA,OACA,gBAEA,oBAEA,oBACA,SACA,OAEA,gBACA,EGzBO,SAAAstC,GAAA/3C,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAuzB,EAAiBgrB,SDXVp2B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAAu6C,MAAA,MAEA,GAAA3P,MAAAA,GAAAA,MAAAA,EACA,YACA,iCACAA,EACA,gDAIA,OAAAA,CACA,ECD4BpL,GAC5BntB,EAAAmtB,EAAArtB,KAAA,WACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACA5C,EAAAu+C,EAAAE,IAAA,CAAAtoB,EAAAA,GAEA8L,EAAAsc,EAAAE,IAAA,CACA1zB,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAoP,MAAAg5B,EACAn2B,OAAAA,EACA,GAAAu+C,EAAAxpD,OAAA,MAGAsrD,EAAApe,EAAAlM,UAAA,IACA5kB,EAAe6uC,EACfp9C,EAAA5C,MAAA,CAAA+1B,UAAA,CAAAnzB,EAAA5C,MAAA,CAAAxT,MAAA,IACA6zD,EACAlqB,EAGAhlB,CAAAA,EAAAylB,MAAA,EACAqL,CAAAA,EAAc8d,EAAwBM,GAAApe,EAAAlzC,KAAA,KAGtC,IAAAuxD,EAAAre,EAAAlM,UAAA,CAAAkM,EAAAz1C,MAAA,IACA2uC,EAAgB6kB,EAAUp9C,EAAAzF,KAAA,CAAA44B,UAAA,IAAAuqB,EAAAnqB,EAE1BgF,CAAAA,EAAAvE,MAAA,EACAqL,CAAAA,EAAAA,EAAAlzC,KAAA,OAAqCgxD,EAAwBO,EAAA,EAG7D,IAAAnjD,EAAAohD,EAAAE,IAAA,CAAAtoB,EAAAA,GAQA,OANAv4B,IAEAmtB,EAAAw1B,8BAAA,EACApjD,MAAAg+B,EAAA8kB,OAAA,CACAjgD,OAAAmR,EAAA8uC,OAAA,EAEAjgD,EAAAiiC,EAAA9kC,CACA,CAjDA2oC,GAAAkZ,IAAA,CAyDA,SAAA3mD,CAAA,CAAAqnD,CAAA,CAAA30B,CAAA,EACA,OAAAA,EAAAx/B,OAAA,CAAAu6C,MAAA,KACA,EI7CO,IAAAgL,GAAA,CACP9C,WrCZO,SAAAjgD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAhF,EAAAmtB,EAAArtB,KAAA,eACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACA27C,EAAAE,IAAA,OACAF,EAAAvvB,KAAA,IACA,IAAArjC,EAAAo/B,EAAAq2B,WAAA,CACAr2B,EAAAs2B,aAAA,CAAAtzD,EAAAwwD,EAAAxpD,OAAA,IACA4F,GAGA,OADAiD,IACAjS,CACA,EqCEAwiD,MAAS1J,EACT3nC,K/BVO,SAAA/O,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAuzB,EAAiBmrB,SDTVv2B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAAg2D,KAAA,MAEA,GAAAprB,MAAAA,GAAAA,MAAAA,EACA,YACA,+BACAA,EACA,kDAIA,OAAAA,CACA,ECH2BpL,GAC3B4M,EAAA5pC,EAAApC,KAAA,KACAgiD,EAAAxX,MAAAA,EAAA,sBAEA,GFTApL,CAAA,IAAAA,EAAAx/B,OAAA,CAAAi2D,MAAA,EACAzzD,EAAApC,KAAA,EAEA,CAAAoC,EAAA4c,IAAA,EAEA,WAAA5W,IAAA,CAAAhG,EAAApC,KAAA,GAEA,2CAAAoI,IAAA,CAAAhG,EAAApC,KAAA,EEE0B,CAC1B,IAAAiS,EAAAmtB,EAAArtB,KAAA,iBACA/R,EAAAo/B,EAAAq2B,WAAA,CAAAzpB,EAAyCioB,GAEzC,OADAhiD,IACAjS,CACA,CAEA,IAAA4yD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAwzB,EAAAD,EAAAsrB,MAAA,CAAApyB,KAAA/xB,GAAA,CAA0CokD,SHnBnC/1D,CAAA,CAAAg2D,CAAA,EACP,IAAAzzD,EAAAyQ,OAAAhT,GACA4Q,EAAArO,EAAA6M,OAAA,CAAA4mD,GACAt3B,EAAA9tB,EACA8xB,EAAA,EACA/wB,EAAA,EAEA,oBAAAqkD,EACA,sCAGA,KAAAplD,KAAAA,GACAA,IAAA8tB,EACA,EAAAgE,EAAA/wB,GACAA,CAAAA,EAAA+wB,CAAA,EAGAA,EAAA,EAGAhE,EAAA9tB,EAAAolD,EAAAn1D,MAAA,CACA+P,EAAArO,EAAA6M,OAAA,CAAA4mD,EAAAt3B,GAGA,OAAA/sB,CACA,EGNuDq6B,EAAAxB,GAAA,MACvDv4B,EAAAmtB,EAAArtB,KAAA,eACA/R,EAAA4yD,EAAAE,IAAA,CAAAroB,GAEA,GAAAroC,EAAA4c,IAAA,EACA,IAAA+zC,EAAA3zB,EAAArtB,KAAA,kBAAiDiwC,EAAO,GACxDhiD,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAA4c,IAAA,EACA3K,OAAArU,EACAwR,MAAA,IACAykD,OAAA,MACA,GAAArD,EAAAxpD,OAAA,MAGA2pD,GACA,CAEA,GAAA3wD,EAAA4c,IAAA,EAAA5c,EAAAmsC,IAAA,EACA,IAAAwkB,EAAA3zB,EAAArtB,KAAA,kBAAiDiwC,EAAO,GACxDhiD,GAAA4yD,EAAAE,IAAA,MACA9yD,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAmsC,IAAA,EACAl6B,OAAArU,EACAwR,MAAA,KACAykD,OAAA,MACA,GAAArD,EAAAxpD,OAAA,MAGA2pD,GACA,CAUA,OARA/yD,GAAA4yD,EAAAE,IAAA,OAEA9mB,GACAhsC,CAAAA,GAAA4yD,EAAAE,IAAA,CAAA9mB,EAAA,OAGAhsC,GAAA4yD,EAAAE,IAAA,CAAAroB,GACAx4B,IACAjS,CACA,E+B1CAuV,W7BbO,SAAAnT,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAk9C,EAAgBD,EAAU90B,GAC1B4iB,EAAAmS,MAAAA,EAAA,qBACAliD,EAAAmtB,EAAArtB,KAAA,eACAghD,EAAA3zB,EAAArtB,KAAA,UACA6gD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,MAsDA,OA9CA9yD,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5zB,EAAA6zB,aAAA,CAAA7wD,GAAA,CACAiS,OAAArU,EACAwR,MAAA,IACA,GAAAohD,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,QAEAC,IAIA,CAAA3wD,EAAAw8B,GAAA,EAEA,eAAAx2B,IAAA,CAAAhG,EAAAw8B,GAAA,GAEAm0B,EAAA3zB,EAAArtB,KAAA,uBACA/R,GAAA4yD,EAAAE,IAAA,MAIA9yD,GAHA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EAA4BvqB,OAAArU,EAAAwR,MAAA,OAAAohD,EAAAxpD,OAAA,MAE5BwpD,EAAAE,IAAA,QAGAC,EAAA3zB,EAAArtB,KAAA,mBACA/R,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAw8B,GAAA,EACAvqB,OAAArU,EACAwR,MAAApP,EAAAwlB,KAAA,UACA,GAAAgrC,EAAAxpD,OAAA,OAKA2pD,IAEA3wD,EAAAwlB,KAAA,GACAmrC,EAAA3zB,EAAArtB,KAAA,SAAkCiwC,EAAO,GACzChiD,GAAA4yD,EAAAE,IAAA,KAAAqB,GAQAn0D,GAPA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5wD,EAAAwlB,KAAA,EACAvT,OAAArU,EACAwR,MAAA2iD,EACA,GAAAvB,EAAAxpD,OAAA,MAGAwpD,EAAAE,IAAA,CAAAqB,GACApB,KAGA9gD,IAEAjS,CACA,E6B/CA44C,SAAUA,EACVE,UAAWA,EACX1L,QvBfO,SAAAhrC,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,MDDPi/C,ECEA,IAAAC,EAAAzyB,KAAA/xB,GAAA,CAAA+xB,KAAAjkB,GAAA,GAAArd,EAAAk4C,KAAA,QACAsY,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GAEA,GDLAi/C,EAAA,GAIE,GAAA1Q,EAAAC,EAAA,ECCyBrjD,EDDpB,SAAAA,CAAA,EACP,GACA,UAAAA,GAAA,WAAAgG,IAAA,CAAAhG,EAAApC,KAAA,GACAoC,UAAAA,EAAA0B,IAAA,CAGA,OADAoyD,EAAA,GACazZ,EAAA2Z,EAAI,GAKjB,EAAAh0D,EAAAk4C,KAAA,EAAAl4C,EAAAk4C,KAAA,KACM,GAAA0a,EAAAtY,CAAA,ECXqBt6C,IDY3Bg9B,CAAAA,EAAAx/B,OAAA,CAAAy2D,MAAA,EAAAH,CAAA,ECZ2B,CAC3B,IAAAjkD,EAAAmtB,EAAArtB,KAAA,kBACAghD,EAAA3zB,EAAArtB,KAAA,aACA/R,EAAAo/B,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACA,GAAAwwD,EAAAxpD,OAAA,GACAiL,OAAA,KACA7C,MAAA,IACA,GAIA,OAHAuhD,IACA9gD,IAGAjS,EACA,KACA,CAAAm2D,IAAAA,EAAA,SAAAL,MAAA,CAEA91D,EAAAa,MAAA,CAGA6iC,CAAAA,KAAA/xB,GAAA,CAAA3R,EAAAgC,WAAA,OAAAhC,EAAAgC,WAAA,WAGA,CAEA,IAAAyoC,EAAA,IAAAqrB,MAAA,CAAAK,GACAlkD,EAAAmtB,EAAArtB,KAAA,eACAghD,EAAA3zB,EAAArtB,KAAA,aAMA6gD,EAAAE,IAAA,CAAAroB,EAAA,KAEA,IAAAzqC,EAAAo/B,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACAiS,OAAA,KACA7C,MAAA,KACA,GAAAohD,EAAAxpD,OAAA,KAiBA,MAdA,SAAAhB,IAAA,CAAApI,IAEAA,CAAAA,EAAYo0D,EAAwBp0D,EAAAoqC,UAAA,KAAApqC,EAAAoD,KAAA,KAGpCpD,EAAAA,EAAAyqC,EAAA,IAAAzqC,EAAAyqC,EAEArL,EAAAx/B,OAAA,CAAA02D,QAAA,EACAt2D,CAAAA,GAAA,IAAAyqC,CAAA,EAGAsoB,IACA9gD,IAEAjS,CACA,EuB3CAwa,KAAMA,EACN4+B,MAAOyb,EACP1R,eAAgBA,EAChBE,WAAYA,EACZ15B,KAAMurC,GACN5R,cAAeA,GACfpwC,KXpBO,SAAA9Q,CAAA,CAAAi8B,CAAA,CAAAe,CAAA,CAAAnoB,CAAA,EACP,IAAAhF,EAAAmtB,EAAArtB,KAAA,SACAwkD,EAAAn3B,EAAAm3B,aAAA,CAEAnB,EAAAhzD,EAAAu6C,OAAA,CAA8B6Z,SFbvBp3B,CAAA,EACP,IAAAoL,EAAApL,EAAAx/B,OAAA,CAAA62D,aAAA,MAEA,GAAAjsB,MAAAA,GAAAA,MAAAA,EACA,YACA,gCACAA,EACA,sDAIA,OAAAA,CACA,EECgDpL,GAAU+1B,GAAW/1B,GAErEs3B,EAAAt0D,EAAAu6C,OAAA,CACAyY,MAAAA,EACA,IACA,IACMuB,SHjBCv3B,CAAA,EACP,IAAAg2B,EAAiBD,GAAW/1B,GAC5Bs3B,EAAAt3B,EAAAx/B,OAAA,CAAA82D,WAAA,CAEA,IAAAA,EACA,MAAAtB,MAAAA,EAAA,QAGA,GAAAsB,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EACA,YACA,gCACAA,EACA,0DAIA,GAAAA,IAAAtB,EACA,YACA,uBACAA,EACA,0BACAsB,EACA,sBAIA,OAAAA,CACA,EGVsBt3B,GACtBw3B,EACAv4B,EAAAA,KAAAe,EAAAy3B,cAAA,EAAAzB,IAAAh2B,EAAAy3B,cAAA,CAEA,IAAAz0D,EAAAu6C,OAAA,EACA,IAAAma,EAAA10D,EAAAmI,QAAA,CAAAnI,EAAAmI,QAAA,IAAAkC,KAAAA,EAqCA,GAzBA,MAAA2oD,GAAAA,MAAAA,IAEA0B,GACA,EAAAvsD,QAAA,EAAAusD,EAAAvsD,QAAA,KAEA60B,SAAAA,EAAAZ,KAAA,CAAAY,EAAAZ,KAAA,CAAA39B,MAAA,KACAu+B,aAAAA,EAAAZ,KAAA,CAAAY,EAAAZ,KAAA,CAAA39B,MAAA,KACAu+B,SAAAA,EAAAZ,KAAA,CAAAY,EAAAZ,KAAA,CAAA39B,MAAA,KACAu+B,aAAAA,EAAAZ,KAAA,CAAAY,EAAAZ,KAAA,CAAA39B,MAAA,KAEAu+B,IAAAA,EAAA23B,UAAA,CAAA33B,EAAA23B,UAAA,CAAAl2D,MAAA,KACAu+B,IAAAA,EAAA23B,UAAA,CAAA33B,EAAA23B,UAAA,CAAAl2D,MAAA,KACAu+B,IAAAA,EAAA23B,UAAA,CAAA33B,EAAA23B,UAAA,CAAAl2D,MAAA,KAEA+1D,CAAAA,EAAA,IAWQvB,GAASj2B,KAAAg2B,GAAA0B,EAAA,CACjB,IAAAlmD,EAAA,GAEA,OAAAA,EAAAxO,EAAAmI,QAAA,CAAA1J,MAAA,GACA,IAAAijC,EAAA1hC,EAAAmI,QAAA,CAAAqG,EAAA,CAEA,GACAkzB,GACAA,aAAAA,EAAAhgC,IAAA,EACAggC,EAAAv5B,QAAA,EACAu5B,EAAAv5B,QAAA,KACAu5B,kBAAAA,EAAAv5B,QAAA,IAAAzG,IAAA,CACA,CACA8yD,EAAA,GACA,KACA,CACA,CACA,CACA,CAEAA,GACAxB,CAAAA,EAAAsB,CAAA,EAGAt3B,EAAAm3B,aAAA,CAAAnB,EACA,IAAAp1D,EAAAo/B,EAAAs2B,aAAA,CAAAtzD,EAAA6U,GAIA,OAHAmoB,EAAAy3B,cAAA,CAAAzB,EACAh2B,EAAAm3B,aAAA,CAAAA,EACAtkD,IACAjS,CACA,EW7DAq5C,STvBO,SAAAj3C,CAAA,CAAAi8B,CAAA,CAAAe,CAAA,CAAAnoB,CAAA,EACP,IAAA+/C,EAAyBC,SDRlB73B,CAAA,EACP,IAAA19B,EAAA09B,EAAAx/B,OAAA,CAAAo3D,cAAA,QAEA,GAAAt1D,QAAAA,GAAAA,QAAAA,GAAAA,UAAAA,EACA,YACA,gCACAA,EACA,qEAIA,OAAAA,CACA,ECJ4C09B,GAC5Cg2B,EAAAh2B,EAAAm3B,aAAA,EAAsCpB,GAAW/1B,GAGjDf,GAAAA,SAAAA,EAAAv6B,IAAA,EAAAu6B,EAAAse,OAAA,EACAyY,CAAAA,EACA,kBAAA/2B,EAAAn8B,KAAA,EAAAm8B,EAAAn8B,KAAA,IACAm8B,EAAAn8B,KAAA,CACA,GACAk9B,CAAAA,CAAA,IAAAA,EAAAx/B,OAAA,CAAAs3D,mBAAA,CACA,EACA74B,EAAA9zB,QAAA,CAAA6E,OAAA,CAAAhN,EAAA,EACAgzD,CAAA,EAGA,IAAAvrD,EAAAurD,EAAAv0D,MAAA,GAGAm2D,CAAAA,QAAAA,GACAA,UAAAA,GACA,IAAA34B,SAAAA,EAAAv6B,IAAA,EAAAu6B,EAAAib,MAAA,EAAAl3C,EAAAk3C,MAAA,IAEAzvC,CAAAA,EAAA65B,EAAAA,KAAA8b,IAAA,CAAA31C,EAAA,IAGA,IAAA+oD,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACA27C,EAAAE,IAAA,CAAAsC,EAAA,IAAAU,MAAA,CAAAjsD,EAAAurD,EAAAv0D,MAAA,GACA+xD,EAAAvvB,KAAA,CAAAx5B,GACA,IAAAoI,EAAAmtB,EAAArtB,KAAA,aACA/R,EAAAo/B,EAAAq2B,WAAA,CACAr2B,EAAAs2B,aAAA,CAAAtzD,EAAAwwD,EAAAxpD,OAAA,IAQA,SAAAjH,CAAA,CAAAyO,CAAA,CAAAuiD,CAAA,SACA,EACA,CAAAA,EAAA,OAAA2C,MAAA,CAAAjsD,EAAA,EAAA1H,EAGA,CAAAgxD,EAAAiC,EAAAA,EAAA,IAAAU,MAAA,CAAAjsD,EAAAurD,EAAAv0D,MAAA,GAAAsB,CACA,GATA,OAFA8P,IAEAjS,CAUA,EStBAqtC,UR3BO,SAAAjrC,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACP,IAAAhF,EAAAmtB,EAAArtB,KAAA,cACAghD,EAAA3zB,EAAArtB,KAAA,aACA/R,EAAAo/B,EAAAs0B,iBAAA,CAAAtxD,EAAA6U,GAGA,OAFA87C,IACA9gD,IACAjS,CACA,EQqBAsiC,KN1BO,SAAAlgC,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EAOP,MAAAkgD,CADAC,EAJA7sD,QAAA,CAAA8sD,IAAA,UAAA3yD,CAAA,EACA,OAAW6wD,GAAQ7wD,EACnB,GAEA06B,EAAAs0B,iBAAA,CAAAt0B,EAAAs2B,aAAA,EACAv2D,IAAA,CAAAigC,EAAAh9B,EAAA6U,EACA,EMmBAkjC,OAAQA,GACRtvB,KH9BO,SAAazoB,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACpB,OAAAmoB,EAAA4zB,IAAA,CAAA5wD,EAAApC,KAAA,CAAAiX,EACA,EG6BAszB,cD7BO,SAAA79B,CAAA,CAAAqnD,CAAA,CAAA30B,CAAA,EACP,IAAAp/B,EAAA,CACIq1D,GAASj2B,GAAAA,CAAAA,EAAAx/B,OAAA,CAAA03D,UAAA,UACbxB,MAAA,CAAWyB,SDTJn4B,CAAA,EACP,IAAAo4B,EAAAp4B,EAAAx/B,OAAA,CAAA63D,cAAA,IAEA,GAAAD,EAAA,EACA,YACA,2CACAA,EACA,wDAIA,OAAAA,CACA,ECH8Bp4B,IAE9B,OAAAA,EAAAx/B,OAAA,CAAA03D,UAAA,CAAAt3D,EAAAoD,KAAA,OAAApD,CACA,CCwBA,ECoBA,SAAA03D,GAAAzyB,CAAA,EACA,IAAA/c,EAAA+c,EAAA0yB,MAAA,CACE,GAAA91B,EAAAj5B,EAAA,EAAMsf,EAAA,8BACR,KAAAnW,KAAA,CACA,CACAjO,KAAA,QACAokB,MAAAA,EAAAlZ,GAAA,UAAAtK,CAAA,EACA,MAAAA,SAAAA,EAAA,KAAAA,CACA,GACA6F,SAAA,IAEA06B,GAEA,KAAAxoB,IAAA,CAAAm7C,OAAA,GACA,CAMA,SAAAC,GAAA5yB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,GACA,KAAAxoB,IAAA,CAAAm7C,OAAA,CAAAnrD,KAAAA,CACA,CAMA,SAAAqrD,GAAA7yB,CAAA,EACA,KAAAlzB,KAAA,EAAcjO,KAAA,WAAAyG,SAAA,IAA+B06B,EAC7C,CAMA,SAAAhzB,GAAAgzB,CAAA,EACA,KAAAhzB,IAAA,CAAAgzB,EACA,CAMA,SAAA8yB,GAAA9yB,CAAA,EACA,KAAAlzB,KAAA,EAAcjO,KAAA,YAAAyG,SAAA,IAAgC06B,EAC9C,CAQA,SAAA+yB,GAAA/yB,CAAA,EACA,IAAAjlC,EAAA,KAAA86C,MAAA,EAEA,MAAAr+B,IAAA,CAAAm7C,OAAA,EACA53D,CAAAA,EAAAA,EAAAyB,OAAA,cAAAA,GAAA,EAGA,IAAAW,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACE,GAAAghC,EAAAj5B,EAAA,EAAMxG,eAAAA,EAAA0B,IAAA,EACR1B,EAAApC,KAAA,CAAAA,EACA,KAAAiS,IAAA,CAAAgzB,EACA,CAOA,SAAAxjC,GAAAy7B,CAAA,CAAA4Z,CAAA,EAEA,MAAAA,MAAAA,EAAAA,EAAA5Z,CACA,CC5FA,SAAA+6B,GAAAhzB,CAAA,EAEA,IAAA7iC,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACE,GAAAghC,EAAAj5B,EAAA,EAAMxG,aAAAA,EAAA0B,IAAA,EACR1B,EAAA2Z,OAAA,CAAAkpB,8BAAAA,EAAAnhC,IAAA,CAOA,SAAAo0D,GAAAjzB,CAAA,EACA,IAAA5G,EAAA,KAAAG,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IAEA,GACAw9B,GACAA,aAAAA,EAAAv6B,IAAA,EACA,kBAAAu6B,EAAAtiB,OAAA,CACA,CACA,IAAA3Z,EAAA,KAAAo8B,KAAA,MAAAA,KAAA,CAAA39B,MAAA,IACI,GAAAghC,EAAAj5B,EAAA,EAAMxG,cAAAA,EAAA0B,IAAA,EACV,IAAAmH,EAAA7I,EAAAmI,QAAA,IAEA,GAAAU,GAAAA,SAAAA,EAAAnH,IAAA,MAIAq0D,EAHA,IAAA5b,EAAAle,EAAA9zB,QAAA,CACAqG,EAAA,GAIA,OAAAA,EAAA2rC,EAAA17C,MAAA,GACA,IAAAu3D,EAAA7b,CAAA,CAAA3rC,EAAA,CACA,GAAAwnD,cAAAA,EAAAt0D,IAAA,EACAq0D,EAAAC,EACA,KACA,CACA,CAEAD,IAAA/1D,IAEA6I,EAAAjL,KAAA,CAAAiL,EAAAjL,KAAA,CAAAoD,KAAA,IAEA6H,IAAAA,EAAAjL,KAAA,CAAAa,MAAA,CACAuB,EAAAmI,QAAA,CAAA84B,KAAA,GAEAjhC,EAAAH,QAAA,EACAgJ,EAAAhJ,QAAA,EACA,iBAAAgJ,EAAAhJ,QAAA,CAAAC,KAAA,CAAAg1B,MAAA,GAEAjsB,EAAAhJ,QAAA,CAAAC,KAAA,CAAAN,MAAA,GACAqJ,EAAAhJ,QAAA,CAAAC,KAAA,CAAAg1B,MAAA,GACA90B,EAAAH,QAAA,CAAAC,KAAA,CAAA1D,OAAAgX,MAAA,IAAgDvK,EAAAhJ,QAAA,CAAAC,KAAA,GAGhD,CACA,CAEA,KAAA+P,IAAA,CAAAgzB,EACA,CAMA,SAAAozB,GAAAj2D,CAAA,CAAAi8B,CAAA,CAAAe,CAAA,CAAAnoB,CAAA,EACA,IAAAhM,EAAA7I,EAAAmI,QAAA,IACA+tD,EACA,kBAAAl2D,EAAA2Z,OAAA,EAAA9Q,GAAAA,cAAAA,EAAAnH,IAAA,CACAy0D,EAAA,IAAAn2D,CAAAA,EAAA2Z,OAAA,eACA62C,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GAEAqhD,GACA1F,EAAAE,IAAA,CAAAyF,GAGA,IAAAv4D,EAAcmlD,GAAe9L,QAAA,CAAAj3C,EAAAi8B,EAAAe,EAAA,CAC7B,GAAAnoB,CAAA,CACA,GAAA27C,EAAAxpD,OAAA,KAOA,OAJAkvD,GACAt4D,CAAAA,EAAAA,EAAAyB,OAAA,mCASA,SAAAy7B,CAAA,EACA,OAAAA,EAAAq7B,CACA,EAXyD,EAGzDv4D,CASA,gBEvIA,IAAAw4D,GAAA,CACAxnD,SA2YA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAArH,EAAA,EACA,OAYA,SAAA4uD,EAAAtnD,CAAA,QACA,CAAAA,KAAAA,GAAAA,MAAAA,CAAA,GAAAtH,EAAA,GACAA,IACAoH,EAAAe,OAAA,CAAAb,GACAsnD,GAEAtnD,KAAAA,GAAAtH,IAAAA,GACAoH,EAAAe,OAAA,CAAAb,GACAunD,GAEAxnD,EAAAC,EACA,EAYA,SAAAunD,EAAAvnD,CAAA,EAEA,OAAAA,OAAAA,EAAAD,EAAAC,GAAAvI,EAAAuI,EACA,CACA,EAnbAJ,QAAA,EACA,EACA0gD,GAAA,CACAzgD,SA6bA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EAEA,IAAAynD,EAEAC,EAEArwB,EACA,OAAAswB,EAYA,SAAAA,EAAA1nD,CAAA,SAIA,KAAAA,GAAAA,KAAAA,EACAF,EAAA2F,KAAA,CAAAk7C,GAAAgH,EAAAC,GAAA5nD,GASAA,OAAAA,GAAyB,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAAU,GAAAo1B,EAAA7yB,EAAA,EAAiBvC,IAAAA,KAAAA,GAAyB,GAAAo1B,EAAA5yB,EAAA,EAAkBxC,GACxH2nD,EAAA3nD,IAEAo3B,EAAA,GACAt3B,EAAAe,OAAA,CAAAb,GACA0nD,EACA,CAYA,SAAAE,EAAA5nD,CAAA,EAYA,OAVAA,KAAAA,EACAwnD,EAAA,IAKAC,EAAAD,EACAA,EAAAlsD,KAAAA,GAEAwE,EAAAe,OAAA,CAAAb,GACA0nD,CACA,CAWA,SAAAC,EAAA3nD,CAAA,SAGA,GAAAwnD,GAAA,CAAApwB,EACAr3B,EAAAC,GAEAvI,EAAAuI,EACA,CACA,EA/gBAJ,QAAA,EACA,EACA4mB,GAAA,CACA3mB,SAyhBA,SAAAC,CAAA,CAAArI,CAAA,EACA,IAAAmlC,EAAA,EACAirB,EAAA,EACA,OAAAC,EAYA,SAAAA,EAAA9nD,CAAA,SACA,KAAAA,GACA48B,IACA98B,EAAAe,OAAA,CAAAb,GACA8nD,GAMA9nD,KAAAA,GAAA6nD,EAAAjrB,EACAmrB,EAAA/nD,GAMAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,EACAF,EAAA2F,KAAA,CAAAk7C,GAAAlpD,EAAAswD,GAAA/nD,GAEAA,OAAAA,GAAyB,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAAU,GAAAo1B,EAAA7yB,EAAA,EAAiBvC,GAC7EvI,EAAAuI,IAEAF,EAAAe,OAAA,CAAAb,GACA8nD,EACA,CAYA,SAAAC,EAAA/nD,CAAA,EAMA,OAJA,KAAAA,GACA6nD,IAEA/nD,EAAAe,OAAA,CAAAb,GACA8nD,CACA,CACA,EAplBAloD,QAAA,EACA,EACA+gD,GAAA,CACA9gD,SAkmBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAAA4gD,EAYA,SAAAA,EAAA3gD,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2gD,GAMA3gD,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAgoD,GAMAhoD,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAioD,GAIAjoD,KAAAA,GAEAA,OAAAA,GAAqB,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAAU,GAAAo1B,EAAA7yB,EAAA,EAAiBvC,GACzEvI,EAAAuI,GAEAD,EAAAC,EACA,CAeA,SAAAioD,EAAAjoD,CAAA,SAGA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAAU,GAAAo1B,EAAA7yB,EAAA,EAAiBvC,GAC3GvI,EAAAuI,GAEA2gD,EAAA3gD,EACA,CAYA,SAAAgoD,EAAAhoD,CAAA,EAEA,MAAW,GAAAo1B,EAAAsM,EAAA,EAAU1hC,GAAAkoD,SAarBA,EAAAloD,CAAA,SAEA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2gD,GAEQ,GAAAvrB,EAAAsM,EAAA,EAAU1hC,IAClBF,EAAAe,OAAA,CAAAb,GACAkoD,GAIAnoD,EAAAC,EACA,EA1BqBA,GAAAD,EAAAC,EACrB,CA0BA,EA3sBAJ,QAAA,EACA,EACAuoD,GAAA,CACAtoD,SAytBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,OAYA,SAAAC,CAAA,EAGA,OADAF,EAAAe,OAAA,CAAAb,GACAK,CACA,EAYA,SAAAA,EAAAL,CAAA,EAEA,MAAW,GAAAo1B,EAAA0I,EAAA,EAAiB99B,GAAAD,EAAAC,GAAAvI,EAAAuI,EAC5B,CACA,EAzvBAJ,QAAA,EACA,EACAwoD,GAAA,CACA15D,KAAA,cACAmR,SAwMA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,SACA,KAAAA,GAAAA,MAAAA,GAAA,CAAAqoD,GAAAr6D,IAAA,CAAAynC,EAAAA,EAAA5B,QAAA,GAAAy0B,GAAA7yB,EAAAlyB,MAAA,EACAxD,EAAAC,IAEAF,EAAAc,KAAA,oBACAd,EAAAc,KAAA,uBAGAd,EAAA2F,KAAA,CAAA4hD,GAAAvnD,EAAAk1B,OAAA,CAAAsrB,GAAAxgD,EAAAk1B,OAAA,CAAAxO,GAAA+hC,GAAAxoD,GAAAA,GAAAC,GACA,EAYA,SAAAuoD,EAAAvoD,CAAA,EAGA,OAFAF,EAAAgB,IAAA,uBACAhB,EAAAgB,IAAA,oBACArJ,EAAAuI,EACA,CACA,EA/OA6zB,SAAAw0B,EACA,EACAG,GAAA,CACA95D,KAAA,mBACAmR,SAwPA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA4L,EAAA,GACAjK,EAAA,GACA,OAYA,SAAAp3B,CAAA,QACA,CAAAA,KAAAA,GAAAA,MAAAA,CAAA,GAAAyoD,GAAAz6D,IAAA,CAAAynC,EAAAA,EAAA5B,QAAA,IAAAy0B,GAAA7yB,EAAAlyB,MAAA,GACAzD,EAAAc,KAAA,oBACAd,EAAAc,KAAA,wBACAygC,GAAAx/B,OAAA2jC,aAAA,CAAAxlC,GACAF,EAAAe,OAAA,CAAAb,GACA0oD,GAEA3oD,EAAAC,EACA,EAYA,SAAA0oD,EAAA1oD,CAAA,EAEA,GAAQ,GAAAo1B,EAAAsM,EAAA,EAAU1hC,IAAAqhC,EAAA3xC,MAAA,GAIlB,OAFA2xC,GAAAx/B,OAAA2jC,aAAA,CAAAxlC,GACAF,EAAAe,OAAA,CAAAb,GACA0oD,EAEA,GAAA1oD,KAAAA,EAAA,CACA,IAAAw3C,EAAAnW,EAAAnqC,WAAA,GACA,GAAAsgD,SAAAA,GAAAA,UAAAA,EAEA,OADA13C,EAAAe,OAAA,CAAAb,GACA2oD,CAEA,CACA,OAAA5oD,EAAAC,EACA,CAYA,SAAA2oD,EAAA3oD,CAAA,SACA,KAAAA,EAEA,CADAF,EAAAe,OAAA,CAAAb,GACAo3B,GACAwxB,GAEAxxB,EAAA,GACAuxB,GAEA5oD,EAAAC,EACA,CAYA,SAAA4oD,EAAA5oD,CAAA,EAGA,OAAAA,OAAAA,GAA4B,GAAAo1B,EAAAwF,EAAA,EAAY56B,IAAU,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAAU,GAAAo1B,EAAA7yB,EAAA,EAAiBvC,IAAU,GAAAo1B,EAAA5yB,EAAA,EAAkBxC,GAAAD,EAAAC,GAAAF,EAAAk1B,OAAA,CAAAsrB,GAAAxgD,EAAAk1B,OAAA,CAAAxO,GAAAqiC,GAAA9oD,GAAAC,EAClI,CAYA,SAAA6oD,EAAA7oD,CAAA,EAGA,OAFAF,EAAAgB,IAAA,wBACAhB,EAAAgB,IAAA,oBACArJ,EAAAuI,EACA,CACA,EAnWA6zB,SAAA40B,EACA,EACAK,GAAA,CACAp6D,KAAA,gBACAmR,SAwDA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAGAgpD,EAEAz9C,EAJA,IAAAmqB,EAAA,KAKA,OAYA,SAAAz1B,CAAA,QACA,CAAAgpD,GAAAhpD,IAAA,CAAAipD,GAAAj7D,IAAA,CAAAynC,EAAAA,EAAA5B,QAAA,GAAAy0B,GAAA7yB,EAAAlyB,MAAA,EACAxD,EAAAC,IAEAF,EAAAc,KAAA,oBACAd,EAAAc,KAAA,yBACAmgD,SAaAA,EAAA/gD,CAAA,SACA,GAAAA,IACAF,EAAAe,OAAA,CAAAb,GACA+gD,GAEA/gD,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAkpD,GAEAnpD,EAAAC,EACA,EAvBAA,GACA,EAsCA,SAAAkpD,EAAAlpD,CAAA,SAEA,KAAAA,EACAF,EAAA2F,KAAA,CAAA0iD,GAAAgB,EAAAC,GAAAppD,GAIAA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAo1B,EAAA0I,EAAA,EAAiB99B,IACvDsL,EAAA,GACAxL,EAAAe,OAAA,CAAAb,GACAkpD,GASAC,EAAAnpD,EACA,CAYA,SAAAopD,EAAAppD,CAAA,EAGA,OAFAF,EAAAe,OAAA,CAAAb,GACA+oD,EAAA,GACAG,CACA,CAYA,SAAAC,EAAAnpD,CAAA,SAGA,GAAA+oD,GAAuB,GAAA3zB,EAAAsM,EAAA,EAAUjM,EAAA5B,QAAA,GACjC/zB,EAAAgB,IAAA,yBACAhB,EAAAgB,IAAA,oBACArJ,EAAAuI,IAEAD,EAAAC,EACA,CACA,EAhLA6zB,SAAAo1B,EACA,EAGMI,GAAI,GAiBNC,GAAI,GAGR,KAAOA,GAAI,KACTD,EAAI,CAACC,GAAI,CAAAR,GAELQ,MAAAA,GAAaA,GAAI,GAAmB,KAAJA,IAAaA,CAAAA,GAAI,IAutBvD,SAAAjB,GAAAroD,CAAA,EACA,OAAAA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAqH,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,EAC9I,CAQA,SAAAyoD,GAAAzoD,CAAA,EACA,OAAU,GAAAo1B,EAAAsM,EAAA,EAAU1hC,EACpB,CAMA,SAAAipD,GAAAjpD,CAAA,EAKA,OAAAA,CAAAA,KAAAA,GAAAgpD,GAAAhpD,EAAA,CACA,CAMA,SAAAgpD,GAAAhpD,CAAA,EACA,OAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAqE,GAAAo1B,EAAA0I,EAAA,EAAiB99B,EACtF,CAMA,SAAAsoD,GAAA/kD,CAAA,EACA,IAAA9D,EAAA8D,EAAA7T,MAAA,CACA8P,EAAA,GACA,KAAAC,KAAA,CACA,IAAAq0B,EAAAvwB,CAAA,CAAA9D,EAAA,IACA,IAAAq0B,cAAAA,EAAAnhC,IAAA,EAAAmhC,eAAAA,EAAAnhC,IAAA,IAAAmhC,EAAAyK,SAAA,EACA/+B,EAAA,GACA,KACA,CAIA,GAAAs0B,EAAAy1B,6BAAA,EACA/pD,EAAA,GACA,KACA,CACA,CAMA,OALA+D,EAAA7T,MAAA,KAAA8P,GAGA+D,CAAAA,CAAA,CAAAA,EAAA7T,MAAA,OAAA65D,6BAAA,KAEA/pD,CACA,CAlxBA6pD,EAAI,KAAAP,GACJO,EAAI,KAAAP,GACJO,EAAI,KAAAP,GACJO,EAAI,KAAAP,GACJO,EAAI,MAAAP,GAAAN,GAAA,CACJa,EAAI,OAAAP,GAAAN,GAAA,CACJa,EAAI,MAAAP,GAAAV,GAAA,CACJiB,EAAI,OAAAP,GAAAV,GAAA,2BClEJ,IAAAoB,GAAA,CACA3pD,SAgdA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,MAAS,GAAAP,GAAA90B,CAAA,EAAYN,EAKrB,SAAAE,CAAA,EACA,IAAA83B,EAAArC,EAAAlyB,MAAA,CAAAkyB,EAAAlyB,MAAA,CAAA7T,MAAA,IACA,OAAAooC,GAAAA,gCAAAA,CAAA,IAAAnlC,IAAA,EAAAmlC,IAAAA,CAAA,IAAAC,cAAA,CAAAD,CAAA,QAAApoC,MAAA,CAAA+H,EAAAuI,GAAAD,EAAAC,EACA,EARqB,gCASrB,EA1dAJ,QAAA,EACA,EAgDA,SAAA6pD,GAAA3pD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAKA8+B,EAJA,IAAApJ,EAAA,KACAh2B,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,CACAmV,EAAA4wB,EAAAvB,MAAA,CAAAw1B,YAAA,EAAAj0B,CAAAA,EAAAvB,MAAA,CAAAw1B,YAAA,KAKA,KAAAjqD,KAAA,CACA,IAAAq0B,EAAA2B,EAAAlyB,MAAA,CAAA9D,EAAA,IACA,GAAAq0B,eAAAA,EAAAnhC,IAAA,EACAksC,EAAA/K,EACA,KACA,CAGA,GAAAA,oBAAAA,EAAAnhC,IAAA,EAAAmhC,cAAAA,EAAAnhC,IAAA,EAAAmhC,UAAAA,EAAAnhC,IAAA,EAAAmhC,UAAAA,EAAAnhC,IAAA,EAAAmhC,SAAAA,EAAAnhC,IAAA,CACA,KAEA,CACA,OAKA,SAAAqN,CAAA,EACA,IAAA6+B,GAAA,CAAAA,EAAAN,SAAA,CACA,OAAAx+B,EAAAC,GAEA,IAAA1G,EAAe,GAAAylC,EAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,EAClChnC,MAAA8tC,EAAA1tC,GAAA,CACAA,IAAAskC,EAAAqB,GAAA,EACA,WACA,KAAAx9B,EAAA+wC,WAAA,KAAAxlC,EAAAlG,QAAA,CAAArF,EAAArH,KAAA,MAGA6N,EAAAc,KAAA,+BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,+BACArJ,EAAAuI,IALAD,EAAAC,EAMA,CACA,CAIA,SAAA2pD,GAAApmD,CAAA,CAAAzI,CAAA,EACA,IAAA2E,EAAA8D,EAAA7T,MAAA,CAKA,KAAA+P,KACA,GAAA8D,eAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA4Q,UAAAA,CAAA,CAAA9D,EAAA,KACA8D,CAAA,CAAA9D,EAAA,IACA,KACA,CAGA8D,CAAA,CAAA9D,EAAA,MAAA9M,IAAA,QACA4Q,CAAA,CAAA9D,EAAA,MAAA9M,IAAA,8BAIA,IAAA3E,EAAA,CACA2E,KAAA,kBACA5B,MAAA1D,OAAAgX,MAAA,IAA2Bd,CAAA,CAAA9D,EAAA,MAAA1O,KAAA,EAC3BI,IAAA9D,OAAAgX,MAAA,IAAyBd,CAAA,CAAAA,EAAA7T,MAAA,OAAAyB,GAAA,CACzB,EAGAkoC,EAAA,CACA1mC,KAAA,wBACA5B,MAAA1D,OAAAgX,MAAA,IAA2Bd,CAAA,CAAA9D,EAAA,MAAAtO,GAAA,EAC3BA,IAAA9D,OAAAgX,MAAA,IAAyBd,CAAA,CAAA9D,EAAA,MAAAtO,GAAA,CACzB,CAEAkoC,CAAAA,EAAAloC,GAAA,CAAAV,MAAA,GACA4oC,EAAAloC,GAAA,CAAA40B,MAAA,GACAsT,EAAAloC,GAAA,CAAA+nC,YAAA,GAEA,IAAAlQ,EAAA,CACAr2B,KAAA,wBACA5B,MAAA1D,OAAAgX,MAAA,IAA2Bg1B,EAAAloC,GAAA,EAC3BA,IAAA9D,OAAAgX,MAAA,IAAyBd,CAAA,CAAAA,EAAA7T,MAAA,OAAAqB,KAAA,CACzB,EAEAioC,EAAA,CACArmC,KAAA,cACA8gC,YAAA,SACA1iC,MAAA1D,OAAAgX,MAAA,IAA2B2kB,EAAAj4B,KAAA,EAC3BI,IAAA9D,OAAAgX,MAAA,IAAyB2kB,EAAA73B,GAAA,CACzB,EAGAy4D,EAAA,CAEArmD,CAAA,CAAA9D,EAAA,GAAA8D,CAAA,CAAA9D,EAAA,YAAAzR,EAAA8M,EAAA,CAEAyI,CAAA,CAAA9D,EAAA,GAAA8D,CAAA,CAAA9D,EAAA,GAEA,SAAA45B,EAAAv+B,EAAA,SAAAu+B,EAAAv+B,EAAA,CAEA,SAAAkuB,EAAAluB,EAAA,UAAAk+B,EAAAl+B,EAAA,SAAAk+B,EAAAl+B,EAAA,SAAAkuB,EAAAluB,EAAA,CAEAyI,CAAA,CAAAA,EAAA7T,MAAA,IAAA6T,CAAA,CAAAA,EAAA7T,MAAA,YAAA1B,EAAA8M,EAAA,EAEA,OADAyI,EAAAvE,MAAA,CAAAS,EAAA8D,EAAA7T,MAAA,CAAA+P,EAAA,KAAAmqD,GACArmD,CACA,CAMA,SAAAsmD,GAAA/pD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAKAuL,EAJA,IAAAmqB,EAAA,KACA5wB,EAAA4wB,EAAAvB,MAAA,CAAAw1B,YAAA,EAAAj0B,CAAAA,EAAAvB,MAAA,CAAAw1B,YAAA,KACAhxD,EAAA,EASA,OAYA,SAAAsH,CAAA,EAKA,OAJAF,EAAAc,KAAA,oBACAd,EAAAc,KAAA,+BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,+BACAgpD,CACA,EAYA,SAAAA,EAAA9pD,CAAA,SACA,KAAAA,EAAAD,EAAAC,IACAF,EAAAc,KAAA,0BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,0BACAhB,EAAAc,KAAA,0BACAd,EAAAc,KAAA,gBAAA6yB,WAAA,UACAs2B,EACA,CAYA,SAAAA,EAAA/pD,CAAA,EACA,GAEAtH,EAAA,KAEAsH,KAAAA,GAAA,CAAAsL,GAGAtL,OAAAA,GAAAA,KAAAA,GAAoC,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,GAC7D,OAAAD,EAAAC,GAEA,GAAAA,KAAAA,EAAA,CACAF,EAAAgB,IAAA,gBACA,IAAAgzB,EAAAh0B,EAAAgB,IAAA,iCACA,EAAAnC,QAAA,CAA4B,GAAAogC,EAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,CAAAjE,MAG/Ch0B,EAAAc,KAAA,+BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,+BACAhB,EAAAgB,IAAA,oBACArJ,GANAsI,EAAAC,EAOA,CAMA,MALS,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAClCsL,CAAAA,EAAA,IAEA5S,IACAoH,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAAgqD,EAAAD,CACA,CAYA,SAAAC,EAAAhqD,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,IACAqxD,GAEAA,EAAA/pD,EACA,CACA,CAMA,SAAAiqD,GAAAnqD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAIA6gC,EAGAt1B,EANA,IAAAmqB,EAAA,KACA5wB,EAAA4wB,EAAAvB,MAAA,CAAAw1B,YAAA,EAAAj0B,CAAAA,EAAAvB,MAAA,CAAAw1B,YAAA,KAGAhxD,EAAA,EAGA,OAYA,SAAAsH,CAAA,EAMA,OALAF,EAAAc,KAAA,0BAAAi0B,UAAA,IACA/0B,EAAAc,KAAA,+BACAd,EAAAc,KAAA,qCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qCACAopD,CACA,EAYA,SAAAA,EAAAlqD,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,gCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,gCACAhB,EAAAc,KAAA,qCACAd,EAAAc,KAAA,gBAAA6yB,WAAA,UACA0H,GAEAp7B,EAAAC,EACA,CAeA,SAAAm7B,EAAAn7B,CAAA,EACA,GAEAtH,EAAA,KAEAsH,KAAAA,GAAA,CAAAsL,GAGAtL,OAAAA,GAAAA,KAAAA,GAAoC,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,GAC7D,OAAAD,EAAAC,GAEA,GAAAA,KAAAA,EAAA,CACAF,EAAAgB,IAAA,gBACA,IAAAgzB,EAAAh0B,EAAAgB,IAAA,qCAMA,OALA8/B,EAAmB,GAAA7B,EAAAxrC,CAAA,EAAmBkiC,EAAAsC,cAAA,CAAAjE,IACtCh0B,EAAAc,KAAA,qCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qCACAhB,EAAAgB,IAAA,+BACA+/B,CACA,CAMA,MALS,GAAAzL,EAAA9yB,EAAA,EAAyBtC,IAClCsL,CAAAA,EAAA,IAEA5S,IACAoH,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAAo7B,EAAAD,CACA,CAeA,SAAAC,EAAAp7B,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAtH,IACAyiC,GAEAA,EAAAn7B,EACA,CAYA,SAAA6gC,EAAA7gC,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACA+D,EAAAlG,QAAA,CAAAiiC,IACA/7B,EAAAhT,IAAA,CAAA+uC,GAMa,GAAA1L,GAAA90B,CAAA,EAAYN,EAAAqqD,EAAA,oCAEzBpqD,EAAAC,EACA,CAYA,SAAAmqD,EAAAnqD,CAAA,EAEA,OAAAvI,EAAAuI,EACA,CACA,CAMA,SAAAoqD,GAAAtqD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EAUA,OAAAD,EAAA2F,KAAA,CAAuBuyB,GAAAC,CAAS,CAAAxgC,EAAAqI,EAAAk1B,OAAA,CAAAw0B,GAAA/xD,EAAAsI,GAChC,CAGA,SAAAsqD,GAAAvqD,CAAA,EACAA,EAAAgB,IAAA,yBACA,yBE1bO,OAAAwpD,GAIPh8D,aAAA,CAMA,KAAAuP,GAAA,IAWAsF,IAAA1D,CAAA,CAAAuC,CAAA,CAAAmB,CAAA,GACAonD,SAoFAC,CAAA,CAAAC,CAAA,CAAAzoD,CAAA,CAAAmB,CAAA,EACA,IAAA1D,EAAA,EAGA,GAAAuC,IAAAA,GAAAmB,IAAAA,EAAAzT,MAAA,EAGA,KAAA+P,EAAA+qD,EAAA3sD,GAAA,CAAAnO,MAAA,GACA,GAAA86D,EAAA3sD,GAAA,CAAA4B,EAAA,MAAAgrD,EAAA,CACAD,EAAA3sD,GAAA,CAAA4B,EAAA,KAAAuC,EAOAwoD,EAAA3sD,GAAA,CAAA4B,EAAA,IAAA5N,IAAA,IAAAsR,GAGA,MACA,CACA1D,GAAA,CACA,CACA+qD,EAAA3sD,GAAA,CAAAhM,IAAA,EAAA44D,EAAAzoD,EAAAmB,EAAA,EACA,EA5GA,KAAA1D,EAAAuC,EAAAmB,EACA,CAqBAtC,QAAA0C,CAAA,EAMA,GALA,KAAA1F,GAAA,CAAA6sD,IAAA,UAAAC,CAAA,CAAAC,CAAA,EACA,OAAAD,CAAA,IAAAC,CAAA,MAIA,SAAA/sD,GAAA,CAAAnO,MAAA,CACA,OAqBA,IAAA+P,EAAA,KAAA5B,GAAA,CAAAnO,MAAA,CAEAm7D,EAAA,GACA,KAAAprD,EAAA,GACAA,GAAA,EACAorD,EAAAh5D,IAAA,CAAA0R,EAAAtR,KAAA,MAAA4L,GAAA,CAAA4B,EAAA,SAAA5B,GAAA,CAAA4B,EAAA,UAAA5B,GAAA,CAAA4B,EAAA,KAGA8D,EAAA7T,MAAA,MAAAmO,GAAA,CAAA4B,EAAA,IAEAorD,EAAAh5D,IAAA,CAAA0R,EAAAtR,KAAA,IACAsR,EAAA7T,MAAA,GACA,IAAAuC,EAAA44D,EAAA16B,GAAA,GACA,KAAAl+B,GAAA,CACA,QAAAqG,KAAArG,EACAsR,EAAA1R,IAAA,CAAAyG,GAEArG,EAAA44D,EAAA16B,GAAA,EACA,CAGA,KAAAtyB,GAAA,CAAAnO,MAAA,EACA,CACA,CEhFA,SAAAo7D,GAAAhrD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,MAKAq3B,EAJA,IAAA3B,EAAA,KACA/8B,EAAA,EACAqyD,EAAA,EAGA,OAkBA,SAAA/qD,CAAA,EACA,IAAAP,EAAAg2B,EAAAlyB,MAAA,CAAA7T,MAAA,GACA,KAAA+P,EAAA,KACA,IAAA9M,EAAA8iC,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,CACA,GAAAA,eAAAA,GAEAA,eAAAA,EAAA8M,SAAqC,KACrC,CACA,IAAAq4B,EAAAr4B,EAAA,GAAAg2B,EAAAlyB,MAAA,CAAA9D,EAAA,IAAA9M,IAAA,MACA8hC,EAAAqD,cAAAA,GAAAA,aAAAA,EAAAkzB,EAAAC,SAGA,IAAAD,GAAAv1B,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,EACA+O,EAAAC,GAEAy0B,EAAAz0B,EACA,EAcA,SAAAirD,EAAAjrD,CAAA,EAGA,OAFAF,EAAAc,KAAA,cACAd,EAAAc,KAAA,aAiBA,MAhBAZ,IA8BAo3B,EAAA,GAEA2zB,GAAA,GAfAG,EAjBAlrD,EACA,CAiDA,SAAAkrD,EAAAlrD,CAAA,SACA,OAAAA,EAEAD,EAAAC,GAEQ,GAAAo1B,EAAA90B,EAAA,EAAkBN,GAE1B,KACA+qD,EAAA,EAGAt1B,EAAAe,SAAA,IACA12B,EAAAgB,IAAA,aACAhB,EAAAc,KAAA,eACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,eACAqqD,GAIAprD,EAAAC,GAEA,CAAQ,EAAAo1B,EAAAl1B,EAAA,EAAaF,GAIR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAorD,EAAA,cAAAlrD,IAEzB+qD,GAAA,EACA3zB,IACAA,EAAA,GAEA1+B,GAAA,GAEAsH,MAAAA,IACAF,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBAEAs2B,EAAA,GACA8zB,IAIAprD,EAAAc,KAAA,SACAwqD,EAAAprD,GACA,CAcA,SAAAorD,EAAAprD,CAAA,SACA,OAAAA,GAAAA,MAAAA,GAAyC,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAClEF,EAAAgB,IAAA,SACAoqD,EAAAlrD,KAEAF,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAAqrD,EAAAD,EACA,CAcA,SAAAC,EAAArrD,CAAA,SACA,KAAAA,GAAAA,MAAAA,GACAF,EAAAe,OAAA,CAAAb,GACAorD,GAEAA,EAAAprD,EACA,CAcA,SAAAmrD,EAAAnrD,CAAA,QAKA,CAHAy1B,EAAAe,SAAA,IAGAf,EAAAvB,MAAA,CAAA2C,IAAA,CAAApB,EAAAqB,GAAA,GAAA9lC,IAAA,GACA+O,EAAAC,IAEAF,EAAAc,KAAA,sBAEAw2B,EAAA,GACQ,GAAAhC,EAAAl1B,EAAA,EAAaF,IACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAwrD,EAAA,aAAA71B,EAAAvB,MAAA,CAAAlxB,UAAA,CAAAs0B,OAAA,CAAAC,IAAA,CAAA54B,QAAA,iBAAArD,KAAAA,EAAA,GAAA0E,GAEzBsrD,EAAAtrD,EACA,CAgBA,SAAAsrD,EAAAtrD,CAAA,SACA,KAAAA,GAAAA,KAAAA,EACAurD,EAAAvrD,GAEAA,MAAAA,GACAo3B,EAAA,GAEAt3B,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACA0qD,GA+KAzrD,EA3KAC,EACA,CAaA,SAAAwrD,EAAAxrD,CAAA,QACA,CAAQ,EAAAo1B,EAAAl1B,EAAA,EAAaF,GACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAAyrD,EAAA,cAAAvrD,GAEzBurD,EAAAvrD,EACA,CAaA,SAAAurD,EAAAvrD,CAAA,SAEA,KAAAA,GACA+qD,GAAA,EACA3zB,EAAA,GACAt3B,EAAAc,KAAA,yBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,yBACA2qD,GAIAzrD,KAAAA,GACA+qD,GAAA,EAEAU,EAAAzrD,IAEAA,OAAAA,GAAyB,GAAAo1B,EAAA90B,EAAA,EAAkBN,GAC3C0rD,EAAA1rD,GAyHAD,EAvHAC,EACA,CAaA,SAAAyrD,EAAAzrD,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,yBACA+qD,SAkBAA,EAAA3rD,CAAA,SACA,KAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA2rD,GAIA3rD,KAAAA,GACAo3B,EAAA,GACAt3B,EAAAgB,IAAA,yBACAhB,EAAAc,KAAA,yBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,yBACA8qD,IAEA9rD,EAAAgB,IAAA,yBACA8qD,EAAA5rD,GACA,EAnCAA,IAsGAD,EAlGAC,EACA,CA2CA,SAAA4rD,EAAA5rD,CAAA,QACA,CAAQ,EAAAo1B,EAAAl1B,EAAA,EAAaF,GACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA4rD,EAAA,cAAA1rD,GAEzB0rD,EAAA1rD,EACA,CAaA,SAAA0rD,EAAA1rD,CAAA,SACA,MAAAA,EACAsrD,EAAAtrD,GAEAA,OAAAA,GAAyB,GAAAo1B,EAAA90B,EAAA,EAAkBN,GAK3C,GAAAtH,IAAAqyD,GAKAjrD,EAAAgB,IAAA,sBACAhB,EAAAgB,IAAA,cAGArJ,EAAAuI,IAkBAD,EA1BAC,GA0BAD,EAhBAC,EACA,CA8BA,SAAAgrD,EAAAhrD,CAAA,EAKA,OADAF,EAAAc,KAAA,aACAirD,EAAA7rD,EACA,CAgBA,SAAA6rD,EAAA7rD,CAAA,SACA,MAAAA,GACAF,EAAAc,KAAA,qBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,qBACA+qD,GAEA7rD,OAAAA,GAAyB,GAAAo1B,EAAA90B,EAAA,EAAkBN,IAC3CF,EAAAgB,IAAA,aACArJ,EAAAuI,IAEQ,GAAAo1B,EAAAl1B,EAAA,EAAaF,GACR,GAAAk1B,GAAA90B,CAAA,EAAYN,EAAA+rD,EAAA,cAAA7rD,IAIzBF,EAAAc,KAAA,SACAkrD,EAAA9rD,GACA,CAcA,SAAA8rD,EAAA9rD,CAAA,SACA,OAAAA,GAAAA,MAAAA,GAAyC,GAAAo1B,EAAA9yB,EAAA,EAAyBtC,IAClEF,EAAAgB,IAAA,SACA+qD,EAAA7rD,KAEAF,EAAAe,OAAA,CAAAb,GACAA,KAAAA,EAAA+rD,EAAAD,EACA,CAcA,SAAAC,EAAA/rD,CAAA,SACA,KAAAA,GAAAA,MAAAA,GACAF,EAAAe,OAAA,CAAAb,GACA8rD,GAEAA,EAAA9rD,EACA,CACA,CAIA,SAAAgsD,GAAAzoD,CAAA,CAAAzI,CAAA,EACA,IAWAmxD,EAEAC,EAEAC,EAfA1sD,EAAA,GACA2sD,EAAA,GAEAC,EAAA,EAEAC,EAAA,UAEAxZ,EAAA,UACAyZ,EAAA,GACAC,EAAA,EAOA3uD,EAAA,IAAkBysD,GAClB,OAAA7qD,EAAA8D,EAAA7T,MAAA,GACA,IAAAwoB,EAAA3U,CAAA,CAAA9D,EAAA,CACAq0B,EAAA5b,CAAA,IACA,UAAAA,CAAA,IAEA4b,cAAAA,EAAAnhC,IAAA,EACA45D,EAAA,GAGA,IAAAC,IACAC,GAAA5uD,EAAA/C,EAAA0xD,EAAAP,EAAAC,GACAA,EAAA5wD,KAAAA,EACAkxD,EAAA,GAIAP,EAAA,CACAt5D,KAAA,QACA5B,MAAA1D,OAAAgX,MAAA,IAAiCyvB,EAAA/iC,KAAA,EAEjCI,IAAA9D,OAAAgX,MAAA,IAA+ByvB,EAAA3iC,GAAA,CAC/B,EACA0M,EAAAsF,GAAA,CAAA1D,EAAA,YAAAwsD,EAAAnxD,EAAA,IACQg5B,aAAAA,EAAAnhC,IAAA,EAAAmhC,sBAAAA,EAAAnhC,IAAA,EACRy5D,EAAA,GACAD,EAAA7wD,KAAAA,EACAgxD,EAAA,UACAxZ,EAAA,GAAArzC,EAAA,OAGA8sD,IACAA,EAAA,GACAL,EAAA,CACAv5D,KAAA,YACA5B,MAAA1D,OAAAgX,MAAA,IAAmCyvB,EAAA/iC,KAAA,EAEnCI,IAAA9D,OAAAgX,MAAA,IAAiCyvB,EAAA3iC,GAAA,CACjC,EACA0M,EAAAsF,GAAA,CAAA1D,EAAA,YAAAysD,EAAApxD,EAAA,IAEAuxD,EAAAv4B,sBAAAA,EAAAnhC,IAAA,GAAAu5D,EAAA,KAGAG,GAAAv4B,CAAAA,SAAAA,EAAAnhC,IAAA,EAAAmhC,yBAAAA,EAAAnhC,IAAA,EAAAmhC,yBAAAA,EAAAnhC,IAAA,GACAy5D,EAAA,GAGA,IAAAtZ,CAAA,MACA,IAAAwZ,CAAA,MACAxZ,CAAA,IAAAA,CAAA,IACAqZ,EAAAO,GAAA7uD,EAAA/C,EAAAwxD,EAAAD,EAAA/wD,KAAAA,EAAA6wD,GACAG,EAAA,WAEAxZ,CAAA,IAAArzC,IAEQ,qBAAAq0B,EAAAnhC,IAAA,GACRy5D,EACAA,EAAA,IAEA,IAAAE,CAAA,MACAxZ,CAAA,IAAAA,CAAA,IACAqZ,EAAAO,GAAA7uD,EAAA/C,EAAAwxD,EAAAD,EAAA/wD,KAAAA,EAAA6wD,IAGArZ,EAAA,CAAAwZ,CADAA,EAAAxZ,CAAA,CACA,IAAArzC,EAAA,OAKAq0B,cAAAA,EAAAnhC,IAAA,EACA45D,EAAA,GACAC,EAAA/sD,GACMq0B,aAAAA,EAAAnhC,IAAA,EAAAmhC,sBAAAA,EAAAnhC,IAAA,EACN65D,EAAA/sD,EACA6sD,IAAAA,CAAA,KACAxZ,CAAA,IAAAA,CAAA,IACAqZ,EAAAO,GAAA7uD,EAAA/C,EAAAwxD,EAAAD,EAAA5sD,EAAA0sD,IACQ,IAAArZ,CAAA,KACRqZ,CAAAA,EAAAO,GAAA7uD,EAAA/C,EAAAg4C,EAAAuZ,EAAA5sD,EAAA0sD,EAAA,EAEAE,EAAA,GACMA,GAAAv4B,CAAAA,SAAAA,EAAAnhC,IAAA,EAAAmhC,yBAAAA,EAAAnhC,IAAA,EAAAmhC,yBAAAA,EAAAnhC,IAAA,GACNmgD,CAAAA,CAAA,IAAArzC,CAAA,CAEA,CAUA,IATA,IAAA+sD,GACAC,GAAA5uD,EAAA/C,EAAA0xD,EAAAP,EAAAC,GAEAruD,EAAAgD,OAAA,CAAA/F,EAAAyI,MAAA,EAKA9D,EAAA,GACA,EAAAA,EAAA3E,EAAAyI,MAAA,CAAA7T,MAAA,GACA,IAAAwoB,EAAApd,EAAAyI,MAAA,CAAA9D,EAAA,CACA,UAAAyY,CAAA,KAAAA,UAAAA,CAAA,IAAAvlB,IAAA,EACAulB,CAAAA,CAAA,IAAAsuC,MAAA,CAAwBmG,SDtpBjBppD,CAAA,CAAA9D,CAAA,EACP,IAAAmtD,EAAA,GAEA71C,EAAA,GACA,KAAAtX,EAAA8D,EAAA7T,MAAA,GACA,IAAAwoB,EAAA3U,CAAA,CAAA9D,EAAA,CACA,GAAAmtD,GACA,GAAA10C,UAAAA,CAAA,IAGA,iBAAAA,CAAA,IAAAvlB,IAAA,EACAokB,EAAAllB,IAAA,CAAA0R,yBAAAA,CAAA,CAAA9D,EAAA,MAAA9M,IAAA,qBAMA,GAAAulB,iBAAAA,CAAA,IAAAvlB,IAAA,CACA,IAAA4Q,yBAAAA,CAAA,CAAA9D,EAAA,MAAA9M,IAAA,EACA,IAAAk6D,EAAA91C,EAAArnB,MAAA,EACAqnB,CAAAA,CAAA,CAAA81C,EAAA,CAAA91C,SAAAA,CAAA,CAAA81C,EAAA,iBACA,OAGA,GAAA30C,sBAAAA,CAAA,IAAAvlB,IAAA,CACA,UAEM,UAAAulB,CAAA,KAAAA,sBAAAA,CAAA,IAAAvlB,IAAA,EACNi6D,CAAAA,EAAA,IAEAntD,GAAA,CACA,CACA,OAAAsX,CACA,ECqnBqCjc,EAAAyI,MAAA,CAAA9D,EAAA,CAErC,CACA,OAAA8D,CACA,CAcA,SAAAmpD,GAAA7uD,CAAA,CAAA/C,CAAA,CAAAgyD,CAAA,CAAAT,CAAA,CAAAU,CAAA,CAAAC,CAAA,EAeA,IAAAF,CAAA,MACAE,EAAA77D,GAAA,CAAA9D,OAAAgX,MAAA,IAAuC4oD,GAAAnyD,EAAAyI,MAAA,CAAAupD,CAAA,MACvCjvD,EAAAsF,GAAA,CAAA2pD,CAAA,eAAAE,EAAAlyD,EAAA,IAUA,IAAAg8B,EAAAm2B,GAAAnyD,EAAAyI,MAAA,CAAAupD,CAAA,KAkBA,GAjBAE,EAAA,CACAr6D,KA1BA05D,IAAAA,EAAA,cAAAA,IAAAA,EAAA,6BA2BAt7D,MAAA1D,OAAAgX,MAAA,IAA2ByyB,GAE3B3lC,IAAA9D,OAAAgX,MAAA,IAAyByyB,EACzB,EACAj5B,EAAAsF,GAAA,CAAA2pD,CAAA,gBAAAE,EAAAlyD,EAAA,GAWAgyD,IAAAA,CAAA,KACA,IAAAI,EAAAD,GAAAnyD,EAAAyI,MAAA,CAAAupD,CAAA,KACAK,EAAAF,GAAAnyD,EAAAyI,MAAA,CAAAupD,CAAA,KAEAM,EAAA,CACAz6D,KA5CA,eA6CA5B,MAAA1D,OAAAgX,MAAA,IAA6B6oD,GAC7B/7D,IAAA9D,OAAAgX,MAAA,IAA2B8oD,EAC3B,EAEA,GADAtvD,EAAAsF,GAAA,CAAA2pD,CAAA,gBAAAM,EAAAtyD,EAAA,GACAuxD,IAAAA,EAAA,CAEA,IAAAt7D,EAAA+J,EAAAyI,MAAA,CAAAupD,CAAA,KACA37D,EAAA2J,EAAAyI,MAAA,CAAAupD,CAAA,KAMA,GALA/7D,CAAA,IAAAI,GAAA,CAAA9D,OAAAgX,MAAA,IAAqClT,CAAA,IAAAA,GAAA,EACrCJ,CAAA,IAAA4B,IAAA,aACA5B,CAAA,IAAA0iC,WAAA,QAGAq5B,CAAA,IAAAA,CAAA,OACA,IAAAnC,EAAAmC,CAAA,MACAlC,EAAAkC,CAAA,IAAAA,CAAA,MACAjvD,EAAAsF,GAAA,CAAAwnD,EAAAC,EAAA,GACA,CACA,CACA/sD,EAAAsF,GAAA,CAAA2pD,CAAA,iBAAAM,EAAAtyD,EAAA,EACA,CAcA,OALAQ,KAAAA,IAAAyxD,IACAC,EAAA77D,GAAA,CAAA9D,OAAAgX,MAAA,IAAuC4oD,GAAAnyD,EAAAyI,MAAA,CAAAwpD,IACvClvD,EAAAsF,GAAA,CAAA4pD,EAAA,WAAAC,EAAAlyD,EAAA,GACAkyD,EAAA1xD,KAAAA,GAEA0xD,CACA,CAYA,SAAAP,GAAA5uD,CAAA,CAAA/C,CAAA,CAAA2E,CAAA,CAAA6yC,CAAA,CAAA+a,CAAA,EAEA,IAAAC,EAAA,GACAC,EAAAN,GAAAnyD,EAAAyI,MAAA,CAAA9D,GACA4tD,IACAA,EAAAl8D,GAAA,CAAA9D,OAAAgX,MAAA,IAAoCkpD,GACpCD,EAAAz7D,IAAA,SAAAw7D,EAAAvyD,EAAA,GAEAw3C,EAAAnhD,GAAA,CAAA9D,OAAAgX,MAAA,IAA8BkpD,GAC9BD,EAAAz7D,IAAA,SAAAygD,EAAAx3C,EAAA,EACA+C,EAAAsF,GAAA,CAAA1D,EAAA,IAAA6tD,EACA,CAOA,SAAAL,GAAA1pD,CAAA,CAAA9D,CAAA,EACA,IAAAyY,EAAA3U,CAAA,CAAA9D,EAAA,CACA2oB,EAAAlQ,UAAAA,CAAA,kBACA,OAAAA,CAAA,IAAAkQ,EAAA,CC3yBA,IAAAolC,GAAA,CACA9+D,KAAA,gBACAmR,SAuBA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA01B,EAAA,KACA,OAYA,SAAAz1B,CAAA,SACA,OAEAy1B,EAAA5B,QAAA,EAGA4B,EAAAd,kCAAA,EAGA70B,EAAAc,KAAA,kBACAd,EAAAc,KAAA,wBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,wBACAg5B,GANA/5B,EAAAC,EAOA,EAYA,SAAA85B,EAAA95B,CAAA,QAIA,CAAQ,EAAAo1B,EAAA9yB,EAAA,EAAyBtC,IACjCF,EAAAc,KAAA,gCACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,gCACAu9B,GAEAr+B,KAAAA,GAAAA,MAAAA,GACAF,EAAAc,KAAA,8BACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,8BACAu9B,GAEAt+B,EAAAC,EACA,CAYA,SAAAq+B,EAAAr+B,CAAA,SACA,KAAAA,GACAF,EAAAc,KAAA,wBACAd,EAAAe,OAAA,CAAAb,GACAF,EAAAgB,IAAA,wBACAhB,EAAAgB,IAAA,kBACAT,GAEAN,EAAAC,EACA,CAKA,SAAAK,EAAAL,CAAA,QAEA,CAAQ,EAAAo1B,EAAA90B,EAAA,EAAkBN,GAC1BvI,EAAAuI,GAKQ,GAAAo1B,EAAAl1B,EAAA,EAAaF,GACrBF,EAAA2F,KAAA,EACA5F,SAAA4tD,EACA,EAAOh2D,EAAAsI,GAAAC,GAIPD,EAAAC,EACA,CACA,CA1HA,EAgIA,SAAAytD,GAAA3tD,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,MAAS,GAAAm1B,GAAA90B,CAAA,EAAYN,EAYrB,SAAAE,CAAA,EAKA,OAAAA,OAAAA,EAAAD,EAAAC,GAAAvI,EAAAuI,EACA,EAlBqB,aAmBrB,CEjJA,IAAAf,GAAA,GAWe,SAAAyuD,GAAAj/D,CAAA,MpDsIfk/D,EoDlIA,IAAAzuD,EAAAzQ,GAAAwQ,GACAqM,EAAAmqB,IAF2C,CAE3CnqB,IAAA,GAEAsiD,EACAtiD,EAAAsiD,mBAAA,EAAAtiD,CAAAA,EAAAsiD,mBAAA,KACAC,EACAviD,EAAAuiD,sBAAA,EAAAviD,CAAAA,EAAAuiD,sBAAA,KACAC,EACAxiD,EAAAwiD,oBAAA,EAAAxiD,CAAAA,EAAAwiD,oBAAA,KAEAF,EAAA/7D,IAAA,CDES,GAAA85C,GAAAC,CAAA,EAAiB,CPc1B,CACAlyB,KAAQ2vC,EACR,EC3BA,CACAzvD,SAAA,CACA,IACAlL,KAAA,wBACAmR,SAAAoqD,GACAr0B,aAAA,CACA/1B,SAAAuqD,EACA,EACAtpD,KAAAupD,EACA,CACA,EACA3wC,KAAA,CACA,IACAhrB,KAAA,kBACAmR,SAAAgqD,EACA,EACA,IACAn7D,KAAA,2BACAyU,IAAA,QACAtD,SAAA4pD,GACAztB,UAAA2tB,EACA,CACA,CACA,EMTIoE,SLzBGt/D,CAAA,EAEP,IAAAu/D,EAAAC,CADAx/D,GAAA,IACAy/D,WAAA,CACAj6B,EAAA,CACAvlC,KAAA,gBACAmR,SAsFA,SAAAC,CAAA,CAAArI,CAAA,CAAAsI,CAAA,EACA,IAAA8zB,EAAA,KAAAA,QAAA,CACAtwB,EAAA,KAAAA,MAAA,CACA7K,EAAA,EACA,OAGA,SAAAsH,CAAA,SACA,MAAA6zB,GAAAtwB,oBAAAA,CAAA,CAAAA,EAAA7T,MAAA,OAAAiD,IAAA,CACAoN,EAAAC,IAEAF,EAAAc,KAAA,mCACAyyB,SAIAA,EAAArzB,CAAA,EACA,IAAAkD,EAAqB,GAAAu9B,EAAA9sC,CAAA,EAAiBkgC,GACtC,GAAA7zB,MAAAA,SAEA,IAAAD,EAAAC,IACAF,EAAAe,OAAA,CAAAb,GACAtH,IACA26B,GAEA,GAAA36B,EAAA,IAAAs1D,EAAA,OAAAjuD,EAAAC,GACA,IAAA8zB,EAAAh0B,EAAAgB,IAAA,mCACAT,EAAoB,GAAAogC,EAAA9sC,CAAA,EAAiBqM,GAGrC,OAFA8zB,EAAAwM,KAAA,EAAAjgC,GAAAA,IAAAA,GAAAuxB,CAAAA,CAAA1uB,EACA4wB,EAAAuM,MAAA,EAAAn9B,GAAAA,IAAAA,GAAA0uB,CAAAA,CAAAvxB,EACA5I,EAAAuI,EACA,EAnBAA,GACA,CAmBA,EArHAsD,WAsBA,SAAAC,CAAA,CAAAzI,CAAA,EACA,IAAA2E,EAAA,GAGA,OAAAA,EAAA8D,EAAA7T,MAAA,EAEA,GAAA6T,UAAAA,CAAA,CAAA9D,EAAA,KAAA8D,mCAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EAAA4Q,CAAA,CAAA9D,EAAA,IAAA4gC,MAAA,EACA,IAAAhsB,EAAA5U,EAGA,KAAA4U,KAEA,GAAA9Q,SAAAA,CAAA,CAAA8Q,EAAA,KAAA9Q,mCAAAA,CAAA,CAAA8Q,EAAA,IAAA1hB,IAAA,EAAA4Q,CAAA,CAAA8Q,EAAA,IAAAisB,KAAA,EAEA/8B,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CAAAg1B,MAAA,EAAAxiB,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,CAAA40B,MAAA,CAAAxiB,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,CAAAg1B,MAAA,EACAxiB,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,yBACA4Q,CAAA,CAAA8Q,EAAA,IAAA1hB,IAAA,yBAGA,IAAAw7D,EAAA,CACAx7D,KAAA,gBACA5B,MAAA1D,OAAAgX,MAAA,IAAqCd,CAAA,CAAA8Q,EAAA,IAAAtjB,KAAA,EACrCI,IAAA9D,OAAAgX,MAAA,IAAmCd,CAAA,CAAA9D,EAAA,IAAAtO,GAAA,CACnC,EAGAuoB,EAAA,CACA/mB,KAAA,oBACA5B,MAAA1D,OAAAgX,MAAA,IAAqCd,CAAA,CAAA8Q,EAAA,IAAAljB,GAAA,EACrCA,IAAA9D,OAAAgX,MAAA,IAAmCd,CAAA,CAAA9D,EAAA,IAAA1O,KAAA,CACnC,EAIAqvC,EAAA,UAAA+tB,EAAArzD,EAAA,UAAAyI,CAAA,CAAA8Q,EAAA,IAAAvZ,EAAA,SAAAyI,CAAA,CAAA8Q,EAAA,IAAAvZ,EAAA,UAAA4e,EAAA5e,EAAA,EACA8jC,EAAA9jC,EAAAo5B,MAAA,CAAAlxB,UAAA,CAAA47B,UAAA,CAAArH,IAAA,CACAqH,GAEc,GAAA9J,GAAAvhC,CAAA,EAAM6sC,EAAAA,EAAA1wC,MAAA,GAAmC,GAAAgvC,GAAAC,CAAA,EAAUC,EAAAr7B,EAAAtR,KAAA,CAAAoiB,EAAA,EAAA5U,GAAA3E,IAIrD,GAAAg6B,GAAAvhC,CAAA,EAAM6sC,EAAAA,EAAA1wC,MAAA,YAAAgqB,EAAA5e,EAAA,UAAAyI,CAAA,CAAA9D,EAAA,IAAA3E,EAAA,SAAAyI,CAAA,CAAA9D,EAAA,IAAA3E,EAAA,SAAAqzD,EAAArzD,EAAA,GACN,GAAAg6B,GAAAvhC,CAAA,EAAMgQ,EAAA8Q,EAAA,EAAA5U,EAAA4U,EAAA,EAAA+rB,GAClB3gC,EAAA4U,EAAA+rB,EAAA1wC,MAAA,GACA,KACA,CAEA,CAGA,IADA+P,EAAA,GACA,EAAAA,EAAA8D,EAAA7T,MAAA,EACA,mCAAA6T,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,EACA4Q,CAAAA,CAAA,CAAA9D,EAAA,IAAA9M,IAAA,SAGA,OAAA4Q,CACA,CA9EA,EAIA,aAHAyqD,GACAA,CAAAA,EAAA,IAEA,CACAt0C,KAAA,CACA,IAAAua,CACA,EACA2K,WAAA,CACArH,KAAA,CAAAtD,EAAA,EAEAuM,iBAAA,CACAjJ,KAAA,MAEA,CAuGA,EMxG8Br4B,GHZ9B,CACA83B,KAAA,CACAO,KAAA,CACA7oC,KAAA,QACAmR,SAAAirD,GACAxnD,WAAA0oD,EACA,CACA,CACA,ECbA,CACAtyC,KAAA,CACA,GAAA8zC,EACA,CACA,ECqBA,GCPAK,EAAAh8D,IAAA,CTLA,C5CRA,CACA20C,WAAA,CAAA0Y,EAAA,CACAt+C,MAAA,CACAwtD,gBAAAxP,EACAyP,qBAAAxP,EACAyP,oBAAAzP,EACA0P,mBAAA1P,CACA,EACA/9C,KAAA,CACAstD,gBAAAnP,EACAoP,qBAAArP,EACAsP,oBAAAxP,EACAyP,mBAAAxP,CACA,CACA,EC2FA,CACAn+C,MAAA,CACA4tD,sBAAAvN,EACAwN,gBAAAvN,EACAwN,iCAAAvN,EACAwN,sBAAAvN,CACA,EACAtgD,KAAA,CACA0tD,sBAAAnN,EACAoN,gBAAAnN,EACAoN,iCAAAnN,EACAoN,sBAAAnN,CACA,CACA,ECtGA,CACA/a,eAAA,WACA7lC,MAAA,CAAYutD,cAAA/L,CAAA,EACZthD,KAAA,CAAWqtD,cAAA9L,CAAA,CACX,EwCFA,CACAzhD,MAAA,CACA0xC,MAAAiU,GACAqI,UAAAhI,GACAiI,YAAAjI,GACAlU,SAAAiU,EACA,EACA7lD,KAAA,CACAqmC,SAAA0f,GACAvU,MAAAoU,GACAkI,UAAA9tD,GACA+tD,YAAA/tD,GACA4xC,SAAA5xC,EACA,CACA,ECpCA,CACAA,KAAA,CACAguD,0BAAAhI,GACAiI,4BAAAjI,GACA5qB,UAAA6qB,EACA,CACA,ECYA,ESAA+G,EAAAj8D,IAAA,CTcA,CACA6Q,WAAA,C5CJA,CACAmgD,OAAA,CACA,CACAjsD,UAAA,IACAsM,OAAA,aACA7C,MAAA,YACAq+C,YAAAA,EACAC,eAAAA,CACA,EACA,CACA/nD,UAAA,IACAsM,OAAA,OACA7C,MAAA,YACAq+C,YAAAA,EACAC,eAAAA,CACA,EACA,CACA/nD,UAAA,IACAsM,OAAA,OACA7C,MAAA,MACAq+C,YAAAA,EACAC,eAAAA,CACA,EACA,GCoFAgP,EAAA,GoDtHyCzuD,GpDwHzCzQ,EAAAk/D,cAAA,EACAA,CAAAA,EAAA,IAGA,CACA5Z,SAAA,CAAeX,mBASf,SAAAniD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACA,IAAA27C,EAAAxzB,EAAAyzB,aAAA,CAAA57C,GACAjX,EAAA4yD,EAAAE,IAAA,OACA7gD,EAAAmtB,EAAArtB,KAAA,uBACAghD,EAAA3zB,EAAArtB,KAAA,UAsBA,OArBA/R,GAAA4yD,EAAAE,IAAA,CACA1zB,EAAA4zB,IAAA,CAAA5zB,EAAA6zB,aAAA,CAAA7wD,GAAA,CAA6CiS,OAAArU,EAAAwR,MAAA,OAE7CuhD,IAEA/yD,GAAA4yD,EAAAE,IAAA,OAEA1wD,EAAAmI,QAAA,EAAAnI,EAAAmI,QAAA,CAAA1J,MAAA,KACA+xD,EAAAvvB,KAAA,IAEArjC,GAAA4yD,EAAAE,IAAA,CACA,CAAAgM,EAAA,UACA1/B,EAAAq2B,WAAA,CACAr2B,EAAAs2B,aAAA,CAAAtzD,EAAAwwD,EAAAxpD,OAAA,IACA01D,EAAA1L,EAAAF,KAKAjhD,IAEAjS,CACA,EApCeyiD,kBAAAA,CAAA,EAEfuR,OAAA,EAAcjsD,UAAA,IAAA8nD,YAAA,kCAAgE,GC9G9E,CACAmE,OAAA,CACA,CACAjsD,UAAA,IACA8nD,YAAA,WACAC,eAAAwD,CACA,EACA,CACApO,SAAA,CAAe14C,OAAAinD,CAAA,CACf,E0CPM0M,SF6FCvgE,CAAA,EACP,IAAAyQ,EAAAzQ,GAAA,GACAwgE,EAAA/vD,EAAAgwD,gBAAA,CACAC,EAAAjwD,EAAAkwD,cAAA,CACAC,EAAAnwD,EAAAmwD,YAAA,CACAC,EAAAL,EAAA,QAEA,OACApM,OAAA,CACA,CAAOjsD,UAAA,KAAA8nD,YAAA,aACP,CAAO9nD,UAAA,KAAA8nD,YAAA,aAGP,CAAO/lB,QAAA,GAAA/hC,UAAA,IAAAyJ,MAAA,UAEP,CAAOzJ,UAAA,IAAA8nD,YAAA,aAGP,CAAO/lB,QAAA,GAAA/hC,UAAA,IAAAyJ,MAAA,KAMP,CAAOs4B,QAAA,GAAA/hC,UAAA,IAAAyJ,MAAA,SACP,CACA0zC,SAAA,CACA7B,WAgHA,SAAAjhD,CAAA,CAAAi8B,CAAA,CAAAe,CAAA,EACA,IAAAp/B,EAAgBmlD,GAAe9B,UAAA,CAAAjhD,EAAAi8B,EAAAe,GAM/B,OAJAA,EAAAZ,KAAA,CAAA1uB,QAAA,eACA9P,CAAAA,EAAAA,EAAAyB,OAAA,gBAGAzB,CACA,EAvHAyjD,MAUA,SAAArhD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACA,OAAAypD,EAAAC,SAwDAv+D,CAAA,CAAAg9B,CAAA,CAAAnoB,CAAA,EACA,IAAA1M,EAAAnI,EAAAmI,QAAA,CACAqG,EAAA,GAEAD,EAAA,GACAoiD,EAAA3zB,EAAArtB,KAAA,UAEA,OAAAnB,EAAArG,EAAA1J,MAAA,EACA8P,CAAA,CAAAC,EAAA,CAAAgwD,EAAAr2D,CAAA,CAAAqG,EAAA,CAAAwuB,EAAAnoB,GAKA,OAFA87C,IAEApiD,CACA,EAtEAvO,EAAAg9B,EAAAnoB,GAAA7U,EAAA8lB,KAAA,CACA,EAXA07B,UAAAid,EACAhd,SAoBA,SAAAzhD,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EAEA,IAAAjX,EAAA0gE,EAAA,CADAE,EAAAx+D,EAAAg9B,EAAAnoB,GACA,EAEA,OAAAjX,EAAAoD,KAAA,GAAApD,EAAAoP,OAAA,OACA,CAxBA,CACA,EA6BA,SAAAyxD,EAAAz+D,CAAA,CAAAsK,CAAA,CAAA0yB,CAAA,CAAAnoB,CAAA,EACA,IAAAhF,EAAAmtB,EAAArtB,KAAA,cACAghD,EAAA3zB,EAAArtB,KAAA,aACA/R,EAAAo/B,EAAAs0B,iBAAA,CAAAtxD,EAAA,CACA,GAAA6U,CAAA,CACA5C,OAAAosD,EACAjvD,MAAAivD,CACA,GAGA,OAFA1N,IACA9gD,IACAjS,CACA,CAMA,SAAA0gE,EAAAI,CAAA,CAAA54C,CAAA,EACA,OAAW64C,SvC7DJtd,CAAA,CAAA7jD,CAAA,EACP,IAAAyQ,EAAAzQ,GAAA,GAEAsoB,EAAA,CAAA7X,EAAA6X,KAAA,MAAA/f,MAAA,GACAq4D,EAAAnwD,EAAAmwD,YAAA,EAAA7M,EAEAqN,EAAA,GAEAC,EAAA,GAEAC,EAAA,GAEAC,EAAA,GACAC,EAAA,EACAtd,EAAA,GAIA,OAAAA,EAAAL,EAAA5iD,MAAA,GAEA,IAAAwgE,EAAA,GAEAl6C,EAAA,GACAm6C,EAAA,GAMA,IAJA7d,CAAA,CAAAK,EAAA,CAAAjjD,MAAA,CAAAugE,GACAA,CAAAA,EAAA3d,CAAA,CAAAK,EAAA,CAAAjjD,MAAA,EAGA,EAAAygE,EAAA7d,CAAA,CAAAK,EAAA,CAAAjjD,MAAA,OA8KAb,EA7KA,IAAAikD,EA8KAjkD,OADAA,EA7KAyjD,CAAA,CAAAK,EAAA,CAAAwd,EAAA,EA8KA,GAAAtuD,OAAAhT,GA5KA,GAAAqQ,CAAA,IAAAA,EAAAiwD,eAAA,EACA,IAAAz2D,EAAA22D,EAAAvc,EACA98B,CAAAA,CAAA,CAAAm6C,EAAA,CAAAz3D,EAGAs3D,CAAAA,KAAA10D,IAAA00D,CAAA,CAAAG,EAAA,EACAz3D,EAAAs3D,CAAA,CAAAG,EAAA,GAEAH,CAAAA,CAAA,CAAAG,EAAA,CAAAz3D,CAAA,CAEA,CAEAw3D,EAAAr+D,IAAA,CAAAihD,EACA,CAEAgd,CAAA,CAAAnd,EAAA,CAAAud,EACAH,CAAA,CAAApd,EAAA,CAAA38B,CACA,CAGA,IAAAm6C,EAAA,GAEA,oBAAAp5C,GAAA,WAAAA,EACA,OAAAo5C,EAAAF,GACAJ,CAAA,CAAAM,EAAA,CAAA1N,EAAA1rC,CAAA,CAAAo5C,EAAA,MAEI,CACJ,IAAAnwD,EAAAyiD,EAAA1rC,GAEA,OAAAo5C,EAAAF,GACAJ,CAAA,CAAAM,EAAA,CAAAnwD,CAEA,CAGAmwD,EAAA,GAEA,IAAAD,EAAA,GAEAl6C,EAAA,GAEA,OAAAm6C,EAAAF,GAAA,CACA,IAAAjwD,EAAA6vD,CAAA,CAAAM,EAAA,CACAjtD,EAAA,GACA7C,EAAA,EAEAL,CAAA,KAAAA,GACAkD,EAAA,IACA7C,EAAA,KACML,MAAAA,EACNkD,EAAA,IACM,MAAAlD,GACNK,CAAAA,EAAA,KAIA,IAAA3H,EACAwG,CAAA,IAAAA,EAAAiwD,eAAA,CACA,EACA58B,KAAA/xB,GAAA,CACA,EACAwvD,CAAA,CAAAG,EAAA,CAAAjtD,EAAAxT,MAAA,CAAA2Q,EAAA3Q,MAAA,EAGAojD,EAAA5vC,EAAA,IAAAyhD,MAAA,CAAAjsD,GAAA2H,CAEA,MAAAnB,EAAAiwD,eAAA,GACAz2D,CAAAA,EAAAwK,EAAAxT,MAAA,CAAAgJ,EAAA2H,EAAA3Q,MAAA,EAEAsgE,CAAA,CAAAG,EAAA,EACAH,CAAAA,CAAA,CAAAG,EAAA,CAAAz3D,CAAA,EAGAsd,CAAA,CAAAm6C,EAAA,CAAAz3D,GAGAw3D,CAAA,CAAAC,EAAA,CAAArd,CACA,CAGAgd,EAAA9wD,MAAA,KAAAkxD,GACAH,EAAA/wD,MAAA,KAAAgX,GAEA28B,EAAA,GAEA,IAAAhiD,EAAA,GAEA,OAAAgiD,EAAAmd,EAAApgE,MAAA,GACA,IAAAwgE,EAAAJ,CAAA,CAAAnd,EAAA,CACA38B,EAAA+5C,CAAA,CAAApd,EAAA,CACAwd,EAAA,GAEA,IAAAn/D,EAAA,GAEA,OAAAm/D,EAAAF,GAAA,CACA,IAAAnd,EAAAod,CAAA,CAAAC,EAAA,KACAjtD,EAAA,GACA7C,EAAA,GAEA,GAAAnB,CAAA,IAAAA,EAAAiwD,eAAA,EACA,IAAAz2D,EACAs3D,CAAA,CAAAG,EAAA,CAAAn6C,CAAAA,CAAA,CAAAm6C,EAAA,KACAnwD,EAAA6vD,CAAA,CAAAM,EAAA,CAEA,MAAAnwD,EACAkD,EAAA,IAAAyhD,MAAA,CAAAjsD,GACUsH,KAAAA,EACVtH,EAAA,GACAwK,EAAA,IAAAyhD,MAAA,CAAAjsD,EAAA,MACA2H,EAAA,IAAAskD,MAAA,CAAAjsD,EAAA,OAGA2H,EADA6C,EAAA,IAAAyhD,MAAA,CAAAjsD,EAAA,GAIA2H,EAAA,IAAAskD,MAAA,CAAAjsD,EAEA,CAEA,KAAAwG,EAAAkxD,cAAA,EAAAD,GACAn/D,EAAAa,IAAA,MAIA,KAAAqN,EAAA+vD,OAAA,EAGA,CAAA/vD,CAAAA,CAAA,IAAAA,EAAAiwD,eAAA,EAAArc,KAAAA,CAAA,GACA5zC,CAAAA,CAAA,IAAAA,EAAAkxD,cAAA,EAAAD,CAAA,GAEAn/D,EAAAa,IAAA,MAGA,KAAAqN,EAAAiwD,eAAA,EACAn+D,EAAAa,IAAA,CAAAqR,GAGAlS,EAAAa,IAAA,CAAAihD,GAEA,KAAA5zC,EAAAiwD,eAAA,EACAn+D,EAAAa,IAAA,CAAAwO,GAGA,KAAAnB,EAAA+vD,OAAA,EACAj+D,EAAAa,IAAA,MAIAqN,CAAAA,CAAA,IAAAA,EAAAmxD,YAAA,EACAF,IAAAF,EAAA,IAEAj/D,EAAAa,IAAA,KAEA,CAEAlB,EAAAkB,IAAA,CACAqN,CAAA,IAAAA,EAAAmxD,YAAA,CACAr/D,EAAA0O,IAAA,KAAApP,OAAA,WACAU,EAAA0O,IAAA,KAEA,CAEA,OAAA/O,EAAA+O,IAAA,MACA,EuCtIwBiwD,EAAA,CACxB54C,MAAAA,EAEAo4C,gBAAAA,EAEAF,QAAAA,EAEAI,aAAAA,CACA,EACA,CA4BA,SAAAI,EAAAx+D,CAAA,CAAAg9B,CAAA,CAAAnoB,CAAA,EACA,IAAA1M,EAAAnI,EAAAmI,QAAA,CACAqG,EAAA,GAEAD,EAAA,GACAoiD,EAAA3zB,EAAArtB,KAAA,aAEA,OAAAnB,EAAArG,EAAA1J,MAAA,EAIA8P,CAAA,CAAAC,EAAA,CAAAiwD,EAAAt2D,CAAA,CAAAqG,EAAA,CAAAxO,EAAAg9B,EAAAnoB,GAKA,OAFA87C,IAEApiD,CACA,CAeA,EWpQyCN,GVDzC,CACA2jD,OAAA,EAAclqB,QAAA,GAAA/hC,UAAA,IAAAyJ,MAAA,SAA8C,CAC5D0zC,SAAA,CAAe7L,SAAAgf,EAAA,CACf,ECmBA,ESpBA,oECmGO,IAAAoJ,EAgBP,SAAAr5D,CAAA,EACA,GAAAA,MAAAA,EACA,OAAAQ,EAGA,sBAAAR,EACA,OAAAs5D,EAAAt5D,GAGA,oBAAAA,EACA,OAAAlJ,MAAAF,OAAA,CAAAoJ,GAAAu5D,SAeAC,CAAA,EAEA,IAAAprD,EAAA,GACA5F,EAAA,GAEA,OAAAA,EAAAgxD,EAAA/gE,MAAA,EACA2V,CAAA,CAAA5F,EAAA,CAAA6wD,EAAAG,CAAA,CAAAhxD,EAAA,EAGA,OAAA8wD,EAMA,YAAAruD,CAAA,EACA,IAAAzC,EAAA,GAEA,OAAAA,EAAA4F,EAAA3V,MAAA,EACA,GAAA2V,CAAA,CAAA5F,EAAA,CAAAs5C,KAAA,MAAA72C,GAAA,SAGA,QACA,EACA,EAvCAjL,GAkDAs5D,EAMA,SAAAt/D,CAAA,MAMA9C,EAEA,IAAAA,KAhEA8I,EAiEA,GAAAy5D,CAAA,CAAAviE,EAAA,GAAAwiE,CAAA,CAAAxiE,EAAA,UAGA,QACA,GAlEA,oBAAA8I,EACA,OA2EAs5D,EAKA,SAAAt/D,CAAA,EACA,OAAAA,GAAAA,EAAA0B,IAAA,GAjFAsE,CAkFA,EA/EA,4DACA,EAuFA,SAAAs5D,EAAAK,CAAA,EACA,OAMA,SAAA/hE,CAAA,CAAA4Q,CAAA,CAAAytB,CAAA,MAqBAr+B,EApBA,MAAA+iC,CAAAA,CACAi/B,CAAAA,QAmBAhiE,EAnBAA,IAoBA,iBAAAA,GAAA,SAAAA,GAnBA+hE,EAAA5iE,IAAA,CACA,KACAa,EACA,iBAAA4Q,EAAAA,EAAAnE,KAAAA,EACA4xB,GAAA5xB,KAAAA,EACA,CAEA,CACA,CAEA,SAAA7D,IACA,QACA,2GE3DA,IAAAqM,EAAA,GAUOgtD,EAAA,GAsDA,SAAAC,EAAAtmB,CAAA,CAAAxzC,CAAA,CAAA6oD,CAAA,CAAAztB,CAAA,MAEP5sB,CAEA,oBAAAxO,GAAA,mBAAA6oD,GACAztB,EAAAytB,EAEAA,EAAA7oD,GAGAwO,EAAAxO,EAGA,IAAAmW,EAAa,GAAAk+B,EAAA5vC,CAAA,EAAO+J,GACpB8Q,EAAA8b,EAAA,KAEA2+B,CAOA,SAAAA,EAAA//D,CAAA,CAAAwO,CAAA,CAAAsgD,CAAA,EACA,IAAAlxD,EACAoC,GAAA,iBAAAA,EAAAA,EAAA,GAGA,oBAAApC,EAAA8D,IAAA,EACA,IAAAjE,EAEA,iBAAAG,EAAAw/B,OAAA,CACAx/B,EAAAw/B,OAAA,CAEA,iBAAAx/B,EAAAH,IAAA,CACAG,EAAAH,IAAA,CACA4M,KAAAA,EAEAjO,OAAAK,cAAA,CAAAujE,EAAA,QACApiE,MACA,SAA0BoC,EAAA0B,IAAA,CAAAjE,CAAAA,EAAA,IAAAA,EAAA,WAC1B,EACA,CAEA,OAAAuiE,EAEA,SAAAA,QAsDApiE,EApDA,IAEAqiE,EAEAnrC,EAEAorC,EANA3xD,EAAAsE,EAQA,KAAA7M,GAAAmW,EAAAnc,EAAAwO,EAAAsgD,CAAA,CAAAA,EAAArwD,MAAA,KAAA4L,KAAAA,EAAA,GAIAkE,CAFAA,EA2CA,MAAA3R,OAAA,CADAgB,EA1CAixD,EAAA7uD,EAAA8uD,IA4CAlxD,EAGA,iBAAAA,EACA,CArKO,GAqKPA,EAAA,CAGAA,MAAAA,EAAAiV,EAAA,CAAAjV,EAAA,CAjDA,MAAAiiE,EACA,OAAAtxD,EAIA,gBAAAvO,GAAAA,EAAAmI,QAAA,EAGAg4D,EAAAh4D,QAAA,EAAAoG,SAAAA,CAAA,IAIA,IAHAumB,EAAA,CAAAsM,EAAA++B,EAAAh4D,QAAA,CAAA1J,MAAA,KAAA6mB,EACA46C,EAAApR,EAAA/oD,MAAA,CAJqD/F,GAMrD80B,EAAA,IAAAA,EAAAqrC,EAAAh4D,QAAA,CAAA1J,MAAA,GAKA,GAAAwhE,CAFAA,EAAAF,EAFAI,EAAAh4D,QAAA,CAAA2sB,EAAA,CAEAA,EAAAorC,IAAA,CAEA,MAAAL,EACA,OAAAI,EAGAnrC,EACA,iBAAAmrC,CAAA,IAAAA,CAAA,IAAAnrC,EAAAxP,CACA,CAIA,OAAA/W,CACA,CACA,GAzEAirC,EAAAnvC,KAAAA,EAAA,KA0EA,oFCnGO,SAAA21D,EAAAxmB,CAAA,CAAA4mB,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAEP,IAAAl/B,EAEAp7B,EAEA6oD,CAGA,oBAAAuR,GACA,mBAAAC,GAEAr6D,EAAAqE,KAAAA,EACAwkD,EAAAuR,EACAh/B,EAAAi/B,IAGAr6D,EAAAo6D,EAEAvR,EAAAwR,EACAj/B,EAAAk/B,GAGE,GAAAC,EAAA3R,EAAA,EAAYpV,EAAAxzC,EAMd,SAAAhG,CAAA,CAAA8uD,CAAA,EACA,IAAA7yB,EAAA6yB,CAAA,CAAAA,EAAArwD,MAAA,IACA+P,EAAAytB,EAAAA,EAAA9zB,QAAA,CAAA6E,OAAA,CAAAhN,GAAAqK,KAAAA,EACA,OAAAwkD,EAAA7uD,EAAAwO,EAAAytB,EACA,EAVcmF,EAWd","sources":["webpack://_N_E/./node_modules/extend/index.js","webpack://_N_E/./node_modules/inline-style-parser/index.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/activity.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/alert-circle.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/arrow-down-right.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/arrow-up-right.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/bar-chart-3.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/book-open.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/check-circle.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/chevron-down.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/chevron-right.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/chevron-up.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/database.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/dollar-sign.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/eye.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/help-circle.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/pen-square.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/play.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/refresh-cw.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/square.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/trash-2.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/users.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/wifi.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/x.js","webpack://_N_E/./node_modules/lucide-react/dist/esm/icons/zap.js","webpack://_N_E/./node_modules/style-to-js/cjs/index.js","webpack://_N_E/./node_modules/style-to-js/cjs/utilities.js","webpack://_N_E/./node_modules/style-to-object/cjs/index.js","webpack://_N_E/./node_modules/devlop/lib/default.js","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","webpack://_N_E/./node_modules/mdast-util-to-string/lib/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://_N_E/./node_modules/micromark-factory-space/index.js","webpack://_N_E/./node_modules/micromark-util-character/index.js","webpack://_N_E/./node_modules/micromark-util-chunked/index.js","webpack://_N_E/./node_modules/micromark-util-classify-character/index.js","webpack://_N_E/./node_modules/micromark-util-combine-extensions/index.js","webpack://_N_E/./node_modules/micromark-util-normalize-identifier/index.js","webpack://_N_E/./node_modules/micromark-util-resolve-all/index.js","webpack://_N_E/./node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/estree-util-is-identifier-name/lib/index.js","webpack://_N_E/./node_modules/hast-util-whitespace/lib/index.js","webpack://_N_E/./node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/property-information/lib/normalize.js","webpack://_N_E/./node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/property-information/lib/svg.js","webpack://_N_E/./node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/property-information/index.js","webpack://_N_E/./node_modules/property-information/lib/find.js","webpack://_N_E/./node_modules/property-information/lib/hast-to-react.js","webpack://_N_E/./node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/unist-util-position/lib/index.js","webpack://_N_E/./node_modules/unist-util-stringify-position/lib/index.js","webpack://_N_E/./node_modules/vfile-message/lib/index.js","webpack://_N_E/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://_N_E/./node_modules/html-url-attributes/lib/index.js","webpack://_N_E/./node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://_N_E/./node_modules/micromark-util-subtokenize/index.js","webpack://_N_E/./node_modules/micromark/lib/postprocess.js","webpack://_N_E/./node_modules/micromark/lib/initialize/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/document.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/flow.js","webpack://_N_E/./node_modules/micromark/lib/initialize/text.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/list.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://_N_E/./node_modules/micromark-factory-destination/index.js","webpack://_N_E/./node_modules/micromark-factory-label/index.js","webpack://_N_E/./node_modules/micromark-factory-title/index.js","webpack://_N_E/./node_modules/micromark-factory-whitespace/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://_N_E/./node_modules/micromark-util-html-tag-name/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://_N_E/./node_modules/decode-named-character-reference/index.dom.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://_N_E/./node_modules/micromark/lib/constructs.js","webpack://_N_E/./node_modules/micromark/lib/create-tokenizer.js","webpack://_N_E/./node_modules/micromark/lib/parse.js","webpack://_N_E/./node_modules/micromark/lib/preprocess.js","webpack://_N_E/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://_N_E/./node_modules/micromark-util-decode-string/index.js","webpack://_N_E/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://_N_E/./node_modules/remark-parse/lib/index.js","webpack://_N_E/./node_modules/@ungap/structured-clone/esm/types.js","webpack://_N_E/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://_N_E/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://_N_E/./node_modules/@ungap/structured-clone/esm/index.js","webpack://_N_E/./node_modules/micromark-util-sanitize-uri/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://_N_E/./node_modules/trim-lines/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/state.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/lib/index.js","webpack://_N_E/./node_modules/bail/index.js","webpack://_N_E/./node_modules/is-plain-obj/index.js","webpack://_N_E/./node_modules/trough/lib/index.js","webpack://_N_E/./node_modules/vfile/lib/minpath.browser.js","webpack://_N_E/./node_modules/vfile/lib/minproc.browser.js","webpack://_N_E/./node_modules/vfile/lib/minurl.shared.js","webpack://_N_E/./node_modules/vfile/lib/minurl.browser.js","webpack://_N_E/./node_modules/vfile/lib/index.js","webpack://_N_E/./node_modules/unified/lib/callable-instance.js","webpack://_N_E/./node_modules/unified/lib/index.js","webpack://_N_E/./node_modules/react-markdown/lib/index.js","webpack://_N_E/./node_modules/ccount/index.js","webpack://_N_E/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://_N_E/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://_N_E/./node_modules/markdown-table/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://_N_E/./node_modules/longest-streak/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://_N_E/./node_modules/mdast-util-phrasing/lib/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm/lib/index.js","webpack://_N_E/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://_N_E/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://_N_E/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm/index.js","webpack://_N_E/./node_modules/remark-gfm/lib/index.js","webpack://_N_E/./node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/unist-util-visit-parents/lib/color.js","webpack://_N_E/./node_modules/unist-util-visit-parents/lib/index.js","webpack://_N_E/./node_modules/unist-util-visit/lib/index.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Activity = createLucideIcon(\"Activity\", [\n  [\"path\", { d: \"M22 12h-4l-3 9L9 3l-3 9H2\", key: \"d5dnw9\" }]\n]);\n\nexport { Activity as default };\n//# sourceMappingURL=activity.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst AlertCircle = createLucideIcon(\"AlertCircle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"8\", y2: \"12\", key: \"1pkeuh\" }],\n  [\"line\", { x1: \"12\", x2: \"12.01\", y1: \"16\", y2: \"16\", key: \"4dfq90\" }]\n]);\n\nexport { AlertCircle as default };\n//# sourceMappingURL=alert-circle.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowDownRight = createLucideIcon(\"ArrowDownRight\", [\n  [\"path\", { d: \"m7 7 10 10\", key: \"1fmybs\" }],\n  [\"path\", { d: \"M17 7v10H7\", key: \"6fjiku\" }]\n]);\n\nexport { ArrowDownRight as default };\n//# sourceMappingURL=arrow-down-right.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowUpRight = createLucideIcon(\"ArrowUpRight\", [\n  [\"path\", { d: \"M7 7h10v10\", key: \"1tivn9\" }],\n  [\"path\", { d: \"M7 17 17 7\", key: \"1vkiza\" }]\n]);\n\nexport { ArrowUpRight as default };\n//# sourceMappingURL=arrow-up-right.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst BarChart3 = createLucideIcon(\"BarChart3\", [\n  [\"path\", { d: \"M3 3v18h18\", key: \"1s2lah\" }],\n  [\"path\", { d: \"M18 17V9\", key: \"2bz60n\" }],\n  [\"path\", { d: \"M13 17V5\", key: \"1frdt8\" }],\n  [\"path\", { d: \"M8 17v-3\", key: \"17ska0\" }]\n]);\n\nexport { BarChart3 as default };\n//# sourceMappingURL=bar-chart-3.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst BookOpen = createLucideIcon(\"BookOpen\", [\n  [\"path\", { d: \"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\", key: \"vv98re\" }],\n  [\"path\", { d: \"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\", key: \"1cyq3y\" }]\n]);\n\nexport { BookOpen as default };\n//# sourceMappingURL=book-open.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CheckCircle = createLucideIcon(\"CheckCircle\", [\n  [\"path\", { d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\", key: \"g774vq\" }],\n  [\"path\", { d: \"m9 11 3 3L22 4\", key: \"1pflzl\" }]\n]);\n\nexport { CheckCircle as default };\n//# sourceMappingURL=check-circle.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronDown = createLucideIcon(\"ChevronDown\", [\n  [\"path\", { d: \"m6 9 6 6 6-6\", key: \"qrunsl\" }]\n]);\n\nexport { ChevronDown as default };\n//# sourceMappingURL=chevron-down.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronRight = createLucideIcon(\"ChevronRight\", [\n  [\"path\", { d: \"m9 18 6-6-6-6\", key: \"mthhwq\" }]\n]);\n\nexport { ChevronRight as default };\n//# sourceMappingURL=chevron-right.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronUp = createLucideIcon(\"ChevronUp\", [\n  [\"path\", { d: \"m18 15-6-6-6 6\", key: \"153udz\" }]\n]);\n\nexport { ChevronUp as default };\n//# sourceMappingURL=chevron-up.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Database = createLucideIcon(\"Database\", [\n  [\"ellipse\", { cx: \"12\", cy: \"5\", rx: \"9\", ry: \"3\", key: \"msslwz\" }],\n  [\"path\", { d: \"M3 5V19A9 3 0 0 0 21 19V5\", key: \"1wlel7\" }],\n  [\"path\", { d: \"M3 12A9 3 0 0 0 21 12\", key: \"mv7ke4\" }]\n]);\n\nexport { Database as default };\n//# sourceMappingURL=database.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst DollarSign = createLucideIcon(\"DollarSign\", [\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"2\", y2: \"22\", key: \"7eqyqh\" }],\n  [\n    \"path\",\n    { d: \"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\", key: \"1b0p4s\" }\n  ]\n]);\n\nexport { DollarSign as default };\n//# sourceMappingURL=dollar-sign.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Eye = createLucideIcon(\"Eye\", [\n  [\n    \"path\",\n    { d: \"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\", key: \"rwhkz3\" }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"3\", key: \"1v7zrd\" }]\n]);\n\nexport { Eye as default };\n//# sourceMappingURL=eye.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst HelpCircle = createLucideIcon(\"HelpCircle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\", key: \"1u773s\" }],\n  [\"path\", { d: \"M12 17h.01\", key: \"p32p05\" }]\n]);\n\nexport { HelpCircle as default };\n//# sourceMappingURL=help-circle.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst PenSquare = createLucideIcon(\"PenSquare\", [\n  [\n    \"path\",\n    {\n      d: \"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\",\n      key: \"1qinfi\"\n    }\n  ],\n  [\n    \"path\",\n    { d: \"M18.5 2.5a2.12 2.12 0 0 1 3 3L12 15l-4 1 1-4Z\", key: \"w2jsv5\" }\n  ]\n]);\n\nexport { PenSquare as default };\n//# sourceMappingURL=pen-square.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Play = createLucideIcon(\"Play\", [\n  [\"polygon\", { points: \"5 3 19 12 5 21 5 3\", key: \"191637\" }]\n]);\n\nexport { Play as default };\n//# sourceMappingURL=play.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\n    \"path\",\n    { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }\n  ],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\n    \"path\",\n    { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }\n  ],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Square = createLucideIcon(\"Square\", [\n  [\n    \"rect\",\n    { width: \"18\", height: \"18\", x: \"3\", y: \"3\", rx: \"2\", key: \"afitv7\" }\n  ]\n]);\n\nexport { Square as default };\n//# sourceMappingURL=square.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Trash2 = createLucideIcon(\"Trash2\", [\n  [\"path\", { d: \"M3 6h18\", key: \"d0wm0j\" }],\n  [\"path\", { d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\", key: \"4alrt4\" }],\n  [\"path\", { d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\", key: \"v07s0e\" }],\n  [\"line\", { x1: \"10\", x2: \"10\", y1: \"11\", y2: \"17\", key: \"1uufr5\" }],\n  [\"line\", { x1: \"14\", x2: \"14\", y1: \"11\", y2: \"17\", key: \"xtxkd\" }]\n]);\n\nexport { Trash2 as default };\n//# sourceMappingURL=trash-2.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Users = createLucideIcon(\"Users\", [\n  [\"path\", { d: \"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\", key: \"1yyitq\" }],\n  [\"circle\", { cx: \"9\", cy: \"7\", r: \"4\", key: \"nufk8\" }],\n  [\"path\", { d: \"M22 21v-2a4 4 0 0 0-3-3.87\", key: \"kshegd\" }],\n  [\"path\", { d: \"M16 3.13a4 4 0 0 1 0 7.75\", key: \"1da9ce\" }]\n]);\n\nexport { Users as default };\n//# sourceMappingURL=users.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Wifi = createLucideIcon(\"Wifi\", [\n  [\"path\", { d: \"M5 13a10 10 0 0 1 14 0\", key: \"6v8j51\" }],\n  [\"path\", { d: \"M8.5 16.5a5 5 0 0 1 7 0\", key: \"sej527\" }],\n  [\"path\", { d: \"M2 8.82a15 15 0 0 1 20 0\", key: \"dnpr2z\" }],\n  [\"line\", { x1: \"12\", x2: \"12.01\", y1: \"20\", y2: \"20\", key: \"of4bc4\" }]\n]);\n\nexport { Wifi as default };\n//# sourceMappingURL=wifi.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst X = createLucideIcon(\"X\", [\n  [\"path\", { d: \"M18 6 6 18\", key: \"1bl5f8\" }],\n  [\"path\", { d: \"m6 6 12 12\", key: \"d8bk6v\" }]\n]);\n\nexport { X as default };\n//# sourceMappingURL=x.js.map\n","/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Zap = createLucideIcon(\"Zap\", [\n  [\n    \"polygon\",\n    { points: \"13 2 3 14 12 14 11 22 21 10 12 10 13 2\", key: \"45s27k\" }\n  ]\n]);\n\nexport { Zap as default };\n//# sourceMappingURL=zap.js.map\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild) => {\n                    const presentChildKey = getChildKey(presentChild);\n                    return (\n                    // filter out the node exiting\n                    presentChildKey === key ||\n                        // filter out the leftover children\n                        leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exitingChildren.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {createElement, useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    /* c8 ignore next 7 -- hooks are client-only. */\n    function () {\n      const file = createFile(options)\n      processor.run(processor.parse(file), file, function (error, tree) {\n        setError(error)\n        setTree(tree)\n      })\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  /* c8 ignore next -- hooks are client-only. */\n  if (error) throw error\n\n  /* c8 ignore next -- hooks are client-only. */\n  return tree ? post(tree, options) : createElement(Fragment)\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  // Wrap in `div` if there’s a class name.\n  if (options.className) {\n    tree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className: options.className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        tree.type === 'root' ? tree.children : [tree]\n      )\n    }\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","end","source","content","errorsList","error","msg","err","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","FORWARD_SLASH","charAt","ASTERISK","EMPTY_STRING","type","declarations","decl","decls","declaration","prop","val","ret","property","Activity","_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__","Z","d","AlertCircle","cx","cy","r","x1","x2","y1","y2","ArrowDownRight","ArrowUpRight","BarChart3","BookOpen","CheckCircle","ChevronDown","ChevronRight","ChevronUp","Database","rx","ry","DollarSign","Eye","HelpCircle","PenSquare","Play","points","RefreshCw","Square","width","height","x","y","Trash2","Users","Wifi","X","Zap","style_to_object_1","__importDefault","mod","__esModule","__webpack_require__","utilities_1","StyleToJS","output","default","camelCase","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","toUpperCase","trimHyphen","prefix","concat","test","toLowerCase","reactCompat","iterator","styleObject","inline_style_parser_1","hasIterator","forEach","ok","unreachable","useIsMounted","isMounted","react","useRef","use_isomorphic_effect","L","current","PopChildMeasure","Component","getSnapshotBeforeUpdate","prevProps","element","props","childRef","isPresent","size","sizeRef","offsetHeight","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","id","useId","ref","useInsertionEffect","dataset","motionPopId","document","createElement","head","appendChild","sheet","insertRule","removeChild","cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","use_constant","h","newChildrenMap","context","useMemo","isComplete","set","childId","values","register","delete","undefined","_","useEffect","PresenceContext","O","Provider","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","callback","errors","k","forceRender","useContext","LayoutGroupContext","p","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","useCallback","frameloop_frame","Wi","postRender","filteredChildren","onlyElements","filtered","Children","isValidElement","childrenToRender","exitingChildren","presentChildren","allChildren","isInitialRender","updateChildLookup","clear","Fragment","map","presentKeys","targetKeys","numPresent","indexOf","has","component","get","insertionIndex","exitingComponent","leftOverKeys","from","keys","filter","includes","childKey","leftOverKey","presentChildKey","presentChild","splice","emptyOptions","settings","one","includeImageAlt","includeHtml","alt","all","result","index","join","blankLine","partial","tokenize","effects","nok","code","micromark_util_character__WEBPACK_IMPORTED_MODULE_0__","xz","micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__","f","after","Ch","factorySpace","max","limit","Number","POSITIVE_INFINITY","enter","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","String","fromCharCode","list","remove","items","parameters","chunkStart","unshift","classifyCharacter","z3","B8","Xh","combineExtensions","extensions","syntaxExtension","extension","hook","maybe","right","constructs","existing","before","add","micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__","normalizeIdentifier","resolveAll","events","called","resolve","nameRe","nameReJsx","lib_name","jsx","empty","Schema","normal","space","merge","definitions","definition","assign","normalize","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","types_boolean","increment","checks","types_namespaceObject","DefinedInfo","mask","check","create","properties","normals","entries","info","transform","attributes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","xChannelSelector","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","property_information_html","property_information_svg","cap","dash","valid","kebab","$0","camelcase","hastToReact","pointEnd","point","pointStart","stringifyPosition","lib_position","lib_point","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","lib_cap","tableElements","Set","tableCellElement","docs","state","lib_element","parentSchema","schema","tagName","findComponentFromName","createElementProps","alignValue","createProperty","find","Type","rest","dashes","isNaN","stringify","input","padRight","padLeft","parseStyle","cjs","ignoreInvalidStyle","filePath","stylePropertyNameCase","transformStylesToCssCasing","domCasing","cssCasing","transformStyleToCssCasing","toDash","elementAttributeNameCase","tableCellAlignToStyle","createChildren","thing","addNode","addChildren","pop","mdxExpression","estree","evaluater","expression","program","body","lib_default","evaluateExpression","crashEstree","mdxJsxElement","createJsxElementProps","objectExpression","argument","mdxEsm","evaluateProgram","root","passNode","countsByName","passKeys","count","allowExpression","identifiers","split","computed","Boolean","optional","components","urlAttributes","icon","SpliceBuffer","shift","setCursor","stop","reverse","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","eventIndex","stream","previous","token","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","_container","micromark_util_chunked","contentStart","attempt","contentInitial","micromark_factory_space","lineStart","micromark_util_character","document_document","childFlow","childToken","lineStartOffset","self","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","disable","null","content_content","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","blank_line","w","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","text_text","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","tabs","chunks","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","pY","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","Av","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","titleBefore","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","blankLineBefore","nonLazyContinuationStart","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","index_dom_element","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","H$","AF","characterEscape","sR","lineEnding","labelEnd","newEvents","close","_inactive","_balanced","group","V","micromark_util_resolve_all","C","insideSpan","labelStart","labelEndNok","micromark_util_normalize_identifier","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","micromark_util_classify_character","labelStartLink","constructs_document","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","constructs_flow","sequenceFurther","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","jv","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeEnd","completeAttributeNameBefore","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","constructs_string","constructs_text","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","n9","emailLabel","emailValue","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","tailExitIndex","headEnterIndex","between","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","lib_own","mdast_util_from_markdown_lib_point","defaultOnError","remarkParse","doc","encoding","atCarriageReturn","mdastExtensions","compiler","config","transforms","canContainEols","autolink","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","listItemValue","expectingFirstListItemValue","ancestor","listOrdered","listUnordered","reference","referenceType","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","resume","flowCodeInside","codeFencedFence","onexithardbreak","inReference","fragment","labelText","atHardBreak","setextHeadingSlurpLineEnding","setextHeadingLineSequence","codePointAt","setextHeadingText","configure","combined","tree","tokenStack","listStack","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","siblings","onExitError","lib","B","ordered","postprocess","parse_parse","micromark_util_combine_extensions","W","constructs_namespaceObject","createTokenizer","initialize","columnStart","resolveAllConstructs","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","serializeChunks","atTab","main","chunkIndex","go","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","preprocess","endPosition","TextDecoder","lastIndex","ceil","env","globalThis","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","deserialize","serialized","serialize_toString","asString","shouldSkip","TYPE","serializer","strict","json","pair","valueOf","toJSON","toISOString","serialize","lossy","esm","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLine","handlers_handlers","blockquote","patch","applyData","break","footnoteReference","counter","clobberPrefix","safeId","footnoteOrder","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","rowIndex","cellIndex","cells","cell","trimLines","last","toml","ignore","yaml","footnoteDefinition","state_own","state_emptyOptions","hName","hChildren","hProperties","nodes","trimMarkdownSpaceStart","toHast","createState","footnoteById","handlers","handle","passThrough","shallow","unknown","unknownHandler","unist_util_visit_lib","Vn","foot","footer","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","minpath","basename","extname","seenNonSlash","assertPath","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","minpath_browser_normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","VFile","history","messages","stored","assertNonEmpty","assertPart","lib_assertPath","stem","urlToPath","URL","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","fail","decoder","part","CallableInstance","proto","constr","apply","setPrototypeOf","unified_lib_own","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","trough","fns","pipeline","middlewareIndex","fn","lib_wrap","middleware","fnExpectsCallback","done","then","middelware","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugins","plugin","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","rehypePlugins","remarkPlugins","remarkRehypeOptions","createFile","t1","post","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","toJsxRuntime","jsxDEV","jsxs","development","isStaticChildren","columnNumber","fileName","lineNumber","createEvaluater","jsx_runtime","colon","questionMark","numberSign","ccount","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findAndReplace","ignored","unist_util_is_lib","pairs","toPairs","tupleOrList","tuple","escapeStringRegexp","toFunction","pairIndex","S4","visitor","parents","grandparent","change","matchObject","global","findUrl","findEmail","domain","isCorrectDomain","parts","splitUrl","trailExec","trail","closingParenIndex","openingParens","closingParens","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","mapExceptFirst","blank","mapAll","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","code_map","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","image_image","compilePattern","formatLinkAsAutolink","mdast_util_to_string_lib","resourceLink","link_link","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","indentLines","containerFlow","checkFence","fence","fences","repeat","longestStreak","substring","encode","literalWithBreak","rank","BK","setext","closeAtx","bulletCurrent","checkBulletOrdered","bulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","container","hasPhrasing","some","ruleSpaces","checkRuleRepetition","repetition","ruleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","syntax_text","syntax_code","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","EditMap","addImplementation","editMap","at","sort","a","b","vecs","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","gfmTableAlign","inDelimiterRow","alignIndex","range","rowEnd","previousCell","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","firstLineBlank","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfmStrikethrough","single","options_","singleTilde","strikethrough","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableAsData","handleTableRowAsData","handleTableCell","matrix","markdownTable","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","row","columnIndex","delimiterStart","delimiterEnd","convert","castFactory","anyFactory","tests","nodeAsRecord","checkAsRecord","testFunction","looksLikeANode","EXIT","visitParents","factory","visit","subresult","grandparents","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}